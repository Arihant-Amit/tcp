
tcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e9c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003044  0801309c  0801309c  0002309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160e0  080160e0  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080160e0  080160e0  000260e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160e8  080160e8  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160e8  080160e8  000260e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160ec  080160ec  000260ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080160f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006960  2000007c  0801616c  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069dc  0801616c  000369dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257fd  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d30  00000000  00000000  000558a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0005b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  0005d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035160  00000000  00000000  0005ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3ce  00000000  00000000  00093bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116b02  00000000  00000000  000c0fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d7ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007730  00000000  00000000  001d7b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08013084 	.word	0x08013084

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08013084 	.word	0x08013084

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <SCB_EnableICache+0x48>)
 8000606:	2200      	movs	r2, #0
 8000608:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <SCB_EnableICache+0x48>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <SCB_EnableICache+0x48>)
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
}
 8000628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000648:	2200      	movs	r2, #0
 800064a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800065a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0b5b      	lsrs	r3, r3, #13
 8000660:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000664:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800066e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	015a      	lsls	r2, r3, #5
 8000674:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000678:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800067e:	4911      	ldr	r1, [pc, #68]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000680:	4313      	orrs	r3, r2
 8000682:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1ef      	bne.n	8000670 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	60fa      	str	r2, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1e5      	bne.n	8000666 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <SCB_EnableDCache+0x84>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <SCB_EnableDCache+0x84>)
 80006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
}
 80006b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006cc:	f7ff ff92 	bl	80005f4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006d0:	f7ff ffb6 	bl	8000640 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fe07 	bl	80012e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f80c 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f8aa 	bl	8000834 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e0:	f000 f878 	bl	80007d4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006e4:	f004 fab8 	bl	8004c58 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80006e8:	f000 fb6c 	bl	8000dc4 <tcp_server_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MX_LWIP_Process();
 80006ec:	f004 fafa 	bl	8004ce4 <MX_LWIP_Process>
 80006f0:	e7fc      	b.n	80006ec <main+0x24>
	...

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f011 fc52 	bl	8011fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000718:	f002 f9ce 	bl	8002ab8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xd8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xd8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xd8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xdc>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xdc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000764:	23d8      	movs	r3, #216	; 0xd8
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f002 f9fd 	bl	8002b78 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f92a 	bl	80009dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000788:	f002 f9a6 	bl	8002ad8 <HAL_PWREx_EnableOverDrive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000792:	f000 f923 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2107      	movs	r1, #7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fc8d 	bl	80030d4 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c0:	f000 f90c 	bl	80009dc <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART3_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART3_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART3_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART3_UART_Init+0x58>)
 8000818:	f003 fdbc 	bl	8004394 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8db 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000098 	.word	0x20000098
 8000830:	40004800 	.word	0x40004800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <MX_GPIO_Init+0x170>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a55      	ldr	r2, [pc, #340]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4f      	ldr	r2, [pc, #316]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4d      	ldr	r3, [pc, #308]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <MX_GPIO_Init+0x170>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a49      	ldr	r2, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a43      	ldr	r2, [pc, #268]	; (80009a4 <MX_GPIO_Init+0x170>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b41      	ldr	r3, [pc, #260]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x170>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e0:	4831      	ldr	r0, [pc, #196]	; (80009a8 <MX_GPIO_Init+0x174>)
 80008e2:	f002 f8cf 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4830      	ldr	r0, [pc, #192]	; (80009ac <MX_GPIO_Init+0x178>)
 80008ec:	f002 f8ca 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482a      	ldr	r0, [pc, #168]	; (80009b0 <MX_GPIO_Init+0x17c>)
 8000908:	f001 ff10 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800090c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4820      	ldr	r0, [pc, #128]	; (80009a8 <MX_GPIO_Init+0x174>)
 8000926:	f001 ff01 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	481a      	ldr	r0, [pc, #104]	; (80009ac <MX_GPIO_Init+0x178>)
 8000942:	f001 fef3 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <MX_GPIO_Init+0x178>)
 800095a:	f001 fee7 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800095e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000970:	230a      	movs	r3, #10
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x180>)
 800097c:	f001 fed6 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_GPIO_Init+0x180>)
 8000996:	f001 fec9 	bl	800272c <HAL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40021800 	.word	0x40021800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 fc99 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001400 	.word	0x40001400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2290      	movs	r2, #144	; 0x90
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f011 faab 	bl	8011fac <memset>
  if(huart->Instance==USART3)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_UART_MspInit+0xb4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13c      	bne.n	8000ada <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fd88 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff ffaf 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000ad6:	f001 fe29 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	37b8      	adds	r7, #184	; 0xb8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2037      	movs	r0, #55	; 0x37
 8000b06:	f000 fcf7 	bl	80014f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b0a:	2037      	movs	r0, #55	; 0x37
 8000b0c:	f000 fd10 	bl	8001530 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fcf4 	bl	8003520 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b38:	f002 fcca 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	0c9b      	lsrs	r3, r3, #18
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_InitTick+0xac>)
 8000b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b72:	f003 f92f 	bl	8003dd4 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d104      	bne.n	8000b86 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b7e:	f003 f98b 	bl	8003e98 <HAL_TIM_Base_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	2000011c 	.word	0x2000011c
 8000b9c:	40001400 	.word	0x40001400

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM7_IRQHandler+0x10>)
 8000bfe:	f003 f9c3 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000011c 	.word	0x2000011c

08000c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_kill>:

int _kill(int pid, int sig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <_kill+0x20>)
 8000c28:	2216      	movs	r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200069cc 	.word	0x200069cc

08000c40 <_exit>:

void _exit (int status)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffe5 	bl	8000c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c52:	e7fe      	b.n	8000c52 <_exit+0x12>

08000c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
	}

return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
	}
	return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d205      	bcs.n	8000d6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <_sbrk+0x6c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20080000 	.word	0x20080000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	20000168 	.word	0x20000168
 8000d98:	200069e0 	.word	0x200069e0
 8000d9c:	200069cc 	.word	0x200069cc

08000da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000dca:	f007 fc2d 	bl	8008628 <tcp_new>
 8000dce:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 0,0,0,0);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR,49152);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dda:	4619      	mov	r1, r3
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f006 fb7f 	bl	80074e0 <tcp_bind>
 8000de2:	4603      	mov	r3, r0
 8000de4:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000de6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <tcp_server_init+0x3e>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000dee:	21ff      	movs	r1, #255	; 0xff
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f006 fc2d 	bl	8007650 <tcp_listen_with_backlog>
 8000df6:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000df8:	4906      	ldr	r1, [pc, #24]	; (8000e14 <tcp_server_init+0x50>)
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f007 fc94 	bl	8008728 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000e00:	e003      	b.n	8000e0a <tcp_server_init+0x46>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000e02:	68f9      	ldr	r1, [r7, #12]
 8000e04:	2001      	movs	r0, #1
 8000e06:	f004 ffad 	bl	8005d64 <memp_free>
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08000e19 	.word	0x08000e19

08000e18 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	4613      	mov	r3, r2
 8000e24:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000e26:	2101      	movs	r1, #1
 8000e28:	68b8      	ldr	r0, [r7, #8]
 8000e2a:	f007 fa0b 	bl	8008244 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f004 fdde 	bl	80059f0 <mem_malloc>
 8000e34:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01f      	beq.n	8000e7c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f007 fbee 	bl	8008638 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000e5c:	490d      	ldr	r1, [pc, #52]	; (8000e94 <tcp_server_accept+0x7c>)
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f007 fbfc 	bl	800865c <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <tcp_server_accept+0x80>)
 8000e66:	68b8      	ldr	r0, [r7, #8]
 8000e68:	f007 fc3c 	bl	80086e4 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	490b      	ldr	r1, [pc, #44]	; (8000e9c <tcp_server_accept+0x84>)
 8000e70:	68b8      	ldr	r0, [r7, #8]
 8000e72:	f007 fc71 	bl	8008758 <tcp_poll>

    ret_err = ERR_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
 8000e7a:	e005      	b.n	8000e88 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000e7c:	6939      	ldr	r1, [r7, #16]
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f000 f965 	bl	800114e <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000e84:	23ff      	movs	r3, #255	; 0xff
 8000e86:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08000ea1 	.word	0x08000ea1
 8000e98:	08000fd5 	.word	0x08000fd5
 8000e9c:	08000ff9 	.word	0x08000ff9

08000ea0 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <tcp_server_recv+0x20>
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <tcp_server_recv+0x124>)
 8000eb6:	22c3      	movs	r2, #195	; 0xc3
 8000eb8:	4943      	ldr	r1, [pc, #268]	; (8000fc8 <tcp_server_recv+0x128>)
 8000eba:	4844      	ldr	r0, [pc, #272]	; (8000fcc <tcp_server_recv+0x12c>)
 8000ebc:	f011 f87e 	bl	8011fbc <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000ed8:	69b9      	ldr	r1, [r7, #24]
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f000 f937 	bl	800114e <tcp_server_connection_close>
 8000ee0:	e007      	b.n	8000ef2 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000ee2:	493b      	ldr	r1, [pc, #236]	; (8000fd0 <tcp_server_recv+0x130>)
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f007 fbdb 	bl	80086a0 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f000 f8db 	bl	80010a8 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	77fb      	strb	r3, [r7, #31]
 8000ef6:	e05f      	b.n	8000fb8 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f005 fd43 	bl	8006998 <pbuf_free>
    }
    ret_err = err;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	77fb      	strb	r3, [r7, #31]
 8000f16:	e04f      	b.n	8000fb8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d110      	bne.n	8000f42 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000f2c:	4928      	ldr	r1, [pc, #160]	; (8000fd0 <tcp_server_recv+0x130>)
 8000f2e:	68b8      	ldr	r0, [r7, #8]
 8000f30:	f007 fbb6 	bl	80086a0 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000f34:	69b9      	ldr	r1, [r7, #24]
 8000f36:	68b8      	ldr	r0, [r7, #8]
 8000f38:	f000 f930 	bl	800119c <tcp_server_handle>

    ret_err = ERR_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	77fb      	strb	r3, [r7, #31]
 8000f40:	e03a      	b.n	8000fb8 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d115      	bne.n	8000f76 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000f58:	69b9      	ldr	r1, [r7, #24]
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	f000 f91e 	bl	800119c <tcp_server_handle>
 8000f60:	e006      	b.n	8000f70 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f005 fe2c 	bl	8006bc8 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	77fb      	strb	r3, [r7, #31]
 8000f74:	e020      	b.n	8000fb8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d10e      	bne.n	8000f9c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	891b      	ldrh	r3, [r3, #8]
 8000f82:	4619      	mov	r1, r3
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f006 fc79 	bl	800787c <tcp_recved>
    es->p = NULL;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f005 fd01 	bl	8006998 <pbuf_free>
    ret_err = ERR_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]
 8000f9a:	e00d      	b.n	8000fb8 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	891b      	ldrh	r3, [r3, #8]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68b8      	ldr	r0, [r7, #8]
 8000fa4:	f006 fc6a 	bl	800787c <tcp_recved>
    es->p = NULL;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f005 fcf2 	bl	8006998 <pbuf_free>
    ret_err = ERR_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000fb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0801309c 	.word	0x0801309c
 8000fc8:	080130b8 	.word	0x080130b8
 8000fcc:	080130c4 	.word	0x080130c4
 8000fd0:	08001059 	.word	0x08001059

08000fd4 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f004 fb9a 	bl	8005724 <mem_free>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d017      	beq.n	800103c <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001014:	490f      	ldr	r1, [pc, #60]	; (8001054 <tcp_server_poll+0x5c>)
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f007 fb42 	bl	80086a0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f000 f842 	bl	80010a8 <tcp_server_send>
 8001024:	e007      	b.n	8001036 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d103      	bne.n	8001036 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f000 f88c 	bl	800114e <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e004      	b.n	8001046 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f006 fa43 	bl	80074c8 <tcp_abort>
    ret_err = ERR_ABRT;
 8001042:	23f3      	movs	r3, #243	; 0xf3
 8001044:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08001059 	.word	0x08001059

08001058 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2200      	movs	r2, #0
 800106e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8001078:	490a      	ldr	r1, [pc, #40]	; (80010a4 <tcp_server_sent+0x4c>)
 800107a:	68b8      	ldr	r0, [r7, #8]
 800107c:	f007 fb10 	bl	80086a0 <tcp_sent>
    tcp_server_send(tpcb, es);
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f000 f810 	bl	80010a8 <tcp_server_send>
 8001088:	e007      	b.n	800109a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d103      	bne.n	800109a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8001092:	6979      	ldr	r1, [r7, #20]
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f000 f85a 	bl	800114e <tcp_server_connection_close>
  }
  return ERR_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	08001059 	.word	0x08001059

080010a8 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80010b6:	e036      	b.n	8001126 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6859      	ldr	r1, [r3, #4]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	895a      	ldrh	r2, [r3, #10]
 80010c6:	2301      	movs	r3, #1
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f00a f9f7 	bl	800b4bc <tcp_write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80010d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11d      	bne.n	8001116 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	895b      	ldrh	r3, [r3, #10]
 80010de:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fcef 	bl	8006ad8 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80010fa:	6938      	ldr	r0, [r7, #16]
 80010fc:	f005 fc4c 	bl	8006998 <pbuf_free>
 8001100:	4603      	mov	r3, r0
 8001102:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f7      	beq.n	80010fa <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f006 fbb4 	bl	800787c <tcp_recved>
 8001114:	e007      	b.n	8001126 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800111a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111e:	d102      	bne.n	8001126 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10b      	bne.n	8001146 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	895a      	ldrh	r2, [r3, #10]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8001142:	429a      	cmp	r2, r3
 8001144:	d9b8      	bls.n	80010b8 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f007 fa6c 	bl	8008638 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001160:	2100      	movs	r1, #0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f007 fa9c 	bl	80086a0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f007 fa76 	bl	800865c <tcp_recv>
  tcp_err(tpcb, NULL);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f007 fab6 	bl	80086e4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f007 faeb 	bl	8008758 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f004 facb 	bl	8005724 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f006 f8b0 	bl	80072f4 <tcp_close>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0a0      	sub	sp, #128	; 0x80
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	8b1b      	ldrh	r3, [r3, #24]
 80011b4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80011b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011bc:	4618      	mov	r0, r3
 80011be:	f00f ff0f 	bl	8010fe0 <ip4addr_ntoa>
 80011c2:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011ca:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011d2:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011da:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2264      	movs	r2, #100	; 0x64
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f010 fee1 	bl	8011fac <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	891b      	ldrh	r3, [r3, #8]
 80011f6:	461a      	mov	r2, r3
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4618      	mov	r0, r3
 80011fe:	f010 ff33 	bl	8012068 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f81a 	bl	8000240 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4413      	add	r3, r2
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <tcp_server_handle+0xf4>)
 8001218:	461d      	mov	r5, r3
 800121a:	4614      	mov	r4, r2
 800121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121e:	6028      	str	r0, [r5, #0]
 8001220:	6069      	str	r1, [r5, #4]
 8001222:	60aa      	str	r2, [r5, #8]
 8001224:	60eb      	str	r3, [r5, #12]
 8001226:	cc03      	ldmia	r4!, {r0, r1}
 8001228:	6128      	str	r0, [r5, #16]
 800122a:	6169      	str	r1, [r5, #20]
 800122c:	7823      	ldrb	r3, [r4, #0]
 800122e:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8001230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	891a      	ldrh	r2, [r3, #8]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	895b      	ldrh	r3, [r3, #10]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b29c      	uxth	r4, r3
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe fff6 	bl	8000240 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4422      	add	r2, r4
 800125e:	b292      	uxth	r2, r2
 8001260:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffea 	bl	8000240 <strlen>
 800126c:	4602      	mov	r2, r0
 800126e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	b292      	uxth	r2, r2
 8001274:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8001276:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff15 	bl	80010a8 <tcp_server_send>

	pbuf_free(es->p);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4618      	mov	r0, r3
 8001284:	f005 fb88 	bl	8006998 <pbuf_free>

}
 8001288:	bf00      	nop
 800128a:	3780      	adds	r7, #128	; 0x80
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	080130ec 	.word	0x080130ec

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff fd6f 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f010 fe31 	bl	8011f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f9ff 	bl	80006c8 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012d8:	080160f0 	.word	0x080160f0
  ldr r2, =_sbss
 80012dc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012e0:	200069dc 	.word	0x200069dc

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>

080012e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f8f9 	bl	80014e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f0:	200f      	movs	r0, #15
 80012f2:	f7ff fbfd 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fb77 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	2000016c 	.word	0x2000016c

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000016c 	.word	0x2000016c

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <__NVIC_SetPriorityGrouping>:
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	05fa0000 	.word	0x05fa0000

080013d0 <__NVIC_GetPriorityGrouping>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff4c 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150a:	f7ff ff61 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800150e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f7ff ffb1 	bl	800147c <NVIC_EncodePriority>
 800151a:	4602      	mov	r2, r0
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff80 	bl	8001428 <__NVIC_SetPriority>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff54 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800155c:	4ba0      	ldr	r3, [pc, #640]	; (80017e0 <HAL_ETH_Init+0x294>)
 800155e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e180      	b.n	8001874 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f003 fbb8 	bl	8004cfc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158c:	4b95      	ldr	r3, [pc, #596]	; (80017e4 <HAL_ETH_Init+0x298>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_ETH_Init+0x298>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6453      	str	r3, [r2, #68]	; 0x44
 8001598:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <HAL_ETH_Init+0x298>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015a4:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <HAL_ETH_Init+0x29c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a8f      	ldr	r2, [pc, #572]	; (80017e8 <HAL_ETH_Init+0x29c>)
 80015aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015b0:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <HAL_ETH_Init+0x29c>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	498b      	ldr	r1, [pc, #556]	; (80017e8 <HAL_ETH_Init+0x29c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015d6:	f7ff fea7 	bl	8001328 <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015dc:	e011      	b.n	8001602 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015de:	f7ff fea3 	bl	8001328 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ec:	d909      	bls.n	8001602 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e138      	b.n	8001874 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e4      	bne.n	80015de <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f023 031c 	bic.w	r3, r3, #28
 8001622:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001624:	f001 ff48 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8001628:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4a6f      	ldr	r2, [pc, #444]	; (80017ec <HAL_ETH_Init+0x2a0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d908      	bls.n	8001644 <HAL_ETH_Init+0xf8>
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_ETH_Init+0x2a4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d804      	bhi.n	8001644 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e027      	b.n	8001694 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4a6a      	ldr	r2, [pc, #424]	; (80017f0 <HAL_ETH_Init+0x2a4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d908      	bls.n	800165e <HAL_ETH_Init+0x112>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4a64      	ldr	r2, [pc, #400]	; (80017e0 <HAL_ETH_Init+0x294>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d204      	bcs.n	800165e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f043 030c 	orr.w	r3, r3, #12
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e01a      	b.n	8001694 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_ETH_Init+0x294>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d303      	bcc.n	800166e <HAL_ETH_Init+0x122>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4a62      	ldr	r2, [pc, #392]	; (80017f4 <HAL_ETH_Init+0x2a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d911      	bls.n	8001692 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_ETH_Init+0x2a8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d908      	bls.n	8001688 <HAL_ETH_Init+0x13c>
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4a5f      	ldr	r2, [pc, #380]	; (80017f8 <HAL_ETH_Init+0x2ac>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d804      	bhi.n	8001688 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e005      	b.n	8001694 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	e000      	b.n	8001694 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001692:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800169c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a0:	2100      	movs	r1, #0
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fb94 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016b2:	6939      	ldr	r1, [r7, #16]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fd49 	bl	800214c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0d6      	b.n	8001874 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016c6:	20ff      	movs	r0, #255	; 0xff
 80016c8:	f7ff fe3a 	bl	8001340 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a4 	beq.w	800181e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016d6:	f7ff fe27 	bl	8001328 <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	461a      	mov	r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fb0b 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016ea:	f7ff fe1d 	bl	8001328 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d90f      	bls.n	800171c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fd22 	bl	800214c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0ab      	b.n	8001874 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0da      	beq.n	80016dc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fb4f 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fd04 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800174c:	2301      	movs	r3, #1
 800174e:	e091      	b.n	8001874 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fdea 	bl	8001328 <HAL_GetTick>
 8001754:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	461a      	mov	r2, r3
 800175c:	2101      	movs	r1, #1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 face 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001764:	f7ff fde0 	bl	8001328 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d90f      	bls.n	8001796 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fce5 	bl	800214c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e06e      	b.n	8001874 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0da      	beq.n	8001756 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	461a      	mov	r2, r3
 80017a6:	2110      	movs	r1, #16
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 faa9 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fcc6 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017c8:	2301      	movs	r3, #1
 80017ca:	e053      	b.n	8001874 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d012      	beq.n	80017fc <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	e010      	b.n	8001802 <HAL_ETH_Init+0x2b6>
 80017e0:	03938700 	.word	0x03938700
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	01312cff 	.word	0x01312cff
 80017f0:	02160ebf 	.word	0x02160ebf
 80017f4:	05f5e0ff 	.word	0x05f5e0ff
 80017f8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e026      	b.n	8001862 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	e021      	b.n	8001862 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800182e:	4313      	orrs	r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 faca 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fc7f 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00c      	b.n	8001874 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800185a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800185e:	f7ff fd6f 	bl	8001340 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001862:	6939      	ldr	r1, [r7, #16]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fc71 	bl	800214c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ETH_DMATxDescListInit+0x20>
 8001898:	2302      	movs	r3, #2
 800189a:	e051      	b.n	8001940 <HAL_ETH_DMATxDescListInit+0xc4>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e030      	b.n	800191a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d208      	bcs.n	800190e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	461a      	mov	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e002      	b.n	8001914 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3ca      	bcc.n	80018b8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800192c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ETH_DMARxDescListInit+0x20>
 8001968:	2302      	movs	r3, #2
 800196a:	e055      	b.n	8001a18 <HAL_ETH_DMARxDescListInit+0xcc>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e034      	b.n	80019f2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019a0:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d105      	bne.n	80019ca <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d208      	bcs.n	80019e6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	015b      	lsls	r3, r3, #5
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	4413      	add	r3, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	e002      	b.n	80019ec <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3c6      	bcc.n	8001988 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a04:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ETH_TransmitFrame+0x24>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0cc      	b.n	8001be2 <HAL_ETH_TransmitFrame+0x1be>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0b7      	b.n	8001be2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da09      	bge.n	8001a90 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2212      	movs	r2, #18
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0a8      	b.n	8001be2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d915      	bls.n	8001ac6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e001      	b.n	8001aca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11c      	bne.n	8001b0a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ade:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b08:	e04b      	b.n	8001ba2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e044      	b.n	8001b9a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b1e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b34:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b3e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d116      	bne.n	8001b78 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b58:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b5e:	fb03 f202 	mul.w	r2, r3, r2
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b6a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b76:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b86:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3b6      	bcc.n	8001b10 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	ac02b00b 	.word	0xac02b00b
 8001bf4:	fffffa0c 	.word	0xfffffa0c

08001bf8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ETH_GetReceivedFrame+0x1a>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e070      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db5a      	blt.n	8001ce2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d030      	beq.n	8001c9c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d103      	bne.n	8001c54 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e02b      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cca:	e00a      	b.n	8001ce2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b82      	cmp	r3, #130	; 0x82
 8001d20:	d101      	bne.n	8001d26 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	e050      	b.n	8001dc8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2282      	movs	r2, #130	; 0x82
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 031c 	and.w	r3, r3, #28
 8001d3c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8a1b      	ldrh	r3, [r3, #16]
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	019b      	lsls	r3, r3, #6
 8001d50:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f023 0302 	bic.w	r3, r3, #2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d72:	f7ff fad9 	bl	8001328 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d78:	e015      	b.n	8001da6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d7a:	f7ff fad5 	bl	8001328 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d309      	bcc.n	8001d9e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e014      	b.n	8001dc8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e4      	bne.n	8001d7a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b42      	cmp	r3, #66	; 0x42
 8001df0:	d101      	bne.n	8001df6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e04e      	b.n	8001e94 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2242      	movs	r2, #66	; 0x42
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 031c 	and.w	r3, r3, #28
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8a1b      	ldrh	r3, [r3, #16]
 8001e12:	02db      	lsls	r3, r3, #11
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e1c:	897b      	ldrh	r3, [r7, #10]
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4c:	f7ff fa6c 	bl	8001328 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e52:	e015      	b.n	8001e80 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e54:	f7ff fa68 	bl	8001328 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d309      	bcc.n	8001e78 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e00d      	b.n	8001e94 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e4      	bne.n	8001e54 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_Start+0x16>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e01f      	b.n	8001ef2 <HAL_ETH_Start+0x56>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb40 	bl	8002548 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fb77 	bl	80025bc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fc06 	bl	80026e0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fbab 	bl	8002630 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fbd4 	bl	8002688 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ETH_Stop+0x16>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e01f      	b.n	8001f50 <HAL_ETH_Stop+0x56>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb9b 	bl	800265c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fbc4 	bl	80026b4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb62 	bl	80025f6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fbd4 	bl	80026e0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb22 	bl	8002582 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_ETH_ConfigMAC+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0e4      	b.n	800213e <HAL_ETH_ConfigMAC+0x1e6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b1 	beq.w	80020ee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fa4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001faa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001fb0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001fb6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001fbc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001fc2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fc8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001fce:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fd4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fda:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fe0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fe6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff f99e 	bl	8001340 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002014:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800201a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002020:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002026:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800202c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002032:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800203e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002040:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff f978 	bl	8001340 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002060:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f64f 7341 	movw	r3, #65345	; 0xff41
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002088:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800208e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002094:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800209a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020a0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff f941 	bl	8001340 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff f92e 	bl	8001340 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	e01e      	b.n	800212c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020fc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff f90e 	bl	8001340 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	ff20810f 	.word	0xff20810f

0800214c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0b0      	sub	sp, #192	; 0xc0
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002168:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002170:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800217a:	2300      	movs	r3, #0
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002196:	663b      	str	r3, [r7, #96]	; 0x60
 8002198:	e001      	b.n	800219e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800219e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021a8:	2300      	movs	r3, #0
 80021aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002220:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002224:	4ba9      	ldr	r3, [pc, #676]	; (80024cc <ETH_MACDMAConfig+0x380>)
 8002226:	4013      	ands	r3, r2
 8002228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800222c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002230:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002234:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002238:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800223e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002242:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002246:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800224c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800224e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002250:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002254:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002258:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800225c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800225e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002260:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002274:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff f85d 	bl	8001340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002290:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002294:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002298:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800229a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800229e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff f838 	bl	8001340 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002300:	4013      	ands	r3, r2
 8002302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800230c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002310:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002316:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800231c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800231e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002322:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002328:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800232a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fff9 	bl	8001340 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002356:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002358:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800235c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe ffe4 	bl	8001340 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002394:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023a6:	2304      	movs	r3, #4
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <ETH_MACDMAConfig+0x384>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023e8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023ea:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ec:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023ee:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023f0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023f2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023f4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023f6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023f8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023fa:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023fc:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023fe:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002400:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002404:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002408:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800240a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241c:	461a      	mov	r2, r3
 800241e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002422:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002432:	2001      	movs	r0, #1
 8002434:	f7fe ff84 	bl	8001340 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	461a      	mov	r2, r3
 8002442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002446:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800244c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002450:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002454:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002458:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800245a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800245e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002462:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800246c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002470:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe ff5d 	bl	8001340 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248e:	461a      	mov	r2, r3
 8002490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002494:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10b      	bne.n	80024b6 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	69d9      	ldr	r1, [r3, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <ETH_MACDMAConfig+0x388>)
 80024ae:	430b      	orrs	r3, r1
 80024b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	461a      	mov	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f80a 	bl	80024d8 <ETH_MACAddressConfig>
}
 80024c4:	bf00      	nop
 80024c6:	37c0      	adds	r7, #192	; 0xc0
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	ff20810f 	.word	0xff20810f
 80024d0:	f8de3f23 	.word	0xf8de3f23
 80024d4:	00010040 	.word	0x00010040

080024d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3305      	adds	r3, #5
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	3204      	adds	r2, #4
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <ETH_MACAddressConfig+0x68>)
 80024fa:	4413      	add	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3303      	adds	r3, #3
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	061a      	lsls	r2, r3, #24
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4313      	orrs	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <ETH_MACAddressConfig+0x6c>)
 800252a:	4413      	add	r3, r2
 800252c:	461a      	mov	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	6013      	str	r3, [r2, #0]
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40028040 	.word	0x40028040
 8002544:	40028044 	.word	0x40028044

08002548 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0208 	orr.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe fee7 	bl	8001340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7fe feca 	bl	8001340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0204 	orr.w	r2, r2, #4
 80025d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fe fead 	bl	8001340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0204 	bic.w	r2, r2, #4
 8002610:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261a:	2001      	movs	r0, #1
 800261c:	f7fe fe90 	bl	8001340 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800264a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264e:	6193      	str	r3, [r2, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800267a:	6193      	str	r3, [r2, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026a6:	6193      	str	r3, [r2, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	f023 0302 	bic.w	r3, r3, #2
 80026ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d2:	6193      	str	r3, [r2, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002702:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002710:	2001      	movs	r0, #1
 8002712:	f7fe fe15 	bl	8001340 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002720:	6193      	str	r3, [r2, #24]
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e175      	b.n	8002a38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8164 	bne.w	8002a32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x56>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80be 	beq.w	8002a32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <HAL_GPIO_Init+0x324>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a65      	ldr	r2, [pc, #404]	; (8002a50 <HAL_GPIO_Init+0x324>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_GPIO_Init+0x324>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <HAL_GPIO_Init+0x328>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_GPIO_Init+0x32c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d037      	beq.n	800296a <HAL_GPIO_Init+0x23e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_GPIO_Init+0x330>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d031      	beq.n	8002966 <HAL_GPIO_Init+0x23a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02b      	beq.n	8002962 <HAL_GPIO_Init+0x236>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a55      	ldr	r2, [pc, #340]	; (8002a64 <HAL_GPIO_Init+0x338>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d025      	beq.n	800295e <HAL_GPIO_Init+0x232>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_GPIO_Init+0x33c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <HAL_GPIO_Init+0x22e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a53      	ldr	r2, [pc, #332]	; (8002a6c <HAL_GPIO_Init+0x340>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x22a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_GPIO_Init+0x344>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x226>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_GPIO_Init+0x348>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x222>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a50      	ldr	r2, [pc, #320]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x21e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4f      	ldr	r2, [pc, #316]	; (8002a7c <HAL_GPIO_Init+0x350>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x21a>
 8002942:	2309      	movs	r3, #9
 8002944:	e012      	b.n	800296c <HAL_GPIO_Init+0x240>
 8002946:	230a      	movs	r3, #10
 8002948:	e010      	b.n	800296c <HAL_GPIO_Init+0x240>
 800294a:	2308      	movs	r3, #8
 800294c:	e00e      	b.n	800296c <HAL_GPIO_Init+0x240>
 800294e:	2307      	movs	r3, #7
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x240>
 8002952:	2306      	movs	r3, #6
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x240>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x240>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x240>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x240>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x240>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x240>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x328>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_GPIO_Init+0x354>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_GPIO_Init+0x354>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_GPIO_Init+0x354>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <HAL_GPIO_Init+0x354>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_GPIO_Init+0x354>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_GPIO_Init+0x354>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_GPIO_Init+0x354>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_GPIO_Init+0x354>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae86 	bls.w	800274c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40021400 	.word	0x40021400
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40021c00 	.word	0x40021c00
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40022400 	.word	0x40022400
 8002a80:	40013c00 	.word	0x40013c00

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002aa0:	e003      	b.n	8002aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b06:	f7fe fc0f 	bl	8001328 <HAL_GetTick>
 8002b0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b0c:	e009      	b.n	8002b22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b0e:	f7fe fc0b 	bl	8001328 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1c:	d901      	bls.n	8002b22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e022      	b.n	8002b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b3c:	f7fe fbf4 	bl	8001328 <HAL_GetTick>
 8002b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b42:	e009      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b44:	f7fe fbf0 	bl	8001328 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b52:	d901      	bls.n	8002b58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e007      	b.n	8002b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b64:	d1ee      	bne.n	8002b44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e29b      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8087 	beq.w	8002caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9c:	4b96      	ldr	r3, [pc, #600]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba8:	4b93      	ldr	r3, [pc, #588]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d112      	bne.n	8002bda <HAL_RCC_OscConfig+0x62>
 8002bb4:	4b90      	ldr	r3, [pc, #576]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x130>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d168      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e275      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x7a>
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x9c>
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b7c      	ldr	r3, [pc, #496]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7b      	ldr	r2, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b73      	ldr	r3, [pc, #460]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a72      	ldr	r2, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xd8>
 8002c38:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6b      	ldr	r2, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fb66 	bl	8001328 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fb62 	bl	8001328 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e229      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe8>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fb52 	bl	8001328 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fb4e 	bl	8001328 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e215      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x110>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d069      	beq.n	8002d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb6:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x190>
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1e9      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	493d      	ldr	r1, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e040      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fb04 	bl	8001328 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe fb00 	bl	8001328 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1c7      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4929      	ldr	r1, [pc, #164]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
 8002d56:	e018      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fae0 	bl	8001328 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fadc 	bl	8001328 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1a3      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d038      	beq.n	8002e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fabd 	bl	8001328 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe fab9 	bl	8001328 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e180      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x23a>
 8002dd0:	e01a      	b.n	8002e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe faa3 	bl	8001328 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe fa9f 	bl	8001328 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d903      	bls.n	8002dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e166      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
 8002df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b92      	ldr	r3, [pc, #584]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a4 	beq.w	8002f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a88      	ldr	r2, [pc, #544]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b86      	ldr	r3, [pc, #536]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e4a:	4b80      	ldr	r3, [pc, #512]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7f      	ldr	r2, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7fe fa67 	bl	8001328 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe fa63 	bl	8001328 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b64      	cmp	r3, #100	; 0x64
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e12a      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x4d4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x31a>
 8002e84:	4b70      	ldr	r3, [pc, #448]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a6f      	ldr	r2, [pc, #444]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e02d      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x33c>
 8002e9a:	4b6b      	ldr	r3, [pc, #428]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a6a      	ldr	r2, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e01c      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x35e>
 8002ebc:	4b62      	ldr	r3, [pc, #392]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a61      	ldr	r2, [pc, #388]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a5e      	ldr	r2, [pc, #376]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e00b      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d015      	beq.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fa17 	bl	8001328 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fa13 	bl	8001328 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0d8      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCC_OscConfig+0x386>
 8002f20:	e014      	b.n	8002f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe fa01 	bl	8001328 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f9fd 	bl	8001328 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0c2      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ee      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80ae 	beq.w	80030c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	4b37      	ldr	r3, [pc, #220]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d06d      	beq.n	8003050 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d14b      	bne.n	8003014 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe f9ce 	bl	8001328 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f9ca 	bl	8001328 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e091      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	491b      	ldr	r1, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f99c 	bl	8001328 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe f998 	bl	8001328 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e05f      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
 8003012:	e057      	b.n	80030c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 800301a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe f982 	bl	8001328 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe f97e 	bl	8001328 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e045      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_OscConfig+0x4d0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x4b0>
 8003046:	e03d      	b.n	80030c4 <HAL_RCC_OscConfig+0x54c>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003050:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_RCC_OscConfig+0x558>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d030      	beq.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d129      	bne.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d122      	bne.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003088:	4293      	cmp	r3, r2
 800308a:	d119      	bne.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d10f      	bne.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0d0      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 020f 	bic.w	r2, r3, #15
 8003102:	4965      	ldr	r1, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d040      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e073      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06b      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4936      	ldr	r1, [pc, #216]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fe f8ae 	bl	8001328 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f8aa 	bl	8001328 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e053      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d210      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 020f 	bic.w	r2, r3, #15
 800320e:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f821 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fc32 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	08015e88 	.word	0x08015e88
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b094      	sub	sp, #80	; 0x50
 80032b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	647b      	str	r3, [r7, #68]	; 0x44
 80032b8:	2300      	movs	r3, #0
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032bc:	2300      	movs	r3, #0
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c4:	4b79      	ldr	r3, [pc, #484]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d00d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x40>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	f200 80e1 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032de:	e0db      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e4:	e0db      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ea:	e0d8      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f6:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	2200      	movs	r2, #0
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
 800330c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003330:	0150      	lsls	r0, r2, #5
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4621      	mov	r1, r4
 8003338:	1a51      	subs	r1, r2, r1
 800333a:	6139      	str	r1, [r7, #16]
 800333c:	4629      	mov	r1, r5
 800333e:	eb63 0301 	sbc.w	r3, r3, r1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003350:	4659      	mov	r1, fp
 8003352:	018b      	lsls	r3, r1, #6
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800335a:	4651      	mov	r1, sl
 800335c:	018a      	lsls	r2, r1, #6
 800335e:	4651      	mov	r1, sl
 8003360:	ebb2 0801 	subs.w	r8, r2, r1
 8003364:	4659      	mov	r1, fp
 8003366:	eb63 0901 	sbc.w	r9, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337e:	4690      	mov	r8, r2
 8003380:	4699      	mov	r9, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb18 0303 	adds.w	r3, r8, r3
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	462b      	mov	r3, r5
 800338c:	eb49 0303 	adc.w	r3, r9, r3
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339e:	4629      	mov	r1, r5
 80033a0:	024b      	lsls	r3, r1, #9
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a8:	4621      	mov	r1, r4
 80033aa:	024a      	lsls	r2, r1, #9
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033bc:	f7fc ff98 	bl	80002f0 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	e058      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	2200      	movs	r2, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	4611      	mov	r1, r2
 80033d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	f04f 0000 	mov.w	r0, #0
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	0159      	lsls	r1, r3, #5
 80033f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f6:	0150      	lsls	r0, r2, #5
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4641      	mov	r1, r8
 80033fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb63 0b01 	sbc.w	fp, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800341c:	ebb2 040a 	subs.w	r4, r2, sl
 8003420:	eb63 050b 	sbc.w	r5, r3, fp
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	00eb      	lsls	r3, r5, #3
 800342e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003432:	00e2      	lsls	r2, r4, #3
 8003434:	4614      	mov	r4, r2
 8003436:	461d      	mov	r5, r3
 8003438:	4643      	mov	r3, r8
 800343a:	18e3      	adds	r3, r4, r3
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	464b      	mov	r3, r9
 8003440:	eb45 0303 	adc.w	r3, r5, r3
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003452:	4629      	mov	r1, r5
 8003454:	028b      	lsls	r3, r1, #10
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345c:	4621      	mov	r1, r4
 800345e:	028a      	lsls	r2, r1, #10
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	61fa      	str	r2, [r7, #28]
 800346c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003470:	f7fc ff3e 	bl	80002f0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0x200>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800348c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3750      	adds	r7, #80	; 0x50
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08015e98 	.word	0x08015e98

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08015e98 	.word	0x08015e98

08003520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	220f      	movs	r2, #15
 800352e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCC_GetClockConfig+0x60>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40023c00 	.word	0x40023c00

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a68      	ldr	r2, [pc, #416]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	4b66      	ldr	r3, [pc, #408]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	4964      	ldr	r1, [pc, #400]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	4959      	ldr	r1, [pc, #356]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	494a      	ldr	r1, [pc, #296]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d101      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 808b 	beq.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a39      	ldr	r2, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a34      	ldr	r2, [pc, #208]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fe4c 	bl	8001328 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fd fe48 	bl	8001328 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e38f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d035      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d02e      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d114      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fe10 	bl	8001328 <HAL_GetTick>
 8003708:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fd fe0c 	bl	8001328 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e351      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ee      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373a:	d111      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800374a:	400b      	ands	r3, r1
 800374c:	4901      	ldr	r1, [pc, #4]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
 8003752:	e00b      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	0ffffcff 	.word	0x0ffffcff
 8003760:	4bac      	ldr	r3, [pc, #688]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4aab      	ldr	r2, [pc, #684]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	4ba9      	ldr	r3, [pc, #676]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	49a6      	ldr	r1, [pc, #664]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	4313      	orrs	r3, r2
 800377c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800378a:	4ba2      	ldr	r3, [pc, #648]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003790:	4aa0      	ldr	r2, [pc, #640]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800379a:	4b9e      	ldr	r3, [pc, #632]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	499b      	ldr	r1, [pc, #620]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b8:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c6:	4993      	ldr	r1, [pc, #588]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037da:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e8:	498a      	ldr	r1, [pc, #552]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fc:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	4982      	ldr	r1, [pc, #520]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800381e:	4b7d      	ldr	r3, [pc, #500]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4979      	ldr	r1, [pc, #484]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003840:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4971      	ldr	r1, [pc, #452]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f023 020c 	bic.w	r2, r3, #12
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	4968      	ldr	r1, [pc, #416]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003884:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	4960      	ldr	r1, [pc, #384]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	4957      	ldr	r1, [pc, #348]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ea:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4946      	ldr	r1, [pc, #280]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	493e      	ldr	r1, [pc, #248]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	4935      	ldr	r1, [pc, #212]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003950:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395e:	492d      	ldr	r1, [pc, #180]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d011      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	4924      	ldr	r1, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	4914      	ldr	r1, [pc, #80]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e4:	490b      	ldr	r1, [pc, #44]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00f      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	4902      	ldr	r1, [pc, #8]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a24:	4b8a      	ldr	r3, [pc, #552]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	4986      	ldr	r1, [pc, #536]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a48:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	497d      	ldr	r1, [pc, #500]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d006      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80d6 	beq.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a74:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fd fc52 	bl	8001328 <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a88:	f7fd fc4e 	bl	8001328 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e195      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d021      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11d      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aba:	4b65      	ldr	r3, [pc, #404]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0e1b      	lsrs	r3, r3, #24
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	4958      	ldr	r1, [pc, #352]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02e      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b20:	d129      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b22:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b30:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	0f1b      	lsrs	r3, r3, #28
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	019a      	lsls	r2, r3, #6
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	493e      	ldr	r1, [pc, #248]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b64:	f023 021f 	bic.w	r2, r3, #31
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	4938      	ldr	r1, [pc, #224]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01d      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b82:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b90:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	0f1b      	lsrs	r3, r3, #28
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	019a      	lsls	r2, r3, #6
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	4926      	ldr	r1, [pc, #152]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	019a      	lsls	r2, r3, #6
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	491a      	ldr	r1, [pc, #104]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fb95 	bl	8001328 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c02:	f7fd fb91 	bl	8001328 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	; 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0d8      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f040 80ce 	bne.w	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c34:	f7fd fb78 	bl	8001328 <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c3c:	f7fd fb74 	bl	8001328 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d904      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0bb      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c60:	d0ec      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c98:	4b4d      	ldr	r3, [pc, #308]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	0f1b      	lsrs	r3, r3, #28
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	019a      	lsls	r2, r3, #6
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	4944      	ldr	r1, [pc, #272]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	493d      	ldr	r1, [pc, #244]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf4:	d11d      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d04:	4b32      	ldr	r3, [pc, #200]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	0f1b      	lsrs	r3, r3, #28
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	019a      	lsls	r2, r3, #6
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	0e1b      	lsrs	r3, r3, #24
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	019a      	lsls	r2, r3, #6
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4911      	ldr	r1, [pc, #68]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd fac4 	bl	8001328 <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da4:	f7fd fac0 	bl	8001328 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e007      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d1ef      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e049      	b.n	8003e7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f841 	bl	8003e82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fa00 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d001      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e054      	b.n	8003f5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d022      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d01d      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_TIM_Base_Start_IT+0xe4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x80>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d115      	bne.n	8003f44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_TIM_Base_Start_IT+0xec>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d015      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0xbe>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d011      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	e008      	b.n	8003f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800
 8003f84:	00010007 	.word	0x00010007

08003f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0202 	mvn.w	r2, #2
 8003fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f905 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8f7 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f908 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d122      	bne.n	8004038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0204 	mvn.w	r2, #4
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8db 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8cd 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8de 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b08      	cmp	r3, #8
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0208 	mvn.w	r2, #8
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2204      	movs	r2, #4
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8b1 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8a3 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8b4 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0210 	mvn.w	r2, #16
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2208      	movs	r2, #8
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f887 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f879 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f88a 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0201 	mvn.w	r2, #1
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fc56 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b80      	cmp	r3, #128	; 0x80
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f91a 	bl	800436c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d10e      	bne.n	8004166 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d107      	bne.n	8004166 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800415e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f90d 	bl	8004380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d10e      	bne.n	8004192 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d107      	bne.n	8004192 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f838 	bl	8004202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b20      	cmp	r3, #32
 800419e:	d10e      	bne.n	80041be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d107      	bne.n	80041be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0220 	mvn.w	r2, #32
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8cd 	bl	8004358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <TIM_Base_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d00f      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00b      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3a      	ldr	r2, [pc, #232]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <TIM_Base_SetConfig+0x114>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d027      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d023      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a29      	ldr	r2, [pc, #164]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d017      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a28      	ldr	r2, [pc, #160]	; (8004340 <TIM_Base_SetConfig+0x128>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a27      	ldr	r2, [pc, #156]	; (8004344 <TIM_Base_SetConfig+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a26      	ldr	r2, [pc, #152]	; (8004348 <TIM_Base_SetConfig+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <TIM_Base_SetConfig+0x134>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <TIM_Base_SetConfig+0x138>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <TIM_Base_SetConfig+0x13c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <TIM_Base_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0xf8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d103      	bne.n	8004318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	615a      	str	r2, [r3, #20]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40010400 	.word	0x40010400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800
 800434c:	40001800 	.word	0x40001800
 8004350:	40001c00 	.word	0x40001c00
 8004354:	40002000 	.word	0x40002000

08004358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e040      	b.n	8004428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fb3a 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f82c 	bl	8004430 <UART_SetConfig>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e022      	b.n	8004428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa84 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb0b 	bl	8004a3c <UART_CheckIdleState>
 8004426:	4603      	mov	r3, r0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4ba6      	ldr	r3, [pc, #664]	; (80046f4 <UART_SetConfig+0x2c4>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	430b      	orrs	r3, r1
 8004466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a94      	ldr	r2, [pc, #592]	; (80046f8 <UART_SetConfig+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d120      	bne.n	80044ee <UART_SetConfig+0xbe>
 80044ac:	4b93      	ldr	r3, [pc, #588]	; (80046fc <UART_SetConfig+0x2cc>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d816      	bhi.n	80044e8 <UART_SetConfig+0xb8>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x90>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044d7 	.word	0x080044d7
 80044cc:	080044e3 	.word	0x080044e3
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e150      	b.n	8004778 <UART_SetConfig+0x348>
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e14d      	b.n	8004778 <UART_SetConfig+0x348>
 80044dc:	2304      	movs	r3, #4
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e14a      	b.n	8004778 <UART_SetConfig+0x348>
 80044e2:	2308      	movs	r3, #8
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e147      	b.n	8004778 <UART_SetConfig+0x348>
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e144      	b.n	8004778 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a83      	ldr	r2, [pc, #524]	; (8004700 <UART_SetConfig+0x2d0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d132      	bne.n	800455e <UART_SetConfig+0x12e>
 80044f8:	4b80      	ldr	r3, [pc, #512]	; (80046fc <UART_SetConfig+0x2cc>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d828      	bhi.n	8004558 <UART_SetConfig+0x128>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xdc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004541 	.word	0x08004541
 8004510:	08004559 	.word	0x08004559
 8004514:	08004559 	.word	0x08004559
 8004518:	08004559 	.word	0x08004559
 800451c:	0800454d 	.word	0x0800454d
 8004520:	08004559 	.word	0x08004559
 8004524:	08004559 	.word	0x08004559
 8004528:	08004559 	.word	0x08004559
 800452c:	08004547 	.word	0x08004547
 8004530:	08004559 	.word	0x08004559
 8004534:	08004559 	.word	0x08004559
 8004538:	08004559 	.word	0x08004559
 800453c:	08004553 	.word	0x08004553
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e118      	b.n	8004778 <UART_SetConfig+0x348>
 8004546:	2302      	movs	r3, #2
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e115      	b.n	8004778 <UART_SetConfig+0x348>
 800454c:	2304      	movs	r3, #4
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e112      	b.n	8004778 <UART_SetConfig+0x348>
 8004552:	2308      	movs	r3, #8
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e10f      	b.n	8004778 <UART_SetConfig+0x348>
 8004558:	2310      	movs	r3, #16
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e10c      	b.n	8004778 <UART_SetConfig+0x348>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a68      	ldr	r2, [pc, #416]	; (8004704 <UART_SetConfig+0x2d4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d120      	bne.n	80045aa <UART_SetConfig+0x17a>
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <UART_SetConfig+0x2cc>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004572:	2b30      	cmp	r3, #48	; 0x30
 8004574:	d013      	beq.n	800459e <UART_SetConfig+0x16e>
 8004576:	2b30      	cmp	r3, #48	; 0x30
 8004578:	d814      	bhi.n	80045a4 <UART_SetConfig+0x174>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d009      	beq.n	8004592 <UART_SetConfig+0x162>
 800457e:	2b20      	cmp	r3, #32
 8004580:	d810      	bhi.n	80045a4 <UART_SetConfig+0x174>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <UART_SetConfig+0x15c>
 8004586:	2b10      	cmp	r3, #16
 8004588:	d006      	beq.n	8004598 <UART_SetConfig+0x168>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x174>
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e0f2      	b.n	8004778 <UART_SetConfig+0x348>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e0ef      	b.n	8004778 <UART_SetConfig+0x348>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e0ec      	b.n	8004778 <UART_SetConfig+0x348>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e0e9      	b.n	8004778 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e0e6      	b.n	8004778 <UART_SetConfig+0x348>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a56      	ldr	r2, [pc, #344]	; (8004708 <UART_SetConfig+0x2d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0x1c6>
 80045b4:	4b51      	ldr	r3, [pc, #324]	; (80046fc <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045be:	2bc0      	cmp	r3, #192	; 0xc0
 80045c0:	d013      	beq.n	80045ea <UART_SetConfig+0x1ba>
 80045c2:	2bc0      	cmp	r3, #192	; 0xc0
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x1ae>
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d810      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x1a8>
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x1b4>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x1c0>
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0cc      	b.n	8004778 <UART_SetConfig+0x348>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0c9      	b.n	8004778 <UART_SetConfig+0x348>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0c6      	b.n	8004778 <UART_SetConfig+0x348>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0c3      	b.n	8004778 <UART_SetConfig+0x348>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0c0      	b.n	8004778 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a44      	ldr	r2, [pc, #272]	; (800470c <UART_SetConfig+0x2dc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x21c>
 8004600:	4b3e      	ldr	r3, [pc, #248]	; (80046fc <UART_SetConfig+0x2cc>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x210>
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x204>
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x1fe>
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x20a>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x216>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0a1      	b.n	8004778 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e09e      	b.n	8004778 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e09b      	b.n	8004778 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e098      	b.n	8004778 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e095      	b.n	8004778 <UART_SetConfig+0x348>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <UART_SetConfig+0x2e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d125      	bne.n	80046a2 <UART_SetConfig+0x272>
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004664:	d017      	beq.n	8004696 <UART_SetConfig+0x266>
 8004666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466a:	d817      	bhi.n	800469c <UART_SetConfig+0x26c>
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d00b      	beq.n	800468a <UART_SetConfig+0x25a>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d811      	bhi.n	800469c <UART_SetConfig+0x26c>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <UART_SetConfig+0x254>
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x260>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x26c>
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e076      	b.n	8004778 <UART_SetConfig+0x348>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e073      	b.n	8004778 <UART_SetConfig+0x348>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e070      	b.n	8004778 <UART_SetConfig+0x348>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e06d      	b.n	8004778 <UART_SetConfig+0x348>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e06a      	b.n	8004778 <UART_SetConfig+0x348>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <UART_SetConfig+0x2e4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d138      	bne.n	800471e <UART_SetConfig+0x2ee>
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ba:	d017      	beq.n	80046ec <UART_SetConfig+0x2bc>
 80046bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046c0:	d82a      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d00b      	beq.n	80046e0 <UART_SetConfig+0x2b0>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d824      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <UART_SetConfig+0x2aa>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d006      	beq.n	80046e6 <UART_SetConfig+0x2b6>
 80046d8:	e01e      	b.n	8004718 <UART_SetConfig+0x2e8>
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e04b      	b.n	8004778 <UART_SetConfig+0x348>
 80046e0:	2302      	movs	r3, #2
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e048      	b.n	8004778 <UART_SetConfig+0x348>
 80046e6:	2304      	movs	r3, #4
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e045      	b.n	8004778 <UART_SetConfig+0x348>
 80046ec:	2308      	movs	r3, #8
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e042      	b.n	8004778 <UART_SetConfig+0x348>
 80046f2:	bf00      	nop
 80046f4:	efff69f3 	.word	0xefff69f3
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40023800 	.word	0x40023800
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	40011400 	.word	0x40011400
 8004714:	40007800 	.word	0x40007800
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e02c      	b.n	8004778 <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a72      	ldr	r2, [pc, #456]	; (80048ec <UART_SetConfig+0x4bc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <UART_SetConfig+0x344>
 8004728:	4b71      	ldr	r3, [pc, #452]	; (80048f0 <UART_SetConfig+0x4c0>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004732:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004736:	d017      	beq.n	8004768 <UART_SetConfig+0x338>
 8004738:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800473c:	d817      	bhi.n	800476e <UART_SetConfig+0x33e>
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004742:	d00b      	beq.n	800475c <UART_SetConfig+0x32c>
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004748:	d811      	bhi.n	800476e <UART_SetConfig+0x33e>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <UART_SetConfig+0x326>
 800474e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004752:	d006      	beq.n	8004762 <UART_SetConfig+0x332>
 8004754:	e00b      	b.n	800476e <UART_SetConfig+0x33e>
 8004756:	2300      	movs	r3, #0
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e00d      	b.n	8004778 <UART_SetConfig+0x348>
 800475c:	2302      	movs	r3, #2
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e00a      	b.n	8004778 <UART_SetConfig+0x348>
 8004762:	2304      	movs	r3, #4
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e007      	b.n	8004778 <UART_SetConfig+0x348>
 8004768:	2308      	movs	r3, #8
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e004      	b.n	8004778 <UART_SetConfig+0x348>
 800476e:	2310      	movs	r3, #16
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e001      	b.n	8004778 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004780:	d15b      	bne.n	800483a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004782:	7ffb      	ldrb	r3, [r7, #31]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d828      	bhi.n	80047da <UART_SetConfig+0x3aa>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x360>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
 80047b0:	080047d3 	.word	0x080047d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fe8c 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61b8      	str	r0, [r7, #24]
        break;
 80047ba:	e013      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fe fe9c 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 80047c0:	61b8      	str	r0, [r7, #24]
        break;
 80047c2:	e00f      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <UART_SetConfig+0x4c4>)
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e00c      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fe fd6f 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80047ce:	61b8      	str	r0, [r7, #24]
        break;
 80047d0:	e008      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e004      	b.n	80047e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	77bb      	strb	r3, [r7, #30]
        break;
 80047e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d074      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d916      	bls.n	8004834 <UART_SetConfig+0x404>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d212      	bcs.n	8004834 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	b29a      	uxth	r2, r3
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	4313      	orrs	r3, r2
 8004828:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	89fa      	ldrh	r2, [r7, #14]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e04f      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	77bb      	strb	r3, [r7, #30]
 8004838:	e04c      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d828      	bhi.n	8004892 <UART_SetConfig+0x462>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0x418>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	08004893 	.word	0x08004893
 8004858:	08004883 	.word	0x08004883
 800485c:	08004893 	.word	0x08004893
 8004860:	08004893 	.word	0x08004893
 8004864:	08004893 	.word	0x08004893
 8004868:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fe fe30 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8004870:	61b8      	str	r0, [r7, #24]
        break;
 8004872:	e013      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fe fe40 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004878:	61b8      	str	r0, [r7, #24]
        break;
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <UART_SetConfig+0x4c4>)
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e00c      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fe fd13 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8004886:	61b8      	str	r0, [r7, #24]
        break;
 8004888:	e008      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e004      	b.n	800489c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77bb      	strb	r3, [r7, #30]
        break;
 800489a:	bf00      	nop
    }

    if (pclk != 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085a      	lsrs	r2, r3, #1
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	441a      	add	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d909      	bls.n	80048d0 <UART_SetConfig+0x4a0>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d205      	bcs.n	80048d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	e001      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40007c00 	.word	0x40007c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fc6c 	bl	8001328 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10e      	bne.n	8004a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f82d 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e023      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d10e      	bne.n	8004aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f817 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00d      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b09c      	sub	sp, #112	; 0x70
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ade:	e0a5      	b.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	f000 80a1 	beq.w	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc fc1d 	bl	8001328 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
 8004afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13e      	bne.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b52:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e067      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d04f      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9a:	d147      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	613b      	str	r3, [r7, #16]
   return(result);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bf8:	623a      	str	r2, [r7, #32]
 8004bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	69f9      	ldr	r1, [r7, #28]
 8004bfe:	6a3a      	ldr	r2, [r7, #32]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e010      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	f43f af4a 	beq.w	8004ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3770      	adds	r7, #112	; 0x70
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004c5e:	f000 fc0d 	bl	800547c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <MX_LWIP_Init+0x70>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004c68:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <MX_LWIP_Init+0x74>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <MX_LWIP_Init+0x78>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <MX_LWIP_Init+0x7c>)
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <MX_LWIP_Init+0x80>)
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <MX_LWIP_Init+0x78>)
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <MX_LWIP_Init+0x74>)
 8004c84:	4910      	ldr	r1, [pc, #64]	; (8004cc8 <MX_LWIP_Init+0x70>)
 8004c86:	4815      	ldr	r0, [pc, #84]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004c88:	f001 f89e 	bl	8005dc8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c8c:	4813      	ldr	r0, [pc, #76]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004c8e:	f001 fa55 	bl	800613c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004c94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ca4:	480d      	ldr	r0, [pc, #52]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004ca6:	f001 fa59 	bl	800615c <netif_set_up>
 8004caa:	e002      	b.n	8004cb2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004cac:	480b      	ldr	r0, [pc, #44]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004cae:	f001 fac1 	bl	8006234 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004cb2:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <MX_LWIP_Init+0x88>)
 8004cb4:	4809      	ldr	r0, [pc, #36]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004cb6:	f001 faef 	bl	8006298 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004cba:	4808      	ldr	r0, [pc, #32]	; (8004cdc <MX_LWIP_Init+0x84>)
 8004cbc:	f009 fae2 	bl	800e284 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200001a8 	.word	0x200001a8
 8004ccc:	200001ac 	.word	0x200001ac
 8004cd0:	200001b0 	.word	0x200001b0
 8004cd4:	08011d7d 	.word	0x08011d7d
 8004cd8:	080052a9 	.word	0x080052a9
 8004cdc:	20000170 	.word	0x20000170
 8004ce0:	08005315 	.word	0x08005315

08004ce4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004ce8:	4803      	ldr	r0, [pc, #12]	; (8004cf8 <MX_LWIP_Process+0x14>)
 8004cea:	f000 fabd 	bl	8005268 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004cee:	f008 fa4d 	bl	800d18c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000170 	.word	0x20000170

08004cfc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	; 0x38
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a4e      	ldr	r2, [pc, #312]	; (8004e54 <HAL_ETH_MspInit+0x158>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f040 8096 	bne.w	8004e4c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d20:	4b4d      	ldr	r3, [pc, #308]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	4a4c      	ldr	r2, [pc, #304]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4a46      	ldr	r2, [pc, #280]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d42:	6313      	str	r3, [r2, #48]	; 0x30
 8004d44:	4b44      	ldr	r3, [pc, #272]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	4a40      	ldr	r2, [pc, #256]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5c:	4b3e      	ldr	r3, [pc, #248]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	4a3a      	ldr	r2, [pc, #232]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6313      	str	r3, [r2, #48]	; 0x30
 8004d74:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d80:	4b35      	ldr	r3, [pc, #212]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8c:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d98:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	6313      	str	r3, [r2, #48]	; 0x30
 8004da4:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004db0:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	4a28      	ldr	r2, [pc, #160]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dba:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbc:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <HAL_ETH_MspInit+0x15c>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004dc8:	2332      	movs	r3, #50	; 0x32
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dd8:	230b      	movs	r3, #11
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de0:	4619      	mov	r1, r3
 8004de2:	481e      	ldr	r0, [pc, #120]	; (8004e5c <HAL_ETH_MspInit+0x160>)
 8004de4:	f7fd fca2 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004de8:	2386      	movs	r3, #134	; 0x86
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dec:	2302      	movs	r3, #2
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df4:	2303      	movs	r3, #3
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004df8:	230b      	movs	r3, #11
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e00:	4619      	mov	r1, r3
 8004e02:	4817      	ldr	r0, [pc, #92]	; (8004e60 <HAL_ETH_MspInit+0x164>)
 8004e04:	f7fd fc92 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e16:	2303      	movs	r3, #3
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e1a:	230b      	movs	r3, #11
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e22:	4619      	mov	r1, r3
 8004e24:	480f      	ldr	r0, [pc, #60]	; (8004e64 <HAL_ETH_MspInit+0x168>)
 8004e26:	f7fd fc81 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e3c:	230b      	movs	r3, #11
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	4808      	ldr	r0, [pc, #32]	; (8004e68 <HAL_ETH_MspInit+0x16c>)
 8004e48:	f7fd fc70 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3738      	adds	r7, #56	; 0x38
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40028000 	.word	0x40028000
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40020800 	.word	0x40020800
 8004e60:	40020000 	.word	0x40020000
 8004e64:	40020400 	.word	0x40020400
 8004e68:	40021800 	.word	0x40021800

08004e6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e78:	4b4d      	ldr	r3, [pc, #308]	; (8004fb0 <low_level_init+0x144>)
 8004e7a:	4a4e      	ldr	r2, [pc, #312]	; (8004fb4 <low_level_init+0x148>)
 8004e7c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004e7e:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <low_level_init+0x144>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004e84:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <low_level_init+0x144>)
 8004e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e8a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004e8c:	4b48      	ldr	r3, [pc, #288]	; (8004fb0 <low_level_init+0x144>)
 8004e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e92:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004e94:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <low_level_init+0x144>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004ea2:	23e1      	movs	r3, #225	; 0xe1
 8004ea4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004eb2:	4a3f      	ldr	r2, [pc, #252]	; (8004fb0 <low_level_init+0x144>)
 8004eb4:	f107 0308 	add.w	r3, r7, #8
 8004eb8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <low_level_init+0x144>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <low_level_init+0x144>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <low_level_init+0x144>)
 8004ec8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ecc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ece:	4838      	ldr	r0, [pc, #224]	; (8004fb0 <low_level_init+0x144>)
 8004ed0:	f7fc fb3c 	bl	800154c <HAL_ETH_Init>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	4a31      	ldr	r2, [pc, #196]	; (8004fb8 <low_level_init+0x14c>)
 8004ef4:	4931      	ldr	r1, [pc, #196]	; (8004fbc <low_level_init+0x150>)
 8004ef6:	482e      	ldr	r0, [pc, #184]	; (8004fb0 <low_level_init+0x144>)
 8004ef8:	f7fc fcc0 	bl	800187c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004efc:	2304      	movs	r3, #4
 8004efe:	4a30      	ldr	r2, [pc, #192]	; (8004fc0 <low_level_init+0x154>)
 8004f00:	4930      	ldr	r1, [pc, #192]	; (8004fc4 <low_level_init+0x158>)
 8004f02:	482b      	ldr	r0, [pc, #172]	; (8004fb0 <low_level_init+0x144>)
 8004f04:	f7fc fd22 	bl	800194c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2206      	movs	r2, #6
 8004f0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <low_level_init+0x144>)
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <low_level_init+0x144>)
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	785a      	ldrb	r2, [r3, #1]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <low_level_init+0x144>)
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	789a      	ldrb	r2, [r3, #2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f34:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <low_level_init+0x144>)
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	78da      	ldrb	r2, [r3, #3]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <low_level_init+0x144>)
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	791a      	ldrb	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <low_level_init+0x144>)
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	795a      	ldrb	r2, [r3, #5]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f5e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f66:	f043 030a 	orr.w	r3, r3, #10
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004f72:	480f      	ldr	r0, [pc, #60]	; (8004fb0 <low_level_init+0x144>)
 8004f74:	f7fc ff92 	bl	8001e9c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	211d      	movs	r1, #29
 8004f80:	480b      	ldr	r0, [pc, #44]	; (8004fb0 <low_level_init+0x144>)
 8004f82:	f7fc febd 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f043 030b 	orr.w	r3, r3, #11
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	461a      	mov	r2, r3
 8004f92:	211d      	movs	r1, #29
 8004f94:	4806      	ldr	r0, [pc, #24]	; (8004fb0 <low_level_init+0x144>)
 8004f96:	f7fc ff1b 	bl	8001dd0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004f9a:	f107 0310 	add.w	r3, r7, #16
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	211d      	movs	r1, #29
 8004fa2:	4803      	ldr	r0, [pc, #12]	; (8004fb0 <low_level_init+0x144>)
 8004fa4:	f7fc feac 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004fa8:	bf00      	nop
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20003254 	.word	0x20003254
 8004fb4:	40028000 	.word	0x40028000
 8004fb8:	20001a84 	.word	0x20001a84
 8004fbc:	20000234 	.word	0x20000234
 8004fc0:	200002b4 	.word	0x200002b4
 8004fc4:	200001b4 	.word	0x200001b4

08004fc8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <low_level_output+0x138>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <low_level_output+0x138>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	e05a      	b.n	80050b0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da03      	bge.n	800500a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005002:	23f8      	movs	r3, #248	; 0xf8
 8005004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005008:	e05c      	b.n	80050c4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	895b      	ldrh	r3, [r3, #10]
 800500e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005014:	e02f      	b.n	8005076 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	18d0      	adds	r0, r2, r3
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	18d1      	adds	r1, r2, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	461a      	mov	r2, r3
 800502e:	f00c ffaf 	bl	8011f90 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	da03      	bge.n	8005048 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005040:	23f8      	movs	r3, #248	; 0xf8
 8005042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005046:	e03d      	b.n	80050c4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005058:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005064:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005070:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005080:	4293      	cmp	r3, r2
 8005082:	d8c8      	bhi.n	8005016 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	18d0      	adds	r0, r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4413      	add	r3, r2
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4619      	mov	r1, r3
 8005096:	f00c ff7b 	bl	8011f90 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1a1      	bne.n	8004ffa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	4811      	ldr	r0, [pc, #68]	; (8005100 <low_level_output+0x138>)
 80050ba:	f7fc fcb3 	bl	8001a24 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <low_level_output+0x138>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <low_level_output+0x138>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050de:	461a      	mov	r2, r3
 80050e0:	2320      	movs	r3, #32
 80050e2:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <low_level_output+0x138>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80050f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20003254 	.word	0x20003254

08005104 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005128:	484e      	ldr	r0, [pc, #312]	; (8005264 <low_level_input+0x160>)
 800512a:	f7fc fd65 	bl	8001bf8 <HAL_ETH_GetReceivedFrame>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <low_level_input+0x34>

    return NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	e091      	b.n	800525c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <low_level_input+0x160>)
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800513e:	4b49      	ldr	r3, [pc, #292]	; (8005264 <low_level_input+0x160>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005144:	89fb      	ldrh	r3, [r7, #14]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800514a:	89fb      	ldrh	r3, [r7, #14]
 800514c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005150:	4619      	mov	r1, r3
 8005152:	2000      	movs	r0, #0
 8005154:	f001 f93c 	bl	80063d0 <pbuf_alloc>
 8005158:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04b      	beq.n	80051f8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005160:	4b40      	ldr	r3, [pc, #256]	; (8005264 <low_level_input+0x160>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
 800516e:	e040      	b.n	80051f2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	895b      	ldrh	r3, [r3, #10]
 8005174:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800517a:	e021      	b.n	80051c0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	18d0      	adds	r0, r2, r3
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	18d1      	adds	r1, r2, r3
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	461a      	mov	r2, r3
 8005194:	f00c fefc 	bl	8011f90 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80051ae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051ba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d8d6      	bhi.n	800517c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	18d0      	adds	r0, r2, r3
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4619      	mov	r1, r3
 80051e0:	f00c fed6 	bl	8011f90 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1bb      	bne.n	8005170 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <low_level_input+0x160>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e00b      	b.n	800521c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3301      	adds	r3, #1
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <low_level_input+0x160>)
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3ee      	bcc.n	8005204 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <low_level_input+0x160>)
 8005228:	2200      	movs	r2, #0
 800522a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <low_level_input+0x160>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <low_level_input+0x160>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005246:	461a      	mov	r2, r3
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <low_level_input+0x160>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6093      	str	r3, [r2, #8]
  }
  return p;
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800525c:	4618      	mov	r0, r3
 800525e:	3730      	adds	r7, #48	; 0x30
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20003254 	.word	0x20003254

08005268 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff47 	bl	8005104 <low_level_input>
 8005276:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	4798      	blx	r3
 8005288:	4603      	mov	r3, r0
 800528a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800528c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f001 fb7f 	bl	8006998 <pbuf_free>
    p = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e000      	b.n	80052a2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80052a0:	bf00      	nop
  }
}
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <ethernetif_init+0x1c>
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <ethernetif_init+0x48>)
 80052b8:	f240 2212 	movw	r2, #530	; 0x212
 80052bc:	490d      	ldr	r1, [pc, #52]	; (80052f4 <ethernetif_init+0x4c>)
 80052be:	480e      	ldr	r0, [pc, #56]	; (80052f8 <ethernetif_init+0x50>)
 80052c0:	f00c fe7c 	bl	8011fbc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2273      	movs	r2, #115	; 0x73
 80052c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2274      	movs	r2, #116	; 0x74
 80052d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <ethernetif_init+0x54>)
 80052d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <ethernetif_init+0x58>)
 80052de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fdc3 	bl	8004e6c <low_level_init>

  return ERR_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	08013108 	.word	0x08013108
 80052f4:	08013124 	.word	0x08013124
 80052f8:	08013134 	.word	0x08013134
 80052fc:	080100d9 	.word	0x080100d9
 8005300:	08004fc9 	.word	0x08004fc9

08005304 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005308:	f7fc f80e 	bl	8001328 <HAL_GetTick>
 800530c:	4603      	mov	r3, r0
}
 800530e:	4618      	mov	r0, r3
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d05d      	beq.n	80053f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005336:	4b34      	ldr	r3, [pc, #208]	; (8005408 <ethernetif_update_config+0xf4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03f      	beq.n	80053be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800533e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005342:	2100      	movs	r1, #0
 8005344:	4830      	ldr	r0, [pc, #192]	; (8005408 <ethernetif_update_config+0xf4>)
 8005346:	f7fc fd43 	bl	8001dd0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800534a:	f7fb ffed 	bl	8001328 <HAL_GetTick>
 800534e:	4603      	mov	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	461a      	mov	r2, r3
 8005358:	2101      	movs	r1, #1
 800535a:	482b      	ldr	r0, [pc, #172]	; (8005408 <ethernetif_update_config+0xf4>)
 800535c:	f7fc fcd0 	bl	8001d00 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005360:	f7fb ffe2 	bl	8001328 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536e:	d828      	bhi.n	80053c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0eb      	beq.n	8005352 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800537a:	f107 0308 	add.w	r3, r7, #8
 800537e:	461a      	mov	r2, r3
 8005380:	2110      	movs	r1, #16
 8005382:	4821      	ldr	r0, [pc, #132]	; (8005408 <ethernetif_update_config+0xf4>)
 8005384:	f7fc fcbc 	bl	8001d00 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <ethernetif_update_config+0xf4>)
 8005394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	e002      	b.n	80053a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <ethernetif_update_config+0xf4>)
 800539e:	2200      	movs	r2, #0
 80053a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80053ac:	4b16      	ldr	r3, [pc, #88]	; (8005408 <ethernetif_update_config+0xf4>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	e016      	b.n	80053e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <ethernetif_update_config+0xf4>)
 80053b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	e011      	b.n	80053e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <ethernetif_update_config+0xb0>
          goto error;
 80053c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <ethernetif_update_config+0xf4>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <ethernetif_update_config+0xf4>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	2100      	movs	r1, #0
 80053dc:	480a      	ldr	r0, [pc, #40]	; (8005408 <ethernetif_update_config+0xf4>)
 80053de:	f7fc fcf7 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80053e2:	2100      	movs	r1, #0
 80053e4:	4808      	ldr	r0, [pc, #32]	; (8005408 <ethernetif_update_config+0xf4>)
 80053e6:	f7fc fdb7 	bl	8001f58 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80053ea:	4807      	ldr	r0, [pc, #28]	; (8005408 <ethernetif_update_config+0xf4>)
 80053ec:	f7fc fd56 	bl	8001e9c <HAL_ETH_Start>
 80053f0:	e002      	b.n	80053f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80053f2:	4805      	ldr	r0, [pc, #20]	; (8005408 <ethernetif_update_config+0xf4>)
 80053f4:	f7fc fd81 	bl	8001efa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f807 	bl	800540c <ethernetif_notify_conn_changed>
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20003254 	.word	0x20003254

0800540c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	b21a      	sxth	r2, r3
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	b21b      	sxth	r3, r3
 8005438:	4313      	orrs	r3, r2
 800543a:	b21b      	sxth	r3, r3
 800543c:	b29b      	uxth	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	061a      	lsls	r2, r3, #24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0e1b      	lsrs	r3, r3, #24
 800546e:	4313      	orrs	r3, r2
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005486:	f000 f8d5 	bl	8005634 <mem_init>
  memp_init();
 800548a:	f000 fbdb 	bl	8005c44 <memp_init>
  pbuf_init();
  netif_init();
 800548e:	f000 fc93 	bl	8005db8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005492:	f007 febd 	bl	800d210 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005496:	f001 fd1d 	bl	8006ed4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800549a:	f007 fe2f 	bl	800d0fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <ptr_to_mem+0x20>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4413      	add	r3, r2
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20003908 	.word	0x20003908

080054cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <mem_to_ptr+0x20>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	b29b      	uxth	r3, r3
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20003908 	.word	0x20003908

080054f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80054f8:	4b45      	ldr	r3, [pc, #276]	; (8005610 <plug_holes+0x120>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d206      	bcs.n	8005510 <plug_holes+0x20>
 8005502:	4b44      	ldr	r3, [pc, #272]	; (8005614 <plug_holes+0x124>)
 8005504:	f240 12df 	movw	r2, #479	; 0x1df
 8005508:	4943      	ldr	r1, [pc, #268]	; (8005618 <plug_holes+0x128>)
 800550a:	4844      	ldr	r0, [pc, #272]	; (800561c <plug_holes+0x12c>)
 800550c:	f00c fd56 	bl	8011fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005510:	4b43      	ldr	r3, [pc, #268]	; (8005620 <plug_holes+0x130>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d306      	bcc.n	8005528 <plug_holes+0x38>
 800551a:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <plug_holes+0x124>)
 800551c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005520:	4940      	ldr	r1, [pc, #256]	; (8005624 <plug_holes+0x134>)
 8005522:	483e      	ldr	r0, [pc, #248]	; (800561c <plug_holes+0x12c>)
 8005524:	f00c fd4a 	bl	8011fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <plug_holes+0x4e>
 8005530:	4b38      	ldr	r3, [pc, #224]	; (8005614 <plug_holes+0x124>)
 8005532:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005536:	493c      	ldr	r1, [pc, #240]	; (8005628 <plug_holes+0x138>)
 8005538:	4838      	ldr	r0, [pc, #224]	; (800561c <plug_holes+0x12c>)
 800553a:	f00c fd3f 	bl	8011fbc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005546:	d906      	bls.n	8005556 <plug_holes+0x66>
 8005548:	4b32      	ldr	r3, [pc, #200]	; (8005614 <plug_holes+0x124>)
 800554a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800554e:	4937      	ldr	r1, [pc, #220]	; (800562c <plug_holes+0x13c>)
 8005550:	4832      	ldr	r0, [pc, #200]	; (800561c <plug_holes+0x12c>)
 8005552:	f00c fd33 	bl	8011fbc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ffa4 	bl	80054a8 <ptr_to_mem>
 8005560:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	429a      	cmp	r2, r3
 8005568:	d024      	beq.n	80055b4 <plug_holes+0xc4>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d120      	bne.n	80055b4 <plug_holes+0xc4>
 8005572:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <plug_holes+0x130>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d01b      	beq.n	80055b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800557c:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <plug_holes+0x140>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d102      	bne.n	800558c <plug_holes+0x9c>
      lfree = mem;
 8005586:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <plug_holes+0x140>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800559c:	d00a      	beq.n	80055b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ff80 	bl	80054a8 <ptr_to_mem>
 80055a8:	4604      	mov	r4, r0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff8e 	bl	80054cc <mem_to_ptr>
 80055b0:	4603      	mov	r3, r0
 80055b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	885b      	ldrh	r3, [r3, #2]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff75 	bl	80054a8 <ptr_to_mem>
 80055be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d01f      	beq.n	8005608 <plug_holes+0x118>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	791b      	ldrb	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11b      	bne.n	8005608 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <plug_holes+0x140>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d102      	bne.n	80055e0 <plug_holes+0xf0>
      lfree = pmem;
 80055da:	4a15      	ldr	r2, [pc, #84]	; (8005630 <plug_holes+0x140>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	881a      	ldrh	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055f0:	d00a      	beq.n	8005608 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff ff56 	bl	80054a8 <ptr_to_mem>
 80055fc:	4604      	mov	r4, r0
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f7ff ff64 	bl	80054cc <mem_to_ptr>
 8005604:	4603      	mov	r3, r0
 8005606:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	20003908 	.word	0x20003908
 8005614:	0801315c 	.word	0x0801315c
 8005618:	0801318c 	.word	0x0801318c
 800561c:	080131a4 	.word	0x080131a4
 8005620:	2000390c 	.word	0x2000390c
 8005624:	080131cc 	.word	0x080131cc
 8005628:	080131e8 	.word	0x080131e8
 800562c:	08013204 	.word	0x08013204
 8005630:	20003910 	.word	0x20003910

08005634 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <mem_init+0x68>)
 800563c:	3303      	adds	r3, #3
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	461a      	mov	r2, r3
 8005644:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <mem_init+0x6c>)
 8005646:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005648:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <mem_init+0x6c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005654:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005662:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005666:	f7ff ff1f 	bl	80054a8 <ptr_to_mem>
 800566a:	4603      	mov	r3, r0
 800566c:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <mem_init+0x70>)
 800566e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <mem_init+0x70>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2201      	movs	r2, #1
 8005676:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <mem_init+0x70>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005680:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <mem_init+0x70>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800568a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800568c:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <mem_init+0x6c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <mem_init+0x74>)
 8005692:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	200032b4 	.word	0x200032b4
 80056a0:	20003908 	.word	0x20003908
 80056a4:	2000390c 	.word	0x2000390c
 80056a8:	20003910 	.word	0x20003910

080056ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff09 	bl	80054cc <mem_to_ptr>
 80056ba:	4603      	mov	r3, r0
 80056bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fef0 	bl	80054a8 <ptr_to_mem>
 80056c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	885b      	ldrh	r3, [r3, #2]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff feea 	bl	80054a8 <ptr_to_mem>
 80056d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056de:	d818      	bhi.n	8005712 <mem_link_valid+0x66>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	885b      	ldrh	r3, [r3, #2]
 80056e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056e8:	d813      	bhi.n	8005712 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80056ee:	8afa      	ldrh	r2, [r7, #22]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d004      	beq.n	80056fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	8afa      	ldrh	r2, [r7, #22]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d109      	bne.n	8005712 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <mem_link_valid+0x74>)
 8005700:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d006      	beq.n	8005716 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	885b      	ldrh	r3, [r3, #2]
 800570c:	8afa      	ldrh	r2, [r7, #22]
 800570e:	429a      	cmp	r2, r3
 8005710:	d001      	beq.n	8005716 <mem_link_valid+0x6a>
    return 0;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <mem_link_valid+0x6c>
  }
  return 1;
 8005716:	2301      	movs	r3, #1
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	2000390c 	.word	0x2000390c

08005724 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04c      	beq.n	80057cc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <mem_free+0xb0>)
 800573e:	f240 2273 	movw	r2, #627	; 0x273
 8005742:	4925      	ldr	r1, [pc, #148]	; (80057d8 <mem_free+0xb4>)
 8005744:	4825      	ldr	r0, [pc, #148]	; (80057dc <mem_free+0xb8>)
 8005746:	f00c fc39 	bl	8011fbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800574a:	e040      	b.n	80057ce <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3b08      	subs	r3, #8
 8005750:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <mem_free+0xbc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	429a      	cmp	r2, r3
 800575a:	d306      	bcc.n	800576a <mem_free+0x46>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 020c 	add.w	r2, r3, #12
 8005762:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <mem_free+0xc0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d907      	bls.n	800577a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800576a:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <mem_free+0xb0>)
 800576c:	f240 227f 	movw	r2, #639	; 0x27f
 8005770:	491d      	ldr	r1, [pc, #116]	; (80057e8 <mem_free+0xc4>)
 8005772:	481a      	ldr	r0, [pc, #104]	; (80057dc <mem_free+0xb8>)
 8005774:	f00c fc22 	bl	8011fbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005778:	e029      	b.n	80057ce <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005782:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <mem_free+0xb0>)
 8005784:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005788:	4918      	ldr	r1, [pc, #96]	; (80057ec <mem_free+0xc8>)
 800578a:	4814      	ldr	r0, [pc, #80]	; (80057dc <mem_free+0xb8>)
 800578c:	f00c fc16 	bl	8011fbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005790:	e01d      	b.n	80057ce <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff ff8a 	bl	80056ac <mem_link_valid>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d107      	bne.n	80057ae <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <mem_free+0xb0>)
 80057a0:	f240 2295 	movw	r2, #661	; 0x295
 80057a4:	4912      	ldr	r1, [pc, #72]	; (80057f0 <mem_free+0xcc>)
 80057a6:	480d      	ldr	r0, [pc, #52]	; (80057dc <mem_free+0xb8>)
 80057a8:	f00c fc08 	bl	8011fbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057ac:	e00f      	b.n	80057ce <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <mem_free+0xd0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d202      	bcs.n	80057c4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80057be:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <mem_free+0xd0>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fe93 	bl	80054f0 <plug_holes>
 80057ca:	e000      	b.n	80057ce <mem_free+0xaa>
    return;
 80057cc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	0801315c 	.word	0x0801315c
 80057d8:	08013230 	.word	0x08013230
 80057dc:	080131a4 	.word	0x080131a4
 80057e0:	20003908 	.word	0x20003908
 80057e4:	2000390c 	.word	0x2000390c
 80057e8:	08013254 	.word	0x08013254
 80057ec:	08013270 	.word	0x08013270
 80057f0:	08013298 	.word	0x08013298
 80057f4:	20003910 	.word	0x20003910

080057f8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	3303      	adds	r3, #3
 8005808:	b29b      	uxth	r3, r3
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005810:	8bfb      	ldrh	r3, [r7, #30]
 8005812:	2b0b      	cmp	r3, #11
 8005814:	d801      	bhi.n	800581a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005816:	230c      	movs	r3, #12
 8005818:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005820:	d803      	bhi.n	800582a <mem_trim+0x32>
 8005822:	8bfa      	ldrh	r2, [r7, #30]
 8005824:	887b      	ldrh	r3, [r7, #2]
 8005826:	429a      	cmp	r2, r3
 8005828:	d201      	bcs.n	800582e <mem_trim+0x36>
    return NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	e0cc      	b.n	80059c8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800582e:	4b68      	ldr	r3, [pc, #416]	; (80059d0 <mem_trim+0x1d8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d304      	bcc.n	8005842 <mem_trim+0x4a>
 8005838:	4b66      	ldr	r3, [pc, #408]	; (80059d4 <mem_trim+0x1dc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d306      	bcc.n	8005850 <mem_trim+0x58>
 8005842:	4b65      	ldr	r3, [pc, #404]	; (80059d8 <mem_trim+0x1e0>)
 8005844:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005848:	4964      	ldr	r1, [pc, #400]	; (80059dc <mem_trim+0x1e4>)
 800584a:	4865      	ldr	r0, [pc, #404]	; (80059e0 <mem_trim+0x1e8>)
 800584c:	f00c fbb6 	bl	8011fbc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005850:	4b5f      	ldr	r3, [pc, #380]	; (80059d0 <mem_trim+0x1d8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d304      	bcc.n	8005864 <mem_trim+0x6c>
 800585a:	4b5e      	ldr	r3, [pc, #376]	; (80059d4 <mem_trim+0x1dc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d301      	bcc.n	8005868 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	e0af      	b.n	80059c8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3b08      	subs	r3, #8
 800586c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800586e:	69b8      	ldr	r0, [r7, #24]
 8005870:	f7ff fe2c 	bl	80054cc <mem_to_ptr>
 8005874:	4603      	mov	r3, r0
 8005876:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	8afb      	ldrh	r3, [r7, #22]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b08      	subs	r3, #8
 8005884:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005886:	8bfa      	ldrh	r2, [r7, #30]
 8005888:	8abb      	ldrh	r3, [r7, #20]
 800588a:	429a      	cmp	r2, r3
 800588c:	d906      	bls.n	800589c <mem_trim+0xa4>
 800588e:	4b52      	ldr	r3, [pc, #328]	; (80059d8 <mem_trim+0x1e0>)
 8005890:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005894:	4953      	ldr	r1, [pc, #332]	; (80059e4 <mem_trim+0x1ec>)
 8005896:	4852      	ldr	r0, [pc, #328]	; (80059e0 <mem_trim+0x1e8>)
 8005898:	f00c fb90 	bl	8011fbc <iprintf>
  if (newsize > size) {
 800589c:	8bfa      	ldrh	r2, [r7, #30]
 800589e:	8abb      	ldrh	r3, [r7, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d901      	bls.n	80058a8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e08f      	b.n	80059c8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80058a8:	8bfa      	ldrh	r2, [r7, #30]
 80058aa:	8abb      	ldrh	r3, [r7, #20]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d101      	bne.n	80058b4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	e089      	b.n	80059c8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fdf5 	bl	80054a8 <ptr_to_mem>
 80058be:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	791b      	ldrb	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d13f      	bne.n	8005948 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058d0:	d106      	bne.n	80058e0 <mem_trim+0xe8>
 80058d2:	4b41      	ldr	r3, [pc, #260]	; (80059d8 <mem_trim+0x1e0>)
 80058d4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80058d8:	4943      	ldr	r1, [pc, #268]	; (80059e8 <mem_trim+0x1f0>)
 80058da:	4841      	ldr	r0, [pc, #260]	; (80059e0 <mem_trim+0x1e8>)
 80058dc:	f00c fb6e 	bl	8011fbc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80058e6:	8afa      	ldrh	r2, [r7, #22]
 80058e8:	8bfb      	ldrh	r3, [r7, #30]
 80058ea:	4413      	add	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3308      	adds	r3, #8
 80058f0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80058f2:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <mem_trim+0x1f4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d106      	bne.n	800590a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80058fc:	89fb      	ldrh	r3, [r7, #14]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fdd2 	bl	80054a8 <ptr_to_mem>
 8005904:	4603      	mov	r3, r0
 8005906:	4a39      	ldr	r2, [pc, #228]	; (80059ec <mem_trim+0x1f4>)
 8005908:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fdcb 	bl	80054a8 <ptr_to_mem>
 8005912:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	89ba      	ldrh	r2, [r7, #12]
 800591e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	8afa      	ldrh	r2, [r7, #22]
 8005924:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	89fa      	ldrh	r2, [r7, #14]
 800592a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005934:	d047      	beq.n	80059c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fdb4 	bl	80054a8 <ptr_to_mem>
 8005940:	4602      	mov	r2, r0
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	8053      	strh	r3, [r2, #2]
 8005946:	e03e      	b.n	80059c6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	f103 0214 	add.w	r2, r3, #20
 800594e:	8abb      	ldrh	r3, [r7, #20]
 8005950:	429a      	cmp	r2, r3
 8005952:	d838      	bhi.n	80059c6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005954:	8afa      	ldrh	r2, [r7, #22]
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	4413      	add	r3, r2
 800595a:	b29b      	uxth	r3, r3
 800595c:	3308      	adds	r3, #8
 800595e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005968:	d106      	bne.n	8005978 <mem_trim+0x180>
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <mem_trim+0x1e0>)
 800596c:	f240 3216 	movw	r2, #790	; 0x316
 8005970:	491d      	ldr	r1, [pc, #116]	; (80059e8 <mem_trim+0x1f0>)
 8005972:	481b      	ldr	r0, [pc, #108]	; (80059e0 <mem_trim+0x1e8>)
 8005974:	f00c fb22 	bl	8011fbc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fd94 	bl	80054a8 <ptr_to_mem>
 8005980:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005982:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <mem_trim+0x1f4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d202      	bcs.n	8005992 <mem_trim+0x19a>
      lfree = mem2;
 800598c:	4a17      	ldr	r2, [pc, #92]	; (80059ec <mem_trim+0x1f4>)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2200      	movs	r2, #0
 8005996:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	8afa      	ldrh	r2, [r7, #22]
 80059a4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	89fa      	ldrh	r2, [r7, #14]
 80059aa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059b4:	d007      	beq.n	80059c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fd74 	bl	80054a8 <ptr_to_mem>
 80059c0:	4602      	mov	r2, r0
 80059c2:	89fb      	ldrh	r3, [r7, #14]
 80059c4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80059c6:	687b      	ldr	r3, [r7, #4]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20003908 	.word	0x20003908
 80059d4:	2000390c 	.word	0x2000390c
 80059d8:	0801315c 	.word	0x0801315c
 80059dc:	080132cc 	.word	0x080132cc
 80059e0:	080131a4 	.word	0x080131a4
 80059e4:	080132e4 	.word	0x080132e4
 80059e8:	08013304 	.word	0x08013304
 80059ec:	20003910 	.word	0x20003910

080059f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <mem_malloc+0x14>
    return NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e0d9      	b.n	8005bb8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	3303      	adds	r3, #3
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a10:	8bbb      	ldrh	r3, [r7, #28]
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d801      	bhi.n	8005a1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a16:	230c      	movs	r3, #12
 8005a18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a1a:	8bbb      	ldrh	r3, [r7, #28]
 8005a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a20:	d803      	bhi.n	8005a2a <mem_malloc+0x3a>
 8005a22:	8bba      	ldrh	r2, [r7, #28]
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d201      	bcs.n	8005a2e <mem_malloc+0x3e>
    return NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e0c4      	b.n	8005bb8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a2e:	4b64      	ldr	r3, [pc, #400]	; (8005bc0 <mem_malloc+0x1d0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fd4a 	bl	80054cc <mem_to_ptr>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	83fb      	strh	r3, [r7, #30]
 8005a3c:	e0b4      	b.n	8005ba8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005a3e:	8bfb      	ldrh	r3, [r7, #30]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fd31 	bl	80054a8 <ptr_to_mem>
 8005a46:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 80a4 	bne.w	8005b9a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f1a3 0208 	sub.w	r2, r3, #8
 8005a60:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f0c0 8099 	bcc.w	8005b9a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	8bfb      	ldrh	r3, [r7, #30]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f1a3 0208 	sub.w	r2, r3, #8
 8005a76:	8bbb      	ldrh	r3, [r7, #28]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d333      	bcc.n	8005ae6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005a7e:	8bfa      	ldrh	r2, [r7, #30]
 8005a80:	8bbb      	ldrh	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3308      	adds	r3, #8
 8005a88:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005a8a:	8a7b      	ldrh	r3, [r7, #18]
 8005a8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a90:	d106      	bne.n	8005aa0 <mem_malloc+0xb0>
 8005a92:	4b4c      	ldr	r3, [pc, #304]	; (8005bc4 <mem_malloc+0x1d4>)
 8005a94:	f240 3287 	movw	r2, #903	; 0x387
 8005a98:	494b      	ldr	r1, [pc, #300]	; (8005bc8 <mem_malloc+0x1d8>)
 8005a9a:	484c      	ldr	r0, [pc, #304]	; (8005bcc <mem_malloc+0x1dc>)
 8005a9c:	f00c fa8e 	bl	8011fbc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005aa0:	8a7b      	ldrh	r3, [r7, #18]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fd00 	bl	80054a8 <ptr_to_mem>
 8005aa8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	881a      	ldrh	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8bfa      	ldrh	r2, [r7, #30]
 8005abc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	8a7a      	ldrh	r2, [r7, #18]
 8005ac2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ad2:	d00b      	beq.n	8005aec <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fce5 	bl	80054a8 <ptr_to_mem>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	8a7b      	ldrh	r3, [r7, #18]
 8005ae2:	8053      	strh	r3, [r2, #2]
 8005ae4:	e002      	b.n	8005aec <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005aec:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <mem_malloc+0x1d0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d127      	bne.n	8005b46 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005af6:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <mem_malloc+0x1d0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005afc:	e005      	b.n	8005b0a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fcd0 	bl	80054a8 <ptr_to_mem>
 8005b08:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	791b      	ldrb	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <mem_malloc+0x12c>
 8005b12:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <mem_malloc+0x1e0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d1f0      	bne.n	8005afe <mem_malloc+0x10e>
          }
          lfree = cur;
 8005b1c:	4a28      	ldr	r2, [pc, #160]	; (8005bc0 <mem_malloc+0x1d0>)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <mem_malloc+0x1d0>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <mem_malloc+0x1e0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d00b      	beq.n	8005b46 <mem_malloc+0x156>
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <mem_malloc+0x1d0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <mem_malloc+0x156>
 8005b38:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <mem_malloc+0x1d4>)
 8005b3a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005b3e:	4925      	ldr	r1, [pc, #148]	; (8005bd4 <mem_malloc+0x1e4>)
 8005b40:	4822      	ldr	r0, [pc, #136]	; (8005bcc <mem_malloc+0x1dc>)
 8005b42:	f00c fa3b 	bl	8011fbc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005b46:	8bba      	ldrh	r2, [r7, #28]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <mem_malloc+0x1e0>)
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d906      	bls.n	8005b64 <mem_malloc+0x174>
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <mem_malloc+0x1d4>)
 8005b58:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005b5c:	491e      	ldr	r1, [pc, #120]	; (8005bd8 <mem_malloc+0x1e8>)
 8005b5e:	481b      	ldr	r0, [pc, #108]	; (8005bcc <mem_malloc+0x1dc>)
 8005b60:	f00c fa2c 	bl	8011fbc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <mem_malloc+0x18c>
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <mem_malloc+0x1d4>)
 8005b70:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005b74:	4919      	ldr	r1, [pc, #100]	; (8005bdc <mem_malloc+0x1ec>)
 8005b76:	4815      	ldr	r0, [pc, #84]	; (8005bcc <mem_malloc+0x1dc>)
 8005b78:	f00c fa20 	bl	8011fbc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <mem_malloc+0x1a4>
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <mem_malloc+0x1d4>)
 8005b88:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005b8c:	4914      	ldr	r1, [pc, #80]	; (8005be0 <mem_malloc+0x1f0>)
 8005b8e:	480f      	ldr	r0, [pc, #60]	; (8005bcc <mem_malloc+0x1dc>)
 8005b90:	f00c fa14 	bl	8011fbc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3308      	adds	r3, #8
 8005b98:	e00e      	b.n	8005bb8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005b9a:	8bfb      	ldrh	r3, [r7, #30]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fc83 	bl	80054a8 <ptr_to_mem>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ba8:	8bfa      	ldrh	r2, [r7, #30]
 8005baa:	8bbb      	ldrh	r3, [r7, #28]
 8005bac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	f4ff af44 	bcc.w	8005a3e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20003910 	.word	0x20003910
 8005bc4:	0801315c 	.word	0x0801315c
 8005bc8:	08013304 	.word	0x08013304
 8005bcc:	080131a4 	.word	0x080131a4
 8005bd0:	2000390c 	.word	0x2000390c
 8005bd4:	08013318 	.word	0x08013318
 8005bd8:	08013334 	.word	0x08013334
 8005bdc:	08013364 	.word	0x08013364
 8005be0:	08013394 	.word	0x08013394

08005be4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	3303      	adds	r3, #3
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e011      	b.n	8005c2a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	885b      	ldrh	r3, [r3, #2]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	dbe7      	blt.n	8005c06 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	80fb      	strh	r3, [r7, #6]
 8005c4e:	e009      	b.n	8005c64 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <memp_init+0x30>)
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff ffc3 	bl	8005be4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	3301      	adds	r3, #1
 8005c62:	80fb      	strh	r3, [r7, #6]
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d9f2      	bls.n	8005c50 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	08015f0c 	.word	0x08015f0c

08005c78 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d012      	beq.n	8005cb4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <do_memp_malloc_pool+0x38>
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <do_memp_malloc_pool+0x48>)
 8005ca4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005ca8:	4906      	ldr	r1, [pc, #24]	; (8005cc4 <do_memp_malloc_pool+0x4c>)
 8005caa:	4807      	ldr	r0, [pc, #28]	; (8005cc8 <do_memp_malloc_pool+0x50>)
 8005cac:	f00c f986 	bl	8011fbc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e000      	b.n	8005cb6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	080133b8 	.word	0x080133b8
 8005cc4:	080133e8 	.word	0x080133e8
 8005cc8:	0801340c 	.word	0x0801340c

08005ccc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d908      	bls.n	8005cee <memp_malloc+0x22>
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <memp_malloc+0x3c>)
 8005cde:	f240 1257 	movw	r2, #343	; 0x157
 8005ce2:	490a      	ldr	r1, [pc, #40]	; (8005d0c <memp_malloc+0x40>)
 8005ce4:	480a      	ldr	r0, [pc, #40]	; (8005d10 <memp_malloc+0x44>)
 8005ce6:	f00c f969 	bl	8011fbc <iprintf>
 8005cea:	2300      	movs	r3, #0
 8005cec:	e008      	b.n	8005d00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <memp_malloc+0x48>)
 8005cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ffbe 	bl	8005c78 <do_memp_malloc_pool>
 8005cfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	080133b8 	.word	0x080133b8
 8005d0c:	08013448 	.word	0x08013448
 8005d10:	0801340c 	.word	0x0801340c
 8005d14:	08015f0c 	.word	0x08015f0c

08005d18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d006      	beq.n	8005d3a <do_memp_free_pool+0x22>
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <do_memp_free_pool+0x40>)
 8005d2e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005d32:	490a      	ldr	r1, [pc, #40]	; (8005d5c <do_memp_free_pool+0x44>)
 8005d34:	480a      	ldr	r0, [pc, #40]	; (8005d60 <do_memp_free_pool+0x48>)
 8005d36:	f00c f941 	bl	8011fbc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	080133b8 	.word	0x080133b8
 8005d5c:	08013468 	.word	0x08013468
 8005d60:	0801340c 	.word	0x0801340c

08005d64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d907      	bls.n	8005d86 <memp_free+0x22>
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <memp_free+0x44>)
 8005d78:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005d7c:	490b      	ldr	r1, [pc, #44]	; (8005dac <memp_free+0x48>)
 8005d7e:	480c      	ldr	r0, [pc, #48]	; (8005db0 <memp_free+0x4c>)
 8005d80:	f00c f91c 	bl	8011fbc <iprintf>
 8005d84:	e00c      	b.n	8005da0 <memp_free+0x3c>

  if (mem == NULL) {
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <memp_free+0x50>)
 8005d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ffbe 	bl	8005d18 <do_memp_free_pool>
 8005d9c:	e000      	b.n	8005da0 <memp_free+0x3c>
    return;
 8005d9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	080133b8 	.word	0x080133b8
 8005dac:	08013488 	.word	0x08013488
 8005db0:	0801340c 	.word	0x0801340c
 8005db4:	08015f0c 	.word	0x08015f0c

08005db8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d108      	bne.n	8005dee <netif_add+0x26>
 8005ddc:	4b5b      	ldr	r3, [pc, #364]	; (8005f4c <netif_add+0x184>)
 8005dde:	f240 1227 	movw	r2, #295	; 0x127
 8005de2:	495b      	ldr	r1, [pc, #364]	; (8005f50 <netif_add+0x188>)
 8005de4:	485b      	ldr	r0, [pc, #364]	; (8005f54 <netif_add+0x18c>)
 8005de6:	f00c f8e9 	bl	8011fbc <iprintf>
 8005dea:	2300      	movs	r3, #0
 8005dec:	e0a9      	b.n	8005f42 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <netif_add+0x3e>
 8005df4:	4b55      	ldr	r3, [pc, #340]	; (8005f4c <netif_add+0x184>)
 8005df6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005dfa:	4957      	ldr	r1, [pc, #348]	; (8005f58 <netif_add+0x190>)
 8005dfc:	4855      	ldr	r0, [pc, #340]	; (8005f54 <netif_add+0x18c>)
 8005dfe:	f00c f8dd 	bl	8011fbc <iprintf>
 8005e02:	2300      	movs	r3, #0
 8005e04:	e09d      	b.n	8005f42 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <netif_add+0x194>)
 8005e0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005e16:	4b51      	ldr	r3, [pc, #324]	; (8005f5c <netif_add+0x194>)
 8005e18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005e20:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <netif_add+0x194>)
 8005e22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a49      	ldr	r2, [pc, #292]	; (8005f60 <netif_add+0x198>)
 8005e3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	2204      	movs	r2, #4
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00c f8aa 	bl	8011fac <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005e64:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <netif_add+0x19c>)
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e72:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f914 	bl	80060a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	4798      	blx	r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <netif_add+0xc8>
    return NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e058      	b.n	8005f42 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e96:	2bff      	cmp	r3, #255	; 0xff
 8005e98:	d103      	bne.n	8005ea2 <netif_add+0xda>
        netif->num = 0;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ea6:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <netif_add+0x1a0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e02b      	b.n	8005f06 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d106      	bne.n	8005ec4 <netif_add+0xfc>
 8005eb6:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <netif_add+0x184>)
 8005eb8:	f240 128b 	movw	r2, #395	; 0x18b
 8005ebc:	492b      	ldr	r1, [pc, #172]	; (8005f6c <netif_add+0x1a4>)
 8005ebe:	4825      	ldr	r0, [pc, #148]	; (8005f54 <netif_add+0x18c>)
 8005ec0:	f00c f87c 	bl	8011fbc <iprintf>
        num_netifs++;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2bff      	cmp	r3, #255	; 0xff
 8005ece:	dd06      	ble.n	8005ede <netif_add+0x116>
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <netif_add+0x184>)
 8005ed2:	f240 128d 	movw	r2, #397	; 0x18d
 8005ed6:	4926      	ldr	r1, [pc, #152]	; (8005f70 <netif_add+0x1a8>)
 8005ed8:	481e      	ldr	r0, [pc, #120]	; (8005f54 <netif_add+0x18c>)
 8005eda:	f00c f86f 	bl	8011fbc <iprintf>
        if (netif2->num == netif->num) {
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d108      	bne.n	8005f00 <netif_add+0x138>
          netif->num++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8005efe:	e005      	b.n	8005f0c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1d0      	bne.n	8005eae <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1be      	bne.n	8005e90 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f18:	2bfe      	cmp	r3, #254	; 0xfe
 8005f1a:	d103      	bne.n	8005f24 <netif_add+0x15c>
    netif_num = 0;
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <netif_add+0x19c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e006      	b.n	8005f32 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <netif_add+0x19c>)
 8005f30:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <netif_add+0x1a0>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005f3a:	4a0b      	ldr	r2, [pc, #44]	; (8005f68 <netif_add+0x1a0>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	080134a4 	.word	0x080134a4
 8005f50:	08013538 	.word	0x08013538
 8005f54:	080134f4 	.word	0x080134f4
 8005f58:	08013554 	.word	0x08013554
 8005f5c:	08015f80 	.word	0x08015f80
 8005f60:	080062bb 	.word	0x080062bb
 8005f64:	20006828 	.word	0x20006828
 8005f68:	20006820 	.word	0x20006820
 8005f6c:	08013578 	.word	0x08013578
 8005f70:	0801358c 	.word	0x0801358c

08005f74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f002 fd8f 	bl	8008aa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f007 fdcd 	bl	800db28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <netif_do_set_ipaddr+0x20>
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <netif_do_set_ipaddr+0x88>)
 8005fac:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005fb0:	491c      	ldr	r1, [pc, #112]	; (8006024 <netif_do_set_ipaddr+0x8c>)
 8005fb2:	481d      	ldr	r0, [pc, #116]	; (8006028 <netif_do_set_ipaddr+0x90>)
 8005fb4:	f00c f802 	bl	8011fbc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <netif_do_set_ipaddr+0x34>
 8005fbe:	4b18      	ldr	r3, [pc, #96]	; (8006020 <netif_do_set_ipaddr+0x88>)
 8005fc0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005fc4:	4917      	ldr	r1, [pc, #92]	; (8006024 <netif_do_set_ipaddr+0x8c>)
 8005fc6:	4818      	ldr	r0, [pc, #96]	; (8006028 <netif_do_set_ipaddr+0x90>)
 8005fc8:	f00b fff8 	bl	8011fbc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d01c      	beq.n	8006014 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005fea:	f107 0314 	add.w	r3, r7, #20
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ffbf 	bl	8005f74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <netif_do_set_ipaddr+0x6a>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	e000      	b.n	8006004 <netif_do_set_ipaddr+0x6c>
 8006002:	2300      	movs	r3, #0
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006008:	2101      	movs	r1, #1
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f8d2 	bl	80061b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	080134a4 	.word	0x080134a4
 8006024:	080135bc 	.word	0x080135bc
 8006028:	080134f4 	.word	0x080134f4

0800602c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3308      	adds	r3, #8
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d00a      	beq.n	800605c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <netif_do_set_netmask+0x26>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	e000      	b.n	8006054 <netif_do_set_netmask+0x28>
 8006052:	2300      	movs	r3, #0
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	330c      	adds	r3, #12
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d00a      	beq.n	800609a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <netif_do_set_gw+0x26>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	e000      	b.n	8006092 <netif_do_set_gw+0x28>
 8006090:	2300      	movs	r3, #0
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80060c4:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <netif_set_addr+0x90>)
 80060c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80060ce:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <netif_set_addr+0x90>)
 80060d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <netif_set_addr+0x90>)
 80060da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <netif_set_addr+0x42>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <netif_set_addr+0x46>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <netif_set_addr+0x48>
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80060f8:	f107 0310 	add.w	r3, r7, #16
 80060fc:	461a      	mov	r2, r3
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff ff49 	bl	8005f98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ff8e 	bl	800602c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ffa8 	bl	800606a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006120:	f107 0310 	add.w	r3, r7, #16
 8006124:	461a      	mov	r2, r3
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ff35 	bl	8005f98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800612e:	bf00      	nop
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	08015f80 	.word	0x08015f80

0800613c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006144:	4a04      	ldr	r2, [pc, #16]	; (8006158 <netif_set_default+0x1c>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20006824 	.word	0x20006824

0800615c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <netif_set_up+0x1e>
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <netif_set_up+0x4c>)
 800616c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006170:	490e      	ldr	r1, [pc, #56]	; (80061ac <netif_set_up+0x50>)
 8006172:	480f      	ldr	r0, [pc, #60]	; (80061b0 <netif_set_up+0x54>)
 8006174:	f00b ff22 	bl	8011fbc <iprintf>
 8006178:	e013      	b.n	80061a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10c      	bne.n	80061a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800619a:	2103      	movs	r1, #3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f809 	bl	80061b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	080134a4 	.word	0x080134a4
 80061ac:	0801362c 	.word	0x0801362c
 80061b0:	080134f4 	.word	0x080134f4

080061b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <netif_issue_reports+0x20>
 80061c6:	4b18      	ldr	r3, [pc, #96]	; (8006228 <netif_issue_reports+0x74>)
 80061c8:	f240 326d 	movw	r2, #877	; 0x36d
 80061cc:	4917      	ldr	r1, [pc, #92]	; (800622c <netif_issue_reports+0x78>)
 80061ce:	4818      	ldr	r0, [pc, #96]	; (8006230 <netif_issue_reports+0x7c>)
 80061d0:	f00b fef4 	bl	8011fbc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01e      	beq.n	8006220 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d017      	beq.n	8006220 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3304      	adds	r3, #4
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f00a fa4b 	bl	80106b4 <etharp_request>
 800621e:	e000      	b.n	8006222 <netif_issue_reports+0x6e>
    return;
 8006220:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	080134a4 	.word	0x080134a4
 800622c:	08013648 	.word	0x08013648
 8006230:	080134f4 	.word	0x080134f4

08006234 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d107      	bne.n	8006252 <netif_set_down+0x1e>
 8006242:	4b12      	ldr	r3, [pc, #72]	; (800628c <netif_set_down+0x58>)
 8006244:	f240 329b 	movw	r2, #923	; 0x39b
 8006248:	4911      	ldr	r1, [pc, #68]	; (8006290 <netif_set_down+0x5c>)
 800624a:	4812      	ldr	r0, [pc, #72]	; (8006294 <netif_set_down+0x60>)
 800624c:	f00b feb6 	bl	8011fbc <iprintf>
 8006250:	e019      	b.n	8006286 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d012      	beq.n	8006286 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	b2da      	uxtb	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f009 fdd1 	bl	800fe28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	080134a4 	.word	0x080134a4
 8006290:	0801366c 	.word	0x0801366c
 8006294:	080134f4 	.word	0x080134f4

08006298 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	61da      	str	r2, [r3, #28]
  }
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80062c6:	f06f 030b 	mvn.w	r3, #11
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d013      	beq.n	8006310 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <netif_get_by_index+0x48>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e00c      	b.n	800630a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062f6:	3301      	adds	r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d101      	bne.n	8006304 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	e006      	b.n	8006312 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ef      	bne.n	80062f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20006820 	.word	0x20006820

08006324 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <pbuf_free_ooseq+0x38>)
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <pbuf_free_ooseq+0x3c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	e00a      	b.n	800634e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f002 fbed 	bl	8008b20 <tcp_free_ooseq>
      return;
 8006346:	e005      	b.n	8006354 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f1      	bne.n	8006338 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20006829 	.word	0x20006829
 8006360:	20006838 	.word	0x20006838

08006364 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <pbuf_pool_is_empty+0x14>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	20006829 	.word	0x20006829

0800637c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4611      	mov	r1, r2
 8006388:	461a      	mov	r2, r3
 800638a:	460b      	mov	r3, r1
 800638c:	80fb      	strh	r3, [r7, #6]
 800638e:	4613      	mov	r3, r2
 8006390:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88ba      	ldrh	r2, [r7, #4]
 80063a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80063aa:	8b3b      	ldrh	r3, [r7, #24]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	7f3a      	ldrb	r2, [r7, #28]
 80063b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	73da      	strb	r2, [r3, #15]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	; 0x30
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
 80063da:	460b      	mov	r3, r1
 80063dc:	80bb      	strh	r3, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80063ec:	d07f      	beq.n	80064ee <pbuf_alloc+0x11e>
 80063ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80063f2:	f300 80c8 	bgt.w	8006586 <pbuf_alloc+0x1b6>
 80063f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80063fa:	d010      	beq.n	800641e <pbuf_alloc+0x4e>
 80063fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006400:	f300 80c1 	bgt.w	8006586 <pbuf_alloc+0x1b6>
 8006404:	2b01      	cmp	r3, #1
 8006406:	d002      	beq.n	800640e <pbuf_alloc+0x3e>
 8006408:	2b41      	cmp	r3, #65	; 0x41
 800640a:	f040 80bc 	bne.w	8006586 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800640e:	887a      	ldrh	r2, [r7, #2]
 8006410:	88bb      	ldrh	r3, [r7, #4]
 8006412:	4619      	mov	r1, r3
 8006414:	2000      	movs	r0, #0
 8006416:	f000 f8d1 	bl	80065bc <pbuf_alloc_reference>
 800641a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800641c:	e0bd      	b.n	800659a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006426:	88bb      	ldrh	r3, [r7, #4]
 8006428:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800642a:	2008      	movs	r0, #8
 800642c:	f7ff fc4e 	bl	8005ccc <memp_malloc>
 8006430:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006438:	f7ff ff94 	bl	8006364 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006444:	f000 faa8 	bl	8006998 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	e0a7      	b.n	800659c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800644c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800644e:	3303      	adds	r3, #3
 8006450:	b29b      	uxth	r3, r3
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	b29b      	uxth	r3, r3
 8006458:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800645c:	b29b      	uxth	r3, r3
 800645e:	8b7a      	ldrh	r2, [r7, #26]
 8006460:	4293      	cmp	r3, r2
 8006462:	bf28      	it	cs
 8006464:	4613      	movcs	r3, r2
 8006466:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800646a:	3310      	adds	r3, #16
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	3303      	adds	r3, #3
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	4618      	mov	r0, r3
 8006478:	89f9      	ldrh	r1, [r7, #14]
 800647a:	8b7a      	ldrh	r2, [r7, #26]
 800647c:	2300      	movs	r3, #0
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	460b      	mov	r3, r1
 8006486:	4601      	mov	r1, r0
 8006488:	6938      	ldr	r0, [r7, #16]
 800648a:	f7ff ff77 	bl	800637c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d006      	beq.n	80064a8 <pbuf_alloc+0xd8>
 800649a:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <pbuf_alloc+0x1d4>)
 800649c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064a0:	4941      	ldr	r1, [pc, #260]	; (80065a8 <pbuf_alloc+0x1d8>)
 80064a2:	4842      	ldr	r0, [pc, #264]	; (80065ac <pbuf_alloc+0x1dc>)
 80064a4:	f00b fd8a 	bl	8011fbc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80064a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064aa:	3303      	adds	r3, #3
 80064ac:	f023 0303 	bic.w	r3, r3, #3
 80064b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80064b4:	d106      	bne.n	80064c4 <pbuf_alloc+0xf4>
 80064b6:	4b3b      	ldr	r3, [pc, #236]	; (80065a4 <pbuf_alloc+0x1d4>)
 80064b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80064bc:	493c      	ldr	r1, [pc, #240]	; (80065b0 <pbuf_alloc+0x1e0>)
 80064be:	483b      	ldr	r0, [pc, #236]	; (80065ac <pbuf_alloc+0x1dc>)
 80064c0:	f00b fd7c 	bl	8011fbc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
 80064ce:	e002      	b.n	80064d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80064da:	8b7a      	ldrh	r2, [r7, #26]
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80064e6:	8b7b      	ldrh	r3, [r7, #26]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d19e      	bne.n	800642a <pbuf_alloc+0x5a>
      break;
 80064ec:	e055      	b.n	800659a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80064ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064f0:	3303      	adds	r3, #3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	88bb      	ldrh	r3, [r7, #4]
 80064fc:	3303      	adds	r3, #3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f023 0303 	bic.w	r3, r3, #3
 8006504:	b29b      	uxth	r3, r3
 8006506:	4413      	add	r3, r2
 8006508:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800650a:	8b3b      	ldrh	r3, [r7, #24]
 800650c:	3310      	adds	r3, #16
 800650e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006510:	8b3a      	ldrh	r2, [r7, #24]
 8006512:	88bb      	ldrh	r3, [r7, #4]
 8006514:	3303      	adds	r3, #3
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	429a      	cmp	r2, r3
 800651c:	d306      	bcc.n	800652c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800651e:	8afa      	ldrh	r2, [r7, #22]
 8006520:	88bb      	ldrh	r3, [r7, #4]
 8006522:	3303      	adds	r3, #3
 8006524:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d201      	bcs.n	8006530 <pbuf_alloc+0x160>
        return NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	e035      	b.n	800659c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006530:	8afb      	ldrh	r3, [r7, #22]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fa5c 	bl	80059f0 <mem_malloc>
 8006538:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <pbuf_alloc+0x174>
        return NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	e02b      	b.n	800659c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006546:	3310      	adds	r3, #16
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	4413      	add	r3, r2
 800654c:	3303      	adds	r3, #3
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	4618      	mov	r0, r3
 8006554:	88b9      	ldrh	r1, [r7, #4]
 8006556:	88ba      	ldrh	r2, [r7, #4]
 8006558:	2300      	movs	r3, #0
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	887b      	ldrh	r3, [r7, #2]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	460b      	mov	r3, r1
 8006562:	4601      	mov	r1, r0
 8006564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006566:	f7ff ff09 	bl	800637c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d010      	beq.n	8006598 <pbuf_alloc+0x1c8>
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <pbuf_alloc+0x1d4>)
 8006578:	f44f 7291 	mov.w	r2, #290	; 0x122
 800657c:	490d      	ldr	r1, [pc, #52]	; (80065b4 <pbuf_alloc+0x1e4>)
 800657e:	480b      	ldr	r0, [pc, #44]	; (80065ac <pbuf_alloc+0x1dc>)
 8006580:	f00b fd1c 	bl	8011fbc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006584:	e008      	b.n	8006598 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <pbuf_alloc+0x1d4>)
 8006588:	f240 1227 	movw	r2, #295	; 0x127
 800658c:	490a      	ldr	r1, [pc, #40]	; (80065b8 <pbuf_alloc+0x1e8>)
 800658e:	4807      	ldr	r0, [pc, #28]	; (80065ac <pbuf_alloc+0x1dc>)
 8006590:	f00b fd14 	bl	8011fbc <iprintf>
      return NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	e001      	b.n	800659c <pbuf_alloc+0x1cc>
      break;
 8006598:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	080136d4 	.word	0x080136d4
 80065a8:	08013704 	.word	0x08013704
 80065ac:	08013734 	.word	0x08013734
 80065b0:	0801375c 	.word	0x0801375c
 80065b4:	08013790 	.word	0x08013790
 80065b8:	080137bc 	.word	0x080137bc

080065bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
 80065c8:	4613      	mov	r3, r2
 80065ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80065cc:	883b      	ldrh	r3, [r7, #0]
 80065ce:	2b41      	cmp	r3, #65	; 0x41
 80065d0:	d009      	beq.n	80065e6 <pbuf_alloc_reference+0x2a>
 80065d2:	883b      	ldrh	r3, [r7, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d006      	beq.n	80065e6 <pbuf_alloc_reference+0x2a>
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <pbuf_alloc_reference+0x5c>)
 80065da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80065de:	490f      	ldr	r1, [pc, #60]	; (800661c <pbuf_alloc_reference+0x60>)
 80065e0:	480f      	ldr	r0, [pc, #60]	; (8006620 <pbuf_alloc_reference+0x64>)
 80065e2:	f00b fceb 	bl	8011fbc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80065e6:	2007      	movs	r0, #7
 80065e8:	f7ff fb70 	bl	8005ccc <memp_malloc>
 80065ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e00b      	b.n	8006610 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80065f8:	8879      	ldrh	r1, [r7, #2]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	883b      	ldrh	r3, [r7, #0]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	460b      	mov	r3, r1
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff feb7 	bl	800637c <pbuf_init_alloced_pbuf>
  return p;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	080136d4 	.word	0x080136d4
 800661c:	080137d8 	.word	0x080137d8
 8006620:	08013734 	.word	0x08013734

08006624 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	460b      	mov	r3, r1
 8006632:	81bb      	strh	r3, [r7, #12]
 8006634:	4613      	mov	r3, r2
 8006636:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800663c:	8a7b      	ldrh	r3, [r7, #18]
 800663e:	3303      	adds	r3, #3
 8006640:	f023 0203 	bic.w	r2, r3, #3
 8006644:	89bb      	ldrh	r3, [r7, #12]
 8006646:	441a      	add	r2, r3
 8006648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800664a:	429a      	cmp	r2, r3
 800664c:	d901      	bls.n	8006652 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	e018      	b.n	8006684 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006658:	8a7b      	ldrh	r3, [r7, #18]
 800665a:	3303      	adds	r3, #3
 800665c:	f023 0303 	bic.w	r3, r3, #3
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	4413      	add	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e001      	b.n	800666c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	89b9      	ldrh	r1, [r7, #12]
 8006670:	89ba      	ldrh	r2, [r7, #12]
 8006672:	2302      	movs	r3, #2
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	460b      	mov	r3, r1
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	f7ff fe7d 	bl	800637c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006682:	687b      	ldr	r3, [r7, #4]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <pbuf_realloc+0x20>
 800669e:	4b3a      	ldr	r3, [pc, #232]	; (8006788 <pbuf_realloc+0xfc>)
 80066a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80066a4:	4939      	ldr	r1, [pc, #228]	; (800678c <pbuf_realloc+0x100>)
 80066a6:	483a      	ldr	r0, [pc, #232]	; (8006790 <pbuf_realloc+0x104>)
 80066a8:	f00b fc88 	bl	8011fbc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	891b      	ldrh	r3, [r3, #8]
 80066b0:	887a      	ldrh	r2, [r7, #2]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d263      	bcs.n	800677e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	891a      	ldrh	r2, [r3, #8]
 80066ba:	887b      	ldrh	r3, [r7, #2]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80066c0:	887b      	ldrh	r3, [r7, #2]
 80066c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80066c8:	e018      	b.n	80066fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	895b      	ldrh	r3, [r3, #10]
 80066ce:	897a      	ldrh	r2, [r7, #10]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	891a      	ldrh	r2, [r3, #8]
 80066d8:	893b      	ldrh	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <pbuf_realloc+0x70>
 80066ee:	4b26      	ldr	r3, [pc, #152]	; (8006788 <pbuf_realloc+0xfc>)
 80066f0:	f240 12af 	movw	r2, #431	; 0x1af
 80066f4:	4927      	ldr	r1, [pc, #156]	; (8006794 <pbuf_realloc+0x108>)
 80066f6:	4826      	ldr	r0, [pc, #152]	; (8006790 <pbuf_realloc+0x104>)
 80066f8:	f00b fc60 	bl	8011fbc <iprintf>
  while (rem_len > q->len) {
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	895b      	ldrh	r3, [r3, #10]
 8006700:	897a      	ldrh	r2, [r7, #10]
 8006702:	429a      	cmp	r2, r3
 8006704:	d8e1      	bhi.n	80066ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	7b1b      	ldrb	r3, [r3, #12]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	2b00      	cmp	r3, #0
 8006710:	d121      	bne.n	8006756 <pbuf_realloc+0xca>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	895b      	ldrh	r3, [r3, #10]
 8006716:	897a      	ldrh	r2, [r7, #10]
 8006718:	429a      	cmp	r2, r3
 800671a:	d01c      	beq.n	8006756 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	7b5b      	ldrb	r3, [r3, #13]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d116      	bne.n	8006756 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29a      	uxth	r2, r3
 8006732:	897b      	ldrh	r3, [r7, #10]
 8006734:	4413      	add	r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7ff f85c 	bl	80057f8 <mem_trim>
 8006740:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <pbuf_realloc+0xca>
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <pbuf_realloc+0xfc>)
 800674a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800674e:	4912      	ldr	r1, [pc, #72]	; (8006798 <pbuf_realloc+0x10c>)
 8006750:	480f      	ldr	r0, [pc, #60]	; (8006790 <pbuf_realloc+0x104>)
 8006752:	f00b fc33 	bl	8011fbc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	897a      	ldrh	r2, [r7, #10]
 800675a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	895a      	ldrh	r2, [r3, #10]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f911 	bl	8006998 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e000      	b.n	8006780 <pbuf_realloc+0xf4>
    return;
 800677e:	bf00      	nop

}
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	080136d4 	.word	0x080136d4
 800678c:	080137ec 	.word	0x080137ec
 8006790:	08013734 	.word	0x08013734
 8006794:	08013804 	.word	0x08013804
 8006798:	0801381c 	.word	0x0801381c

0800679c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <pbuf_add_header_impl+0x22>
 80067b0:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <pbuf_add_header_impl+0xc4>)
 80067b2:	f240 12df 	movw	r2, #479	; 0x1df
 80067b6:	492b      	ldr	r1, [pc, #172]	; (8006864 <pbuf_add_header_impl+0xc8>)
 80067b8:	482b      	ldr	r0, [pc, #172]	; (8006868 <pbuf_add_header_impl+0xcc>)
 80067ba:	f00b fbff 	bl	8011fbc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <pbuf_add_header_impl+0x30>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ca:	d301      	bcc.n	80067d0 <pbuf_add_header_impl+0x34>
    return 1;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e043      	b.n	8006858 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <pbuf_add_header_impl+0x3e>
    return 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e03e      	b.n	8006858 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	891a      	ldrh	r2, [r3, #8]
 80067e2:	8a7b      	ldrh	r3, [r7, #18]
 80067e4:	4413      	add	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	8a7a      	ldrh	r2, [r7, #18]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d901      	bls.n	80067f2 <pbuf_add_header_impl+0x56>
    return 1;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e032      	b.n	8006858 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	7b1b      	ldrb	r3, [r3, #12]
 80067f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80067f8:	8a3b      	ldrh	r3, [r7, #16]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	425b      	negs	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3310      	adds	r3, #16
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	d20d      	bcs.n	8006834 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006818:	2301      	movs	r3, #1
 800681a:	e01d      	b.n	8006858 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	425b      	negs	r3, r3
 800682a:	4413      	add	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e001      	b.n	8006834 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006830:	2301      	movs	r3, #1
 8006832:	e011      	b.n	8006858 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	895a      	ldrh	r2, [r3, #10]
 800683e:	8a7b      	ldrh	r3, [r7, #18]
 8006840:	4413      	add	r3, r2
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	891a      	ldrh	r2, [r3, #8]
 800684c:	8a7b      	ldrh	r3, [r7, #18]
 800684e:	4413      	add	r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	811a      	strh	r2, [r3, #8]


  return 0;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	080136d4 	.word	0x080136d4
 8006864:	08013838 	.word	0x08013838
 8006868:	08013734 	.word	0x08013734

0800686c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006876:	2200      	movs	r2, #0
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff ff8e 	bl	800679c <pbuf_add_header_impl>
 8006880:	4603      	mov	r3, r0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <pbuf_remove_header+0x1e>
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <pbuf_remove_header+0x94>)
 800689e:	f240 224b 	movw	r2, #587	; 0x24b
 80068a2:	4920      	ldr	r1, [pc, #128]	; (8006924 <pbuf_remove_header+0x98>)
 80068a4:	4820      	ldr	r0, [pc, #128]	; (8006928 <pbuf_remove_header+0x9c>)
 80068a6:	f00b fb89 	bl	8011fbc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <pbuf_remove_header+0x2c>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b6:	d301      	bcc.n	80068bc <pbuf_remove_header+0x30>
    return 1;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e02c      	b.n	8006916 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <pbuf_remove_header+0x3a>
    return 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e027      	b.n	8006916 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	895b      	ldrh	r3, [r3, #10]
 80068ce:	89fa      	ldrh	r2, [r7, #14]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d908      	bls.n	80068e6 <pbuf_remove_header+0x5a>
 80068d4:	4b12      	ldr	r3, [pc, #72]	; (8006920 <pbuf_remove_header+0x94>)
 80068d6:	f240 2255 	movw	r2, #597	; 0x255
 80068da:	4914      	ldr	r1, [pc, #80]	; (800692c <pbuf_remove_header+0xa0>)
 80068dc:	4812      	ldr	r0, [pc, #72]	; (8006928 <pbuf_remove_header+0x9c>)
 80068de:	f00b fb6d 	bl	8011fbc <iprintf>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e017      	b.n	8006916 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	441a      	add	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	895a      	ldrh	r2, [r3, #10]
 80068fc:	89fb      	ldrh	r3, [r7, #14]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	891a      	ldrh	r2, [r3, #8]
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	080136d4 	.word	0x080136d4
 8006924:	08013838 	.word	0x08013838
 8006928:	08013734 	.word	0x08013734
 800692c:	08013844 	.word	0x08013844

08006930 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
 800693c:	4613      	mov	r3, r2
 800693e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da08      	bge.n	800695a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800694c:	425b      	negs	r3, r3
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff9b 	bl	800688c <pbuf_remove_header>
 8006956:	4603      	mov	r3, r0
 8006958:	e007      	b.n	800696a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800695a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800695e:	787a      	ldrb	r2, [r7, #1]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff ff1a 	bl	800679c <pbuf_add_header_impl>
 8006968:	4603      	mov	r3, r0
  }
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800697e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006982:	2201      	movs	r2, #1
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff ffd2 	bl	8006930 <pbuf_header_impl>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <pbuf_free+0x22>
 80069ac:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <pbuf_free+0xf8>)
 80069ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80069b2:	4938      	ldr	r1, [pc, #224]	; (8006a94 <pbuf_free+0xfc>)
 80069b4:	4838      	ldr	r0, [pc, #224]	; (8006a98 <pbuf_free+0x100>)
 80069b6:	f00b fb01 	bl	8011fbc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e063      	b.n	8006a86 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80069c2:	e05c      	b.n	8006a7e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7b9b      	ldrb	r3, [r3, #14]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <pbuf_free+0x42>
 80069cc:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <pbuf_free+0xf8>)
 80069ce:	f240 22f1 	movw	r2, #753	; 0x2f1
 80069d2:	4932      	ldr	r1, [pc, #200]	; (8006a9c <pbuf_free+0x104>)
 80069d4:	4830      	ldr	r0, [pc, #192]	; (8006a98 <pbuf_free+0x100>)
 80069d6:	f00b faf1 	bl	8011fbc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	7b9b      	ldrb	r3, [r3, #14]
 80069de:	3b01      	subs	r3, #1
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	739a      	strb	r2, [r3, #14]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7b9b      	ldrb	r3, [r3, #14]
 80069ea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80069ec:	7dbb      	ldrb	r3, [r7, #22]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d143      	bne.n	8006a7a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7b1b      	ldrb	r3, [r3, #12]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7b5b      	ldrb	r3, [r3, #13]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <pbuf_free+0x90>
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <pbuf_free+0xf8>)
 8006a1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006a20:	491f      	ldr	r1, [pc, #124]	; (8006aa0 <pbuf_free+0x108>)
 8006a22:	481d      	ldr	r0, [pc, #116]	; (8006a98 <pbuf_free+0x100>)
 8006a24:	f00b faca 	bl	8011fbc <iprintf>
        pc->custom_free_function(p);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	e01d      	b.n	8006a6e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d104      	bne.n	8006a42 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	2008      	movs	r0, #8
 8006a3c:	f7ff f992 	bl	8005d64 <memp_free>
 8006a40:	e015      	b.n	8006a6e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d104      	bne.n	8006a52 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	2007      	movs	r0, #7
 8006a4c:	f7ff f98a 	bl	8005d64 <memp_free>
 8006a50:	e00d      	b.n	8006a6e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <pbuf_free+0xc8>
          mem_free(p);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fe fe63 	bl	8005724 <mem_free>
 8006a5e:	e006      	b.n	8006a6e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <pbuf_free+0xf8>)
 8006a62:	f240 320f 	movw	r2, #783	; 0x30f
 8006a66:	490f      	ldr	r1, [pc, #60]	; (8006aa4 <pbuf_free+0x10c>)
 8006a68:	480b      	ldr	r0, [pc, #44]	; (8006a98 <pbuf_free+0x100>)
 8006a6a:	f00b faa7 	bl	8011fbc <iprintf>
        }
      }
      count++;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	3301      	adds	r3, #1
 8006a72:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	e001      	b.n	8006a7e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d19f      	bne.n	80069c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	080136d4 	.word	0x080136d4
 8006a94:	08013838 	.word	0x08013838
 8006a98:	08013734 	.word	0x08013734
 8006a9c:	08013864 	.word	0x08013864
 8006aa0:	0801387c 	.word	0x0801387c
 8006aa4:	080138a0 	.word	0x080138a0

08006aa8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006ab4:	e005      	b.n	8006ac2 <pbuf_clen+0x1a>
    ++len;
 8006ab6:	89fb      	ldrh	r3, [r7, #14]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f6      	bne.n	8006ab6 <pbuf_clen+0xe>
  }
  return len;
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d010      	beq.n	8006b08 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7b9b      	ldrb	r3, [r3, #14]
 8006aea:	3301      	adds	r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7b9b      	ldrb	r3, [r3, #14]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <pbuf_ref+0x30>
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <pbuf_ref+0x38>)
 8006afc:	f240 3242 	movw	r2, #834	; 0x342
 8006b00:	4904      	ldr	r1, [pc, #16]	; (8006b14 <pbuf_ref+0x3c>)
 8006b02:	4805      	ldr	r0, [pc, #20]	; (8006b18 <pbuf_ref+0x40>)
 8006b04:	f00b fa5a 	bl	8011fbc <iprintf>
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	080136d4 	.word	0x080136d4
 8006b14:	080138b4 	.word	0x080138b4
 8006b18:	08013734 	.word	0x08013734

08006b1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <pbuf_cat+0x16>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <pbuf_cat+0x26>
 8006b32:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <pbuf_cat+0x98>)
 8006b34:	f240 3259 	movw	r2, #857	; 0x359
 8006b38:	491f      	ldr	r1, [pc, #124]	; (8006bb8 <pbuf_cat+0x9c>)
 8006b3a:	4820      	ldr	r0, [pc, #128]	; (8006bbc <pbuf_cat+0xa0>)
 8006b3c:	f00b fa3e 	bl	8011fbc <iprintf>
 8006b40:	e034      	b.n	8006bac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e00a      	b.n	8006b5e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	891a      	ldrh	r2, [r3, #8]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	891b      	ldrh	r3, [r3, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	891a      	ldrh	r2, [r3, #8]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	895b      	ldrh	r3, [r3, #10]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d006      	beq.n	8006b80 <pbuf_cat+0x64>
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <pbuf_cat+0x98>)
 8006b74:	f240 3262 	movw	r2, #866	; 0x362
 8006b78:	4911      	ldr	r1, [pc, #68]	; (8006bc0 <pbuf_cat+0xa4>)
 8006b7a:	4810      	ldr	r0, [pc, #64]	; (8006bbc <pbuf_cat+0xa0>)
 8006b7c:	f00b fa1e 	bl	8011fbc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <pbuf_cat+0x7a>
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <pbuf_cat+0x98>)
 8006b8a:	f240 3263 	movw	r2, #867	; 0x363
 8006b8e:	490d      	ldr	r1, [pc, #52]	; (8006bc4 <pbuf_cat+0xa8>)
 8006b90:	480a      	ldr	r0, [pc, #40]	; (8006bbc <pbuf_cat+0xa0>)
 8006b92:	f00b fa13 	bl	8011fbc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	891a      	ldrh	r2, [r3, #8]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	891b      	ldrh	r3, [r3, #8]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	080136d4 	.word	0x080136d4
 8006bb8:	080138c8 	.word	0x080138c8
 8006bbc:	08013734 	.word	0x08013734
 8006bc0:	08013900 	.word	0x08013900
 8006bc4:	08013930 	.word	0x08013930

08006bc8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ffa1 	bl	8006b1c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006bda:	6838      	ldr	r0, [r7, #0]
 8006bdc:	f7ff ff7c 	bl	8006ad8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <pbuf_copy+0x2a>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <pbuf_copy+0x2a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	891a      	ldrh	r2, [r3, #8]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	891b      	ldrh	r3, [r3, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d209      	bcs.n	8006c26 <pbuf_copy+0x3e>
 8006c12:	4b57      	ldr	r3, [pc, #348]	; (8006d70 <pbuf_copy+0x188>)
 8006c14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006c18:	4956      	ldr	r1, [pc, #344]	; (8006d74 <pbuf_copy+0x18c>)
 8006c1a:	4857      	ldr	r0, [pc, #348]	; (8006d78 <pbuf_copy+0x190>)
 8006c1c:	f00b f9ce 	bl	8011fbc <iprintf>
 8006c20:	f06f 030f 	mvn.w	r3, #15
 8006c24:	e09f      	b.n	8006d66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	895b      	ldrh	r3, [r3, #10]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	895b      	ldrh	r3, [r3, #10]
 8006c34:	4619      	mov	r1, r3
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1acb      	subs	r3, r1, r3
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d306      	bcc.n	8006c4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	895b      	ldrh	r3, [r3, #10]
 8006c42:	461a      	mov	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e005      	b.n	8006c58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	895b      	ldrh	r3, [r3, #10]
 8006c50:	461a      	mov	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	18d0      	adds	r0, r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f00b f990 	bl	8011f90 <memcpy>
    offset_to += len;
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	895b      	ldrh	r3, [r3, #10]
 8006c84:	461a      	mov	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d906      	bls.n	8006c9a <pbuf_copy+0xb2>
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <pbuf_copy+0x188>)
 8006c8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006c92:	493a      	ldr	r1, [pc, #232]	; (8006d7c <pbuf_copy+0x194>)
 8006c94:	4838      	ldr	r0, [pc, #224]	; (8006d78 <pbuf_copy+0x190>)
 8006c96:	f00b f991 	bl	8011fbc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	895b      	ldrh	r3, [r3, #10]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d906      	bls.n	8006cb4 <pbuf_copy+0xcc>
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <pbuf_copy+0x188>)
 8006ca8:	f240 32da 	movw	r2, #986	; 0x3da
 8006cac:	4934      	ldr	r1, [pc, #208]	; (8006d80 <pbuf_copy+0x198>)
 8006cae:	4832      	ldr	r0, [pc, #200]	; (8006d78 <pbuf_copy+0x190>)
 8006cb0:	f00b f984 	bl	8011fbc <iprintf>
    if (offset_from >= p_from->len) {
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	895b      	ldrh	r3, [r3, #10]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d304      	bcc.n	8006cca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	895b      	ldrh	r3, [r3, #10]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d114      	bne.n	8006d00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <pbuf_copy+0x118>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <pbuf_copy+0x118>
 8006cec:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <pbuf_copy+0x188>)
 8006cee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006cf2:	4924      	ldr	r1, [pc, #144]	; (8006d84 <pbuf_copy+0x19c>)
 8006cf4:	4820      	ldr	r0, [pc, #128]	; (8006d78 <pbuf_copy+0x190>)
 8006cf6:	f00b f961 	bl	8011fbc <iprintf>
 8006cfa:	f06f 030f 	mvn.w	r3, #15
 8006cfe:	e032      	b.n	8006d66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <pbuf_copy+0x146>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	895a      	ldrh	r2, [r3, #10]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	891b      	ldrh	r3, [r3, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d10d      	bne.n	8006d2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <pbuf_copy+0x146>
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <pbuf_copy+0x188>)
 8006d1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006d20:	4919      	ldr	r1, [pc, #100]	; (8006d88 <pbuf_copy+0x1a0>)
 8006d22:	4815      	ldr	r0, [pc, #84]	; (8006d78 <pbuf_copy+0x190>)
 8006d24:	f00b f94a 	bl	8011fbc <iprintf>
 8006d28:	f06f 0305 	mvn.w	r3, #5
 8006d2c:	e01b      	b.n	8006d66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <pbuf_copy+0x174>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	895a      	ldrh	r2, [r3, #10]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	891b      	ldrh	r3, [r3, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d10d      	bne.n	8006d5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <pbuf_copy+0x174>
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <pbuf_copy+0x188>)
 8006d4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006d4e:	490e      	ldr	r1, [pc, #56]	; (8006d88 <pbuf_copy+0x1a0>)
 8006d50:	4809      	ldr	r0, [pc, #36]	; (8006d78 <pbuf_copy+0x190>)
 8006d52:	f00b f933 	bl	8011fbc <iprintf>
 8006d56:	f06f 0305 	mvn.w	r3, #5
 8006d5a:	e004      	b.n	8006d66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af61 	bne.w	8006c26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	080136d4 	.word	0x080136d4
 8006d74:	0801397c 	.word	0x0801397c
 8006d78:	08013734 	.word	0x08013734
 8006d7c:	080139ac 	.word	0x080139ac
 8006d80:	080139c4 	.word	0x080139c4
 8006d84:	080139e0 	.word	0x080139e0
 8006d88:	080139f0 	.word	0x080139f0

08006d8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4611      	mov	r1, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <pbuf_copy_partial+0x36>
 8006db0:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <pbuf_copy_partial+0xd4>)
 8006db2:	f240 420a 	movw	r2, #1034	; 0x40a
 8006db6:	492b      	ldr	r1, [pc, #172]	; (8006e64 <pbuf_copy_partial+0xd8>)
 8006db8:	482b      	ldr	r0, [pc, #172]	; (8006e68 <pbuf_copy_partial+0xdc>)
 8006dba:	f00b f8ff 	bl	8011fbc <iprintf>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e04a      	b.n	8006e58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d108      	bne.n	8006dda <pbuf_copy_partial+0x4e>
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <pbuf_copy_partial+0xd4>)
 8006dca:	f240 420b 	movw	r2, #1035	; 0x40b
 8006dce:	4927      	ldr	r1, [pc, #156]	; (8006e6c <pbuf_copy_partial+0xe0>)
 8006dd0:	4825      	ldr	r0, [pc, #148]	; (8006e68 <pbuf_copy_partial+0xdc>)
 8006dd2:	f00b f8f3 	bl	8011fbc <iprintf>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e03e      	b.n	8006e58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	e034      	b.n	8006e4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006de0:	88bb      	ldrh	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <pbuf_copy_partial+0x70>
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	895b      	ldrh	r3, [r3, #10]
 8006dea:	88ba      	ldrh	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d305      	bcc.n	8006dfc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	895b      	ldrh	r3, [r3, #10]
 8006df4:	88ba      	ldrh	r2, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	80bb      	strh	r3, [r7, #4]
 8006dfa:	e023      	b.n	8006e44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	895a      	ldrh	r2, [r3, #10]
 8006e00:	88bb      	ldrh	r3, [r7, #4]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006e06:	8b3a      	ldrh	r2, [r7, #24]
 8006e08:	88fb      	ldrh	r3, [r7, #6]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d901      	bls.n	8006e12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006e12:	8b7b      	ldrh	r3, [r7, #26]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	18d0      	adds	r0, r2, r3
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	88bb      	ldrh	r3, [r7, #4]
 8006e1e:	4413      	add	r3, r2
 8006e20:	8b3a      	ldrh	r2, [r7, #24]
 8006e22:	4619      	mov	r1, r3
 8006e24:	f00b f8b4 	bl	8011f90 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006e28:	8afa      	ldrh	r2, [r7, #22]
 8006e2a:	8b3b      	ldrh	r3, [r7, #24]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006e30:	8b7a      	ldrh	r2, [r7, #26]
 8006e32:	8b3b      	ldrh	r3, [r7, #24]
 8006e34:	4413      	add	r3, r2
 8006e36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	8b3b      	ldrh	r3, [r7, #24]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <pbuf_copy_partial+0xca>
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1c4      	bne.n	8006de0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006e56:	8afb      	ldrh	r3, [r7, #22]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	080136d4 	.word	0x080136d4
 8006e64:	08013a1c 	.word	0x08013a1c
 8006e68:	08013734 	.word	0x08013734
 8006e6c:	08013a3c 	.word	0x08013a3c

08006e70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	603a      	str	r2, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	8919      	ldrh	r1, [r3, #8]
 8006e84:	88ba      	ldrh	r2, [r7, #4]
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff faa1 	bl	80063d0 <pbuf_alloc>
 8006e8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <pbuf_clone+0x2a>
    return NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e011      	b.n	8006ebe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fea3 	bl	8006be8 <pbuf_copy>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006ea6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d006      	beq.n	8006ebc <pbuf_clone+0x4c>
 8006eae:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <pbuf_clone+0x58>)
 8006eb0:	f240 5224 	movw	r2, #1316	; 0x524
 8006eb4:	4905      	ldr	r1, [pc, #20]	; (8006ecc <pbuf_clone+0x5c>)
 8006eb6:	4806      	ldr	r0, [pc, #24]	; (8006ed0 <pbuf_clone+0x60>)
 8006eb8:	f00b f880 	bl	8011fbc <iprintf>
  return q;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	080136d4 	.word	0x080136d4
 8006ecc:	08013b48 	.word	0x08013b48
 8006ed0:	08013734 	.word	0x08013734

08006ed4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006ed8:	f00b f888 	bl	8011fec <rand>
 8006edc:	4603      	mov	r3, r0
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	4b01      	ldr	r3, [pc, #4]	; (8006ef4 <tcp_init+0x20>)
 8006eee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	2000000a 	.word	0x2000000a

08006ef8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7d1b      	ldrb	r3, [r3, #20]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <tcp_free+0x1c>
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <tcp_free+0x2c>)
 8006f0a:	22d4      	movs	r2, #212	; 0xd4
 8006f0c:	4906      	ldr	r1, [pc, #24]	; (8006f28 <tcp_free+0x30>)
 8006f0e:	4807      	ldr	r0, [pc, #28]	; (8006f2c <tcp_free+0x34>)
 8006f10:	f00b f854 	bl	8011fbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	2001      	movs	r0, #1
 8006f18:	f7fe ff24 	bl	8005d64 <memp_free>
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	08013bd4 	.word	0x08013bd4
 8006f28:	08013c04 	.word	0x08013c04
 8006f2c:	08013c18 	.word	0x08013c18

08006f30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d105      	bne.n	8006f4c <tcp_free_listen+0x1c>
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <tcp_free_listen+0x2c>)
 8006f42:	22df      	movs	r2, #223	; 0xdf
 8006f44:	4906      	ldr	r1, [pc, #24]	; (8006f60 <tcp_free_listen+0x30>)
 8006f46:	4807      	ldr	r0, [pc, #28]	; (8006f64 <tcp_free_listen+0x34>)
 8006f48:	f00b f838 	bl	8011fbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	2002      	movs	r0, #2
 8006f50:	f7fe ff08 	bl	8005d64 <memp_free>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	08013bd4 	.word	0x08013bd4
 8006f60:	08013c40 	.word	0x08013c40
 8006f64:	08013c18 	.word	0x08013c18

08006f68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006f6c:	f001 f85c 	bl	8008028 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006f70:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <tcp_tmr+0x28>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <tcp_tmr+0x28>)
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <tcp_tmr+0x28>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006f88:	f000 fd0e 	bl	80079a8 <tcp_slowtmr>
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20006841 	.word	0x20006841

08006f94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <tcp_remove_listener+0x1c>
 8006fa4:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <tcp_remove_listener+0x48>)
 8006fa6:	22ff      	movs	r2, #255	; 0xff
 8006fa8:	490d      	ldr	r1, [pc, #52]	; (8006fe0 <tcp_remove_listener+0x4c>)
 8006faa:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <tcp_remove_listener+0x50>)
 8006fac:	f00b f806 	bl	8011fbc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e00a      	b.n	8006fcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d102      	bne.n	8006fc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f1      	bne.n	8006fb6 <tcp_remove_listener+0x22>
    }
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	08013bd4 	.word	0x08013bd4
 8006fe0:	08013c5c 	.word	0x08013c5c
 8006fe4:	08013c18 	.word	0x08013c18

08006fe8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <tcp_listen_closed+0x1c>
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <tcp_listen_closed+0x60>)
 8006ff8:	f240 1211 	movw	r2, #273	; 0x111
 8006ffc:	4913      	ldr	r1, [pc, #76]	; (800704c <tcp_listen_closed+0x64>)
 8006ffe:	4814      	ldr	r0, [pc, #80]	; (8007050 <tcp_listen_closed+0x68>)
 8007000:	f00a ffdc 	bl	8011fbc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d006      	beq.n	800701a <tcp_listen_closed+0x32>
 800700c:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <tcp_listen_closed+0x60>)
 800700e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007012:	4910      	ldr	r1, [pc, #64]	; (8007054 <tcp_listen_closed+0x6c>)
 8007014:	480e      	ldr	r0, [pc, #56]	; (8007050 <tcp_listen_closed+0x68>)
 8007016:	f00a ffd1 	bl	8011fbc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800701a:	2301      	movs	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e00b      	b.n	8007038 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007020:	4a0d      	ldr	r2, [pc, #52]	; (8007058 <tcp_listen_closed+0x70>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ffb1 	bl	8006f94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d9f0      	bls.n	8007020 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	08013bd4 	.word	0x08013bd4
 800704c:	08013c84 	.word	0x08013c84
 8007050:	08013c18 	.word	0x08013c18
 8007054:	08013c90 	.word	0x08013c90
 8007058:	08015f48 	.word	0x08015f48

0800705c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af04      	add	r7, sp, #16
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <tcp_close_shutdown+0x20>
 800706e:	4b63      	ldr	r3, [pc, #396]	; (80071fc <tcp_close_shutdown+0x1a0>)
 8007070:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007074:	4962      	ldr	r1, [pc, #392]	; (8007200 <tcp_close_shutdown+0x1a4>)
 8007076:	4863      	ldr	r0, [pc, #396]	; (8007204 <tcp_close_shutdown+0x1a8>)
 8007078:	f00a ffa0 	bl	8011fbc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d066      	beq.n	8007150 <tcp_close_shutdown+0xf4>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7d1b      	ldrb	r3, [r3, #20]
 8007086:	2b04      	cmp	r3, #4
 8007088:	d003      	beq.n	8007092 <tcp_close_shutdown+0x36>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7d1b      	ldrb	r3, [r3, #20]
 800708e:	2b07      	cmp	r3, #7
 8007090:	d15e      	bne.n	8007150 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <tcp_close_shutdown+0x48>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80070a2:	d055      	beq.n	8007150 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8b5b      	ldrh	r3, [r3, #26]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <tcp_close_shutdown+0x62>
 80070b0:	4b52      	ldr	r3, [pc, #328]	; (80071fc <tcp_close_shutdown+0x1a0>)
 80070b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80070b6:	4954      	ldr	r1, [pc, #336]	; (8007208 <tcp_close_shutdown+0x1ac>)
 80070b8:	4852      	ldr	r0, [pc, #328]	; (8007204 <tcp_close_shutdown+0x1a8>)
 80070ba:	f00a ff7f 	bl	8011fbc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80070c6:	687d      	ldr	r5, [r7, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	8ad2      	ldrh	r2, [r2, #22]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	8b09      	ldrh	r1, [r1, #24]
 80070d4:	9102      	str	r1, [sp, #8]
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	462b      	mov	r3, r5
 80070dc:	4622      	mov	r2, r4
 80070de:	4601      	mov	r1, r0
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f005 fd89 	bl	800cbf8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fb66 	bl	80087b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80070ec:	4b47      	ldr	r3, [pc, #284]	; (800720c <tcp_close_shutdown+0x1b0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d105      	bne.n	8007102 <tcp_close_shutdown+0xa6>
 80070f6:	4b45      	ldr	r3, [pc, #276]	; (800720c <tcp_close_shutdown+0x1b0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a43      	ldr	r2, [pc, #268]	; (800720c <tcp_close_shutdown+0x1b0>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	e013      	b.n	800712a <tcp_close_shutdown+0xce>
 8007102:	4b42      	ldr	r3, [pc, #264]	; (800720c <tcp_close_shutdown+0x1b0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e00c      	b.n	8007124 <tcp_close_shutdown+0xc8>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d104      	bne.n	800711e <tcp_close_shutdown+0xc2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e005      	b.n	800712a <tcp_close_shutdown+0xce>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1ef      	bne.n	800710a <tcp_close_shutdown+0xae>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	4b37      	ldr	r3, [pc, #220]	; (8007210 <tcp_close_shutdown+0x1b4>)
 8007132:	2201      	movs	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <tcp_close_shutdown+0x1b8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d102      	bne.n	8007146 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007140:	f003 fffe 	bl	800b140 <tcp_trigger_input_pcb_close>
 8007144:	e002      	b.n	800714c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fed6 	bl	8006ef8 <tcp_free>
      }
      return ERR_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e050      	b.n	80071f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7d1b      	ldrb	r3, [r3, #20]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d03b      	beq.n	80071d0 <tcp_close_shutdown+0x174>
 8007158:	2b02      	cmp	r3, #2
 800715a:	dc44      	bgt.n	80071e6 <tcp_close_shutdown+0x18a>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <tcp_close_shutdown+0x10a>
 8007160:	2b01      	cmp	r3, #1
 8007162:	d02a      	beq.n	80071ba <tcp_close_shutdown+0x15e>
 8007164:	e03f      	b.n	80071e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8adb      	ldrh	r3, [r3, #22]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d021      	beq.n	80071b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800716e:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <tcp_close_shutdown+0x1bc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d105      	bne.n	8007184 <tcp_close_shutdown+0x128>
 8007178:	4b27      	ldr	r3, [pc, #156]	; (8007218 <tcp_close_shutdown+0x1bc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <tcp_close_shutdown+0x1bc>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e013      	b.n	80071ac <tcp_close_shutdown+0x150>
 8007184:	4b24      	ldr	r3, [pc, #144]	; (8007218 <tcp_close_shutdown+0x1bc>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	e00c      	b.n	80071a6 <tcp_close_shutdown+0x14a>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d104      	bne.n	80071a0 <tcp_close_shutdown+0x144>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	e005      	b.n	80071ac <tcp_close_shutdown+0x150>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ef      	bne.n	800718c <tcp_close_shutdown+0x130>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fea0 	bl	8006ef8 <tcp_free>
      break;
 80071b8:	e01a      	b.n	80071f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ff14 	bl	8006fe8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4816      	ldr	r0, [pc, #88]	; (800721c <tcp_close_shutdown+0x1c0>)
 80071c4:	f001 fb48 	bl	8008858 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff feb1 	bl	8006f30 <tcp_free_listen>
      break;
 80071ce:	e00f      	b.n	80071f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	480e      	ldr	r0, [pc, #56]	; (800720c <tcp_close_shutdown+0x1b0>)
 80071d4:	f001 fb40 	bl	8008858 <tcp_pcb_remove>
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <tcp_close_shutdown+0x1b4>)
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fe8a 	bl	8006ef8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80071e4:	e004      	b.n	80071f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f81a 	bl	8007220 <tcp_close_shutdown_fin>
 80071ec:	4603      	mov	r3, r0
 80071ee:	e000      	b.n	80071f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bdb0      	pop	{r4, r5, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	08013bd4 	.word	0x08013bd4
 8007200:	08013ca8 	.word	0x08013ca8
 8007204:	08013c18 	.word	0x08013c18
 8007208:	08013cc8 	.word	0x08013cc8
 800720c:	20006838 	.word	0x20006838
 8007210:	20006840 	.word	0x20006840
 8007214:	20006878 	.word	0x20006878
 8007218:	20006830 	.word	0x20006830
 800721c:	20006834 	.word	0x20006834

08007220 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <tcp_close_shutdown_fin+0x1c>
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <tcp_close_shutdown_fin+0xc8>)
 8007230:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007234:	492d      	ldr	r1, [pc, #180]	; (80072ec <tcp_close_shutdown_fin+0xcc>)
 8007236:	482e      	ldr	r0, [pc, #184]	; (80072f0 <tcp_close_shutdown_fin+0xd0>)
 8007238:	f00a fec0 	bl	8011fbc <iprintf>

  switch (pcb->state) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7d1b      	ldrb	r3, [r3, #20]
 8007240:	2b07      	cmp	r3, #7
 8007242:	d020      	beq.n	8007286 <tcp_close_shutdown_fin+0x66>
 8007244:	2b07      	cmp	r3, #7
 8007246:	dc2b      	bgt.n	80072a0 <tcp_close_shutdown_fin+0x80>
 8007248:	2b03      	cmp	r3, #3
 800724a:	d002      	beq.n	8007252 <tcp_close_shutdown_fin+0x32>
 800724c:	2b04      	cmp	r3, #4
 800724e:	d00d      	beq.n	800726c <tcp_close_shutdown_fin+0x4c>
 8007250:	e026      	b.n	80072a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f004 fdde 	bl	800be14 <tcp_send_fin>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800725c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11f      	bne.n	80072a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2205      	movs	r2, #5
 8007268:	751a      	strb	r2, [r3, #20]
      }
      break;
 800726a:	e01b      	b.n	80072a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f004 fdd1 	bl	800be14 <tcp_send_fin>
 8007272:	4603      	mov	r3, r0
 8007274:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d114      	bne.n	80072a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2205      	movs	r2, #5
 8007282:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007284:	e010      	b.n	80072a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f004 fdc4 	bl	800be14 <tcp_send_fin>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d109      	bne.n	80072ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2209      	movs	r2, #9
 800729c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800729e:	e005      	b.n	80072ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e01c      	b.n	80072de <tcp_close_shutdown_fin+0xbe>
      break;
 80072a4:	bf00      	nop
 80072a6:	e002      	b.n	80072ae <tcp_close_shutdown_fin+0x8e>
      break;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <tcp_close_shutdown_fin+0x8e>
      break;
 80072ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80072ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f004 feea 	bl	800c090 <tcp_output>
 80072bc:	e00d      	b.n	80072da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80072be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d108      	bne.n	80072da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8b5b      	ldrh	r3, [r3, #26]
 80072cc:	f043 0308 	orr.w	r3, r3, #8
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	e001      	b.n	80072de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80072da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	08013bd4 	.word	0x08013bd4
 80072ec:	08013c84 	.word	0x08013c84
 80072f0:	08013c18 	.word	0x08013c18

080072f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <tcp_close+0x22>
 8007302:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <tcp_close+0x4c>)
 8007304:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007308:	490e      	ldr	r1, [pc, #56]	; (8007344 <tcp_close+0x50>)
 800730a:	480f      	ldr	r0, [pc, #60]	; (8007348 <tcp_close+0x54>)
 800730c:	f00a fe56 	bl	8011fbc <iprintf>
 8007310:	f06f 030f 	mvn.w	r3, #15
 8007314:	e00f      	b.n	8007336 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7d1b      	ldrb	r3, [r3, #20]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d006      	beq.n	800732c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8b5b      	ldrh	r3, [r3, #26]
 8007322:	f043 0310 	orr.w	r3, r3, #16
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800732c:	2101      	movs	r1, #1
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe94 	bl	800705c <tcp_close_shutdown>
 8007334:	4603      	mov	r3, r0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	08013bd4 	.word	0x08013bd4
 8007344:	08013ce4 	.word	0x08013ce4
 8007348:	08013c18 	.word	0x08013c18

0800734c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	; 0x38
 8007350:	af04      	add	r7, sp, #16
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d107      	bne.n	800736c <tcp_abandon+0x20>
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <tcp_abandon+0x15c>)
 800735e:	f240 223d 	movw	r2, #573	; 0x23d
 8007362:	4952      	ldr	r1, [pc, #328]	; (80074ac <tcp_abandon+0x160>)
 8007364:	4852      	ldr	r0, [pc, #328]	; (80074b0 <tcp_abandon+0x164>)
 8007366:	f00a fe29 	bl	8011fbc <iprintf>
 800736a:	e099      	b.n	80074a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7d1b      	ldrb	r3, [r3, #20]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d106      	bne.n	8007382 <tcp_abandon+0x36>
 8007374:	4b4c      	ldr	r3, [pc, #304]	; (80074a8 <tcp_abandon+0x15c>)
 8007376:	f44f 7210 	mov.w	r2, #576	; 0x240
 800737a:	494e      	ldr	r1, [pc, #312]	; (80074b4 <tcp_abandon+0x168>)
 800737c:	484c      	ldr	r0, [pc, #304]	; (80074b0 <tcp_abandon+0x164>)
 800737e:	f00a fe1d 	bl	8011fbc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	7d1b      	ldrb	r3, [r3, #20]
 8007386:	2b0a      	cmp	r3, #10
 8007388:	d107      	bne.n	800739a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	484a      	ldr	r0, [pc, #296]	; (80074b8 <tcp_abandon+0x16c>)
 800738e:	f001 fa63 	bl	8008858 <tcp_pcb_remove>
    tcp_free(pcb);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fdb0 	bl	8006ef8 <tcp_free>
 8007398:	e082      	b.n	80074a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7d1b      	ldrb	r3, [r3, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d126      	bne.n	8007412 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8adb      	ldrh	r3, [r3, #22]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02e      	beq.n	800742a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <tcp_abandon+0x170>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d105      	bne.n	80073e2 <tcp_abandon+0x96>
 80073d6:	4b39      	ldr	r3, [pc, #228]	; (80074bc <tcp_abandon+0x170>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a37      	ldr	r2, [pc, #220]	; (80074bc <tcp_abandon+0x170>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e013      	b.n	800740a <tcp_abandon+0xbe>
 80073e2:	4b36      	ldr	r3, [pc, #216]	; (80074bc <tcp_abandon+0x170>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	e00c      	b.n	8007404 <tcp_abandon+0xb8>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d104      	bne.n	80073fe <tcp_abandon+0xb2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	e005      	b.n	800740a <tcp_abandon+0xbe>
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ef      	bne.n	80073ea <tcp_abandon+0x9e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	60da      	str	r2, [r3, #12]
 8007410:	e00b      	b.n	800742a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8adb      	ldrh	r3, [r3, #22]
 800741a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4828      	ldr	r0, [pc, #160]	; (80074c0 <tcp_abandon+0x174>)
 8007420:	f001 fa1a 	bl	8008858 <tcp_pcb_remove>
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <tcp_abandon+0x178>)
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fed6 	bl	80081e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fecd 	bl	80081e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fec4 	bl	80081e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	8b12      	ldrh	r2, [r2, #24]
 8007470:	9202      	str	r2, [sp, #8]
 8007472:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007474:	9201      	str	r2, [sp, #4]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	460b      	mov	r3, r1
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f005 fbba 	bl	800cbf8 <tcp_rst>
    }
    last_state = pcb->state;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7d1b      	ldrb	r3, [r3, #20]
 8007488:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fd34 	bl	8006ef8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <tcp_abandon+0x154>
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f06f 010c 	mvn.w	r1, #12
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	4798      	blx	r3
  }
}
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	08013bd4 	.word	0x08013bd4
 80074ac:	08013d18 	.word	0x08013d18
 80074b0:	08013c18 	.word	0x08013c18
 80074b4:	08013d34 	.word	0x08013d34
 80074b8:	2000683c 	.word	0x2000683c
 80074bc:	20006830 	.word	0x20006830
 80074c0:	20006838 	.word	0x20006838
 80074c4:	20006840 	.word	0x20006840

080074c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80074d0:	2101      	movs	r1, #1
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff ff3a 	bl	800734c <tcp_abandon>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80074ee:	2304      	movs	r3, #4
 80074f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80074f8:	4b3e      	ldr	r3, [pc, #248]	; (80075f4 <tcp_bind+0x114>)
 80074fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <tcp_bind+0x36>
 8007502:	4b3d      	ldr	r3, [pc, #244]	; (80075f8 <tcp_bind+0x118>)
 8007504:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007508:	493c      	ldr	r1, [pc, #240]	; (80075fc <tcp_bind+0x11c>)
 800750a:	483d      	ldr	r0, [pc, #244]	; (8007600 <tcp_bind+0x120>)
 800750c:	f00a fd56 	bl	8011fbc <iprintf>
 8007510:	f06f 030f 	mvn.w	r3, #15
 8007514:	e06a      	b.n	80075ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <tcp_bind+0x52>
 800751e:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <tcp_bind+0x118>)
 8007520:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007524:	4937      	ldr	r1, [pc, #220]	; (8007604 <tcp_bind+0x124>)
 8007526:	4836      	ldr	r0, [pc, #216]	; (8007600 <tcp_bind+0x120>)
 8007528:	f00a fd48 	bl	8011fbc <iprintf>
 800752c:	f06f 0305 	mvn.w	r3, #5
 8007530:	e05c      	b.n	80075ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <tcp_bind+0x6c>
    port = tcp_new_port();
 8007538:	f000 f9f0 	bl	800791c <tcp_new_port>
 800753c:	4603      	mov	r3, r0
 800753e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d135      	bne.n	80075b2 <tcp_bind+0xd2>
      return ERR_BUF;
 8007546:	f06f 0301 	mvn.w	r3, #1
 800754a:	e04f      	b.n	80075ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e02b      	b.n	80075aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007552:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <tcp_bind+0x128>)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e01e      	b.n	800759e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	8adb      	ldrh	r3, [r3, #22]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	429a      	cmp	r2, r3
 8007568:	d116      	bne.n	8007598 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800756a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800756c:	2b00      	cmp	r3, #0
 800756e:	d010      	beq.n	8007592 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <tcp_bind+0xb2>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800758e:	429a      	cmp	r2, r3
 8007590:	d102      	bne.n	8007598 <tcp_bind+0xb8>
              return ERR_USE;
 8007592:	f06f 0307 	mvn.w	r3, #7
 8007596:	e029      	b.n	80075ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1dd      	bne.n	8007560 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	dbcf      	blt.n	8007552 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00c      	beq.n	80075d2 <tcp_bind+0xf2>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <tcp_bind+0xec>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	e000      	b.n	80075ce <tcp_bind+0xee>
 80075cc:	2300      	movs	r3, #0
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	88fa      	ldrh	r2, [r7, #6]
 80075d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <tcp_bind+0x12c>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <tcp_bind+0x12c>)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	f005 fcc9 	bl	800cf7c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	08015f80 	.word	0x08015f80
 80075f8:	08013bd4 	.word	0x08013bd4
 80075fc:	08013d68 	.word	0x08013d68
 8007600:	08013c18 	.word	0x08013c18
 8007604:	08013d80 	.word	0x08013d80
 8007608:	08015f48 	.word	0x08015f48
 800760c:	20006830 	.word	0x20006830

08007610 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <tcp_accept_null+0x22>
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <tcp_accept_null+0x34>)
 8007626:	f240 320f 	movw	r2, #783	; 0x30f
 800762a:	4907      	ldr	r1, [pc, #28]	; (8007648 <tcp_accept_null+0x38>)
 800762c:	4807      	ldr	r0, [pc, #28]	; (800764c <tcp_accept_null+0x3c>)
 800762e:	f00a fcc5 	bl	8011fbc <iprintf>

  tcp_abort(pcb);
 8007632:	68b8      	ldr	r0, [r7, #8]
 8007634:	f7ff ff48 	bl	80074c8 <tcp_abort>

  return ERR_ABRT;
 8007638:	f06f 030c 	mvn.w	r3, #12
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	08013bd4 	.word	0x08013bd4
 8007648:	08013da8 	.word	0x08013da8
 800764c:	08013c18 	.word	0x08013c18

08007650 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	2200      	movs	r2, #0
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f806 	bl	8007674 <tcp_listen_with_backlog_and_err>
 8007668:	4603      	mov	r3, r0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	460b      	mov	r3, r1
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <tcp_listen_with_backlog_and_err+0x2c>
 800768c:	4b47      	ldr	r3, [pc, #284]	; (80077ac <tcp_listen_with_backlog_and_err+0x138>)
 800768e:	f240 3259 	movw	r2, #857	; 0x359
 8007692:	4947      	ldr	r1, [pc, #284]	; (80077b0 <tcp_listen_with_backlog_and_err+0x13c>)
 8007694:	4847      	ldr	r0, [pc, #284]	; (80077b4 <tcp_listen_with_backlog_and_err+0x140>)
 8007696:	f00a fc91 	bl	8011fbc <iprintf>
 800769a:	23f0      	movs	r3, #240	; 0xf0
 800769c:	76fb      	strb	r3, [r7, #27]
 800769e:	e079      	b.n	8007794 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	7d1b      	ldrb	r3, [r3, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <tcp_listen_with_backlog_and_err+0x48>
 80076a8:	4b40      	ldr	r3, [pc, #256]	; (80077ac <tcp_listen_with_backlog_and_err+0x138>)
 80076aa:	f240 325a 	movw	r2, #858	; 0x35a
 80076ae:	4942      	ldr	r1, [pc, #264]	; (80077b8 <tcp_listen_with_backlog_and_err+0x144>)
 80076b0:	4840      	ldr	r0, [pc, #256]	; (80077b4 <tcp_listen_with_backlog_and_err+0x140>)
 80076b2:	f00a fc83 	bl	8011fbc <iprintf>
 80076b6:	23f1      	movs	r3, #241	; 0xf1
 80076b8:	76fb      	strb	r3, [r7, #27]
 80076ba:	e06b      	b.n	8007794 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	7d1b      	ldrb	r3, [r3, #20]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d104      	bne.n	80076ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80076c8:	23f7      	movs	r3, #247	; 0xf7
 80076ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80076cc:	e062      	b.n	8007794 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80076ce:	2002      	movs	r0, #2
 80076d0:	f7fe fafc 	bl	8005ccc <memp_malloc>
 80076d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80076dc:	23ff      	movs	r3, #255	; 0xff
 80076de:	76fb      	strb	r3, [r7, #27]
    goto done;
 80076e0:	e058      	b.n	8007794 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8ada      	ldrh	r2, [r3, #22]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2201      	movs	r2, #1
 80076f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7d5a      	ldrb	r2, [r3, #21]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7a5a      	ldrb	r2, [r3, #9]
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2200      	movs	r2, #0
 800770c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	7ada      	ldrb	r2, [r3, #11]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	7a9a      	ldrb	r2, [r3, #10]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8adb      	ldrh	r3, [r3, #22]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d021      	beq.n	8007772 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <tcp_listen_with_backlog_and_err+0x148>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	429a      	cmp	r2, r3
 8007736:	d105      	bne.n	8007744 <tcp_listen_with_backlog_and_err+0xd0>
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <tcp_listen_with_backlog_and_err+0x148>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	4a1f      	ldr	r2, [pc, #124]	; (80077bc <tcp_listen_with_backlog_and_err+0x148>)
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e013      	b.n	800776c <tcp_listen_with_backlog_and_err+0xf8>
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <tcp_listen_with_backlog_and_err+0x148>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e00c      	b.n	8007766 <tcp_listen_with_backlog_and_err+0xf2>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	429a      	cmp	r2, r3
 8007754:	d104      	bne.n	8007760 <tcp_listen_with_backlog_and_err+0xec>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	60da      	str	r2, [r3, #12]
 800775e:	e005      	b.n	800776c <tcp_listen_with_backlog_and_err+0xf8>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ef      	bne.n	800774c <tcp_listen_with_backlog_and_err+0xd8>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f7ff fbc0 	bl	8006ef8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800777c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800777e:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <tcp_listen_with_backlog_and_err+0x150>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	4a0f      	ldr	r2, [pc, #60]	; (80077c4 <tcp_listen_with_backlog_and_err+0x150>)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	f005 fbf6 	bl	800cf7c <tcp_timer_needed>
  res = ERR_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7efa      	ldrb	r2, [r7, #27]
 800779e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80077a0:	69fb      	ldr	r3, [r7, #28]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3720      	adds	r7, #32
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	08013bd4 	.word	0x08013bd4
 80077b0:	08013dc8 	.word	0x08013dc8
 80077b4:	08013c18 	.word	0x08013c18
 80077b8:	08013df8 	.word	0x08013df8
 80077bc:	20006830 	.word	0x20006830
 80077c0:	08007611 	.word	0x08007611
 80077c4:	20006834 	.word	0x20006834

080077c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <tcp_update_rcv_ann_wnd+0x1c>
 80077d6:	4b25      	ldr	r3, [pc, #148]	; (800786c <tcp_update_rcv_ann_wnd+0xa4>)
 80077d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80077dc:	4924      	ldr	r1, [pc, #144]	; (8007870 <tcp_update_rcv_ann_wnd+0xa8>)
 80077de:	4825      	ldr	r0, [pc, #148]	; (8007874 <tcp_update_rcv_ann_wnd+0xac>)
 80077e0:	f00a fbec 	bl	8011fbc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80077ec:	4413      	add	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80077f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80077fc:	bf28      	it	cs
 80077fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007802:	b292      	uxth	r2, r2
 8007804:	4413      	add	r3, r2
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	db08      	blt.n	8007820 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	e020      	b.n	8007862 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	dd03      	ble.n	8007836 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007834:	e014      	b.n	8007860 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007848:	d306      	bcc.n	8007858 <tcp_update_rcv_ann_wnd+0x90>
 800784a:	4b08      	ldr	r3, [pc, #32]	; (800786c <tcp_update_rcv_ann_wnd+0xa4>)
 800784c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007850:	4909      	ldr	r1, [pc, #36]	; (8007878 <tcp_update_rcv_ann_wnd+0xb0>)
 8007852:	4808      	ldr	r0, [pc, #32]	; (8007874 <tcp_update_rcv_ann_wnd+0xac>)
 8007854:	f00a fbb2 	bl	8011fbc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007860:	2300      	movs	r3, #0
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	08013bd4 	.word	0x08013bd4
 8007870:	08013e30 	.word	0x08013e30
 8007874:	08013c18 	.word	0x08013c18
 8007878:	08013e54 	.word	0x08013e54

0800787c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d107      	bne.n	800789e <tcp_recved+0x22>
 800788e:	4b1f      	ldr	r3, [pc, #124]	; (800790c <tcp_recved+0x90>)
 8007890:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007894:	491e      	ldr	r1, [pc, #120]	; (8007910 <tcp_recved+0x94>)
 8007896:	481f      	ldr	r0, [pc, #124]	; (8007914 <tcp_recved+0x98>)
 8007898:	f00a fb90 	bl	8011fbc <iprintf>
 800789c:	e032      	b.n	8007904 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7d1b      	ldrb	r3, [r3, #20]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d106      	bne.n	80078b4 <tcp_recved+0x38>
 80078a6:	4b19      	ldr	r3, [pc, #100]	; (800790c <tcp_recved+0x90>)
 80078a8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80078ac:	491a      	ldr	r1, [pc, #104]	; (8007918 <tcp_recved+0x9c>)
 80078ae:	4819      	ldr	r0, [pc, #100]	; (8007914 <tcp_recved+0x98>)
 80078b0:	f00a fb84 	bl	8011fbc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078b8:	887b      	ldrh	r3, [r7, #2]
 80078ba:	4413      	add	r3, r2
 80078bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80078c4:	d804      	bhi.n	80078d0 <tcp_recved+0x54>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ca:	89fa      	ldrh	r2, [r7, #14]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d204      	bcs.n	80078da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80078d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80078d8:	e002      	b.n	80078e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	89fa      	ldrh	r2, [r7, #14]
 80078de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ff71 	bl	80077c8 <tcp_update_rcv_ann_wnd>
 80078e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80078ee:	d309      	bcc.n	8007904 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8b5b      	ldrh	r3, [r3, #26]
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f004 fbc6 	bl	800c090 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	08013bd4 	.word	0x08013bd4
 8007910:	08013e70 	.word	0x08013e70
 8007914:	08013c18 	.word	0x08013c18
 8007918:	08013e88 	.word	0x08013e88

0800791c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007926:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <tcp_new_port+0x84>)
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	4b1c      	ldr	r3, [pc, #112]	; (80079a0 <tcp_new_port+0x84>)
 8007930:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <tcp_new_port+0x84>)
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800793a:	4293      	cmp	r3, r2
 800793c:	d103      	bne.n	8007946 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800793e:	4b18      	ldr	r3, [pc, #96]	; (80079a0 <tcp_new_port+0x84>)
 8007940:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007944:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007946:	2300      	movs	r3, #0
 8007948:	71fb      	strb	r3, [r7, #7]
 800794a:	e01e      	b.n	800798a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <tcp_new_port+0x88>)
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	e011      	b.n	800797e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	8ada      	ldrh	r2, [r3, #22]
 800795e:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <tcp_new_port+0x84>)
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d108      	bne.n	8007978 <tcp_new_port+0x5c>
        n++;
 8007966:	88bb      	ldrh	r3, [r7, #4]
 8007968:	3301      	adds	r3, #1
 800796a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800796c:	88bb      	ldrh	r3, [r7, #4]
 800796e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007972:	d3d8      	bcc.n	8007926 <tcp_new_port+0xa>
          return 0;
 8007974:	2300      	movs	r3, #0
 8007976:	e00d      	b.n	8007994 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1ea      	bne.n	800795a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	3301      	adds	r3, #1
 8007988:	71fb      	strb	r3, [r7, #7]
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d9dd      	bls.n	800794c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <tcp_new_port+0x84>)
 8007992:	881b      	ldrh	r3, [r3, #0]
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	2000000a 	.word	0x2000000a
 80079a4:	08015f48 	.word	0x08015f48

080079a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b090      	sub	sp, #64	; 0x40
 80079ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80079b4:	4b94      	ldr	r3, [pc, #592]	; (8007c08 <tcp_slowtmr+0x260>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a93      	ldr	r2, [pc, #588]	; (8007c08 <tcp_slowtmr+0x260>)
 80079bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80079be:	4b93      	ldr	r3, [pc, #588]	; (8007c0c <tcp_slowtmr+0x264>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4b91      	ldr	r3, [pc, #580]	; (8007c0c <tcp_slowtmr+0x264>)
 80079c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80079ce:	4b90      	ldr	r3, [pc, #576]	; (8007c10 <tcp_slowtmr+0x268>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80079d4:	e29d      	b.n	8007f12 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	7d1b      	ldrb	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <tcp_slowtmr+0x44>
 80079de:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <tcp_slowtmr+0x26c>)
 80079e0:	f240 42be 	movw	r2, #1214	; 0x4be
 80079e4:	498c      	ldr	r1, [pc, #560]	; (8007c18 <tcp_slowtmr+0x270>)
 80079e6:	488d      	ldr	r0, [pc, #564]	; (8007c1c <tcp_slowtmr+0x274>)
 80079e8:	f00a fae8 	bl	8011fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	7d1b      	ldrb	r3, [r3, #20]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d106      	bne.n	8007a02 <tcp_slowtmr+0x5a>
 80079f4:	4b87      	ldr	r3, [pc, #540]	; (8007c14 <tcp_slowtmr+0x26c>)
 80079f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80079fa:	4989      	ldr	r1, [pc, #548]	; (8007c20 <tcp_slowtmr+0x278>)
 80079fc:	4887      	ldr	r0, [pc, #540]	; (8007c1c <tcp_slowtmr+0x274>)
 80079fe:	f00a fadd 	bl	8011fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	7d1b      	ldrb	r3, [r3, #20]
 8007a06:	2b0a      	cmp	r3, #10
 8007a08:	d106      	bne.n	8007a18 <tcp_slowtmr+0x70>
 8007a0a:	4b82      	ldr	r3, [pc, #520]	; (8007c14 <tcp_slowtmr+0x26c>)
 8007a0c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007a10:	4984      	ldr	r1, [pc, #528]	; (8007c24 <tcp_slowtmr+0x27c>)
 8007a12:	4882      	ldr	r0, [pc, #520]	; (8007c1c <tcp_slowtmr+0x274>)
 8007a14:	f00a fad2 	bl	8011fbc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	7f9a      	ldrb	r2, [r3, #30]
 8007a1c:	4b7b      	ldr	r3, [pc, #492]	; (8007c0c <tcp_slowtmr+0x264>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d105      	bne.n	8007a30 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007a2e:	e270      	b.n	8007f12 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007a30:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <tcp_slowtmr+0x264>)
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	7d1b      	ldrb	r3, [r3, #20]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d10a      	bne.n	8007a62 <tcp_slowtmr+0xba>
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d905      	bls.n	8007a62 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a60:	e11e      	b.n	8007ca0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a68:	2b0b      	cmp	r3, #11
 8007a6a:	d905      	bls.n	8007a78 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	3301      	adds	r3, #1
 8007a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a76:	e113      	b.n	8007ca0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d075      	beq.n	8007b6e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <tcp_slowtmr+0xf0>
 8007a8a:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <tcp_slowtmr+0x26c>)
 8007a8c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007a90:	4965      	ldr	r1, [pc, #404]	; (8007c28 <tcp_slowtmr+0x280>)
 8007a92:	4862      	ldr	r0, [pc, #392]	; (8007c1c <tcp_slowtmr+0x274>)
 8007a94:	f00a fa92 	bl	8011fbc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <tcp_slowtmr+0x106>
 8007aa0:	4b5c      	ldr	r3, [pc, #368]	; (8007c14 <tcp_slowtmr+0x26c>)
 8007aa2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007aa6:	4961      	ldr	r1, [pc, #388]	; (8007c2c <tcp_slowtmr+0x284>)
 8007aa8:	485c      	ldr	r0, [pc, #368]	; (8007c1c <tcp_slowtmr+0x274>)
 8007aaa:	f00a fa87 	bl	8011fbc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007ab4:	2b0b      	cmp	r3, #11
 8007ab6:	d905      	bls.n	8007ac4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007abc:	3301      	adds	r3, #1
 8007abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ac2:	e0ed      	b.n	8007ca0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007aca:	3b01      	subs	r3, #1
 8007acc:	4a58      	ldr	r2, [pc, #352]	; (8007c30 <tcp_slowtmr+0x288>)
 8007ace:	5cd3      	ldrb	r3, [r2, r3]
 8007ad0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ad8:	7c7a      	ldrb	r2, [r7, #17]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d907      	bls.n	8007aee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007af4:	7c7a      	ldrb	r2, [r7, #17]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	f200 80d2 	bhi.w	8007ca0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007afc:	2301      	movs	r3, #1
 8007afe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d108      	bne.n	8007b1c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b0c:	f005 f968 	bl	800cde0 <tcp_zero_window_probe>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d014      	beq.n	8007b40 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007b16:	2300      	movs	r3, #0
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	e011      	b.n	8007b40 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b22:	4619      	mov	r1, r3
 8007b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b26:	f004 f82d 	bl	800bb84 <tcp_split_unsent_seg>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d107      	bne.n	8007b40 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b32:	f004 faad 	bl	800c090 <tcp_output>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80ac 	beq.w	8007ca0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	f200 80a2 	bhi.w	8007ca0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b62:	3301      	adds	r3, #1
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007b6c:	e098      	b.n	8007ca0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db0f      	blt.n	8007b98 <tcp_slowtmr+0x1f0>
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007b7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d008      	beq.n	8007b98 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	b21a      	sxth	r2, r3
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	db7b      	blt.n	8007ca0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007baa:	f004 fd63 	bl	800c674 <tcp_rexmit_rto_prepare>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <tcp_slowtmr+0x21c>
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d171      	bne.n	8007ca0 <tcp_slowtmr+0x2f8>
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d06d      	beq.n	8007ca0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	7d1b      	ldrb	r3, [r3, #20]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d03a      	beq.n	8007c42 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd2:	2b0c      	cmp	r3, #12
 8007bd4:	bf28      	it	cs
 8007bd6:	230c      	movcs	r3, #12
 8007bd8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007be0:	10db      	asrs	r3, r3, #3
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007bec:	4413      	add	r3, r2
 8007bee:	7efa      	ldrb	r2, [r7, #27]
 8007bf0:	4910      	ldr	r1, [pc, #64]	; (8007c34 <tcp_slowtmr+0x28c>)
 8007bf2:	5c8a      	ldrb	r2, [r1, r2]
 8007bf4:	4093      	lsls	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	dc1a      	bgt.n	8007c38 <tcp_slowtmr+0x290>
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	b21a      	sxth	r2, r3
 8007c06:	e019      	b.n	8007c3c <tcp_slowtmr+0x294>
 8007c08:	2000682c 	.word	0x2000682c
 8007c0c:	20006842 	.word	0x20006842
 8007c10:	20006838 	.word	0x20006838
 8007c14:	08013bd4 	.word	0x08013bd4
 8007c18:	08013f18 	.word	0x08013f18
 8007c1c:	08013c18 	.word	0x08013c18
 8007c20:	08013f44 	.word	0x08013f44
 8007c24:	08013f70 	.word	0x08013f70
 8007c28:	08013fa0 	.word	0x08013fa0
 8007c2c:	08013fd4 	.word	0x08013fd4
 8007c30:	08015f40 	.word	0x08015f40
 8007c34:	08015f30 	.word	0x08015f30
 8007c38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	2200      	movs	r2, #0
 8007c46:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bf28      	it	cs
 8007c58:	4613      	movcs	r3, r2
 8007c5a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d206      	bcs.n	8007c88 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9c:	f004 fd5a 	bl	800c754 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	7d1b      	ldrb	r3, [r3, #20]
 8007ca4:	2b06      	cmp	r3, #6
 8007ca6:	d111      	bne.n	8007ccc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	8b5b      	ldrh	r3, [r3, #26]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007cb4:	4b9c      	ldr	r3, [pc, #624]	; (8007f28 <tcp_slowtmr+0x580>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b28      	cmp	r3, #40	; 0x28
 8007cc0:	d904      	bls.n	8007ccc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	7a5b      	ldrb	r3, [r3, #9]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d04a      	beq.n	8007d6e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d003      	beq.n	8007ce8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007ce4:	2b07      	cmp	r3, #7
 8007ce6:	d142      	bne.n	8007d6e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ce8:	4b8f      	ldr	r3, [pc, #572]	; (8007f28 <tcp_slowtmr+0x580>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007cf8:	4b8c      	ldr	r3, [pc, #560]	; (8007f2c <tcp_slowtmr+0x584>)
 8007cfa:	440b      	add	r3, r1
 8007cfc:	498c      	ldr	r1, [pc, #560]	; (8007f30 <tcp_slowtmr+0x588>)
 8007cfe:	fba1 1303 	umull	r1, r3, r1, r3
 8007d02:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d90a      	bls.n	8007d1e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007d12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d16:	3301      	adds	r3, #1
 8007d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d1c:	e027      	b.n	8007d6e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d1e:	4b82      	ldr	r3, [pc, #520]	; (8007f28 <tcp_slowtmr+0x580>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007d34:	4618      	mov	r0, r3
 8007d36:	4b7f      	ldr	r3, [pc, #508]	; (8007f34 <tcp_slowtmr+0x58c>)
 8007d38:	fb00 f303 	mul.w	r3, r0, r3
 8007d3c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007d3e:	497c      	ldr	r1, [pc, #496]	; (8007f30 <tcp_slowtmr+0x588>)
 8007d40:	fba1 1303 	umull	r1, r3, r1, r3
 8007d44:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d911      	bls.n	8007d6e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d4c:	f005 f808 	bl	800cd60 <tcp_keepalive>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007d56:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d107      	bne.n	8007d6e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007d64:	3301      	adds	r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d011      	beq.n	8007d9a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007d76:	4b6c      	ldr	r3, [pc, #432]	; (8007f28 <tcp_slowtmr+0x580>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007d86:	4619      	mov	r1, r3
 8007d88:	460b      	mov	r3, r1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	440b      	add	r3, r1
 8007d8e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d96:	f000 fec3 	bl	8008b20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	7d1b      	ldrb	r3, [r3, #20]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d10b      	bne.n	8007dba <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007da2:	4b61      	ldr	r3, [pc, #388]	; (8007f28 <tcp_slowtmr+0x580>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d904      	bls.n	8007dba <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db4:	3301      	adds	r3, #1
 8007db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	7d1b      	ldrb	r3, [r3, #20]
 8007dbe:	2b09      	cmp	r3, #9
 8007dc0:	d10b      	bne.n	8007dda <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007dc2:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <tcp_slowtmr+0x580>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8007dce:	d904      	bls.n	8007dda <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d060      	beq.n	8007ea4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dec:	f000 fce4 	bl	80087b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d010      	beq.n	8007e18 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007df6:	4b50      	ldr	r3, [pc, #320]	; (8007f38 <tcp_slowtmr+0x590>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d106      	bne.n	8007e0e <tcp_slowtmr+0x466>
 8007e00:	4b4e      	ldr	r3, [pc, #312]	; (8007f3c <tcp_slowtmr+0x594>)
 8007e02:	f240 526d 	movw	r2, #1389	; 0x56d
 8007e06:	494e      	ldr	r1, [pc, #312]	; (8007f40 <tcp_slowtmr+0x598>)
 8007e08:	484e      	ldr	r0, [pc, #312]	; (8007f44 <tcp_slowtmr+0x59c>)
 8007e0a:	f00a f8d7 	bl	8011fbc <iprintf>
        prev->next = pcb->next;
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	60da      	str	r2, [r3, #12]
 8007e16:	e00f      	b.n	8007e38 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007e18:	4b47      	ldr	r3, [pc, #284]	; (8007f38 <tcp_slowtmr+0x590>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d006      	beq.n	8007e30 <tcp_slowtmr+0x488>
 8007e22:	4b46      	ldr	r3, [pc, #280]	; (8007f3c <tcp_slowtmr+0x594>)
 8007e24:	f240 5271 	movw	r2, #1393	; 0x571
 8007e28:	4947      	ldr	r1, [pc, #284]	; (8007f48 <tcp_slowtmr+0x5a0>)
 8007e2a:	4846      	ldr	r0, [pc, #280]	; (8007f44 <tcp_slowtmr+0x59c>)
 8007e2c:	f00a f8c6 	bl	8011fbc <iprintf>
        tcp_active_pcbs = pcb->next;
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a40      	ldr	r2, [pc, #256]	; (8007f38 <tcp_slowtmr+0x590>)
 8007e36:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d013      	beq.n	8007e68 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007e48:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e50:	8ad2      	ldrh	r2, [r2, #22]
 8007e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e54:	8b09      	ldrh	r1, [r1, #24]
 8007e56:	9102      	str	r1, [sp, #8]
 8007e58:	9201      	str	r2, [sp, #4]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4601      	mov	r1, r0
 8007e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e64:	f004 fec8 	bl	800cbf8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	7d1b      	ldrb	r3, [r3, #20]
 8007e72:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007e7e:	6838      	ldr	r0, [r7, #0]
 8007e80:	f7ff f83a 	bl	8006ef8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007e84:	4b31      	ldr	r3, [pc, #196]	; (8007f4c <tcp_slowtmr+0x5a4>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <tcp_slowtmr+0x4f2>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f06f 010c 	mvn.w	r1, #12
 8007e96:	68b8      	ldr	r0, [r7, #8]
 8007e98:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007e9a:	4b2c      	ldr	r3, [pc, #176]	; (8007f4c <tcp_slowtmr+0x5a4>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d037      	beq.n	8007f12 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007ea2:	e592      	b.n	80079ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	7f1b      	ldrb	r3, [r3, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	7f1a      	ldrb	r2, [r3, #28]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	7f5b      	ldrb	r3, [r3, #29]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d325      	bcc.n	8007f12 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007ecc:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <tcp_slowtmr+0x5a4>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <tcp_slowtmr+0x54c>
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee4:	6912      	ldr	r2, [r2, #16]
 8007ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007ef2:	e002      	b.n	8007efa <tcp_slowtmr+0x552>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <tcp_slowtmr+0x5a4>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d000      	beq.n	8007f04 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007f02:	e562      	b.n	80079ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007f04:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0e:	f004 f8bf 	bl	800c090 <tcp_output>
  while (pcb != NULL) {
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f47f ad5e 	bne.w	80079d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <tcp_slowtmr+0x5a8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007f24:	e069      	b.n	8007ffa <tcp_slowtmr+0x652>
 8007f26:	bf00      	nop
 8007f28:	2000682c 	.word	0x2000682c
 8007f2c:	000a4cb8 	.word	0x000a4cb8
 8007f30:	10624dd3 	.word	0x10624dd3
 8007f34:	000124f8 	.word	0x000124f8
 8007f38:	20006838 	.word	0x20006838
 8007f3c:	08013bd4 	.word	0x08013bd4
 8007f40:	0801400c 	.word	0x0801400c
 8007f44:	08013c18 	.word	0x08013c18
 8007f48:	08014038 	.word	0x08014038
 8007f4c:	20006840 	.word	0x20006840
 8007f50:	2000683c 	.word	0x2000683c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	7d1b      	ldrb	r3, [r3, #20]
 8007f58:	2b0a      	cmp	r3, #10
 8007f5a:	d006      	beq.n	8007f6a <tcp_slowtmr+0x5c2>
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	; (800800c <tcp_slowtmr+0x664>)
 8007f5e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007f62:	492b      	ldr	r1, [pc, #172]	; (8008010 <tcp_slowtmr+0x668>)
 8007f64:	482b      	ldr	r0, [pc, #172]	; (8008014 <tcp_slowtmr+0x66c>)
 8007f66:	f00a f829 	bl	8011fbc <iprintf>
    pcb_remove = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007f70:	4b29      	ldr	r3, [pc, #164]	; (8008018 <tcp_slowtmr+0x670>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2bf0      	cmp	r3, #240	; 0xf0
 8007f7c:	d904      	bls.n	8007f88 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f82:	3301      	adds	r3, #1
 8007f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d02f      	beq.n	8007ff0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f92:	f000 fc11 	bl	80087b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d010      	beq.n	8007fbe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007f9c:	4b1f      	ldr	r3, [pc, #124]	; (800801c <tcp_slowtmr+0x674>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d106      	bne.n	8007fb4 <tcp_slowtmr+0x60c>
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <tcp_slowtmr+0x664>)
 8007fa8:	f240 52af 	movw	r2, #1455	; 0x5af
 8007fac:	491c      	ldr	r1, [pc, #112]	; (8008020 <tcp_slowtmr+0x678>)
 8007fae:	4819      	ldr	r0, [pc, #100]	; (8008014 <tcp_slowtmr+0x66c>)
 8007fb0:	f00a f804 	bl	8011fbc <iprintf>
        prev->next = pcb->next;
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	60da      	str	r2, [r3, #12]
 8007fbc:	e00f      	b.n	8007fde <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <tcp_slowtmr+0x674>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d006      	beq.n	8007fd6 <tcp_slowtmr+0x62e>
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <tcp_slowtmr+0x664>)
 8007fca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007fce:	4915      	ldr	r1, [pc, #84]	; (8008024 <tcp_slowtmr+0x67c>)
 8007fd0:	4810      	ldr	r0, [pc, #64]	; (8008014 <tcp_slowtmr+0x66c>)
 8007fd2:	f009 fff3 	bl	8011fbc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <tcp_slowtmr+0x674>)
 8007fdc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007fe8:	69f8      	ldr	r0, [r7, #28]
 8007fea:	f7fe ff85 	bl	8006ef8 <tcp_free>
 8007fee:	e004      	b.n	8007ffa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1a9      	bne.n	8007f54 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	3730      	adds	r7, #48	; 0x30
 8008006:	46bd      	mov	sp, r7
 8008008:	bdb0      	pop	{r4, r5, r7, pc}
 800800a:	bf00      	nop
 800800c:	08013bd4 	.word	0x08013bd4
 8008010:	08014064 	.word	0x08014064
 8008014:	08013c18 	.word	0x08013c18
 8008018:	2000682c 	.word	0x2000682c
 800801c:	2000683c 	.word	0x2000683c
 8008020:	08014094 	.word	0x08014094
 8008024:	080140bc 	.word	0x080140bc

08008028 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800802e:	4b2d      	ldr	r3, [pc, #180]	; (80080e4 <tcp_fasttmr+0xbc>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	b2da      	uxtb	r2, r3
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <tcp_fasttmr+0xbc>)
 8008038:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800803a:	4b2b      	ldr	r3, [pc, #172]	; (80080e8 <tcp_fasttmr+0xc0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008040:	e048      	b.n	80080d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7f9a      	ldrb	r2, [r3, #30]
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <tcp_fasttmr+0xbc>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d03f      	beq.n	80080ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <tcp_fasttmr+0xbc>)
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8b5b      	ldrh	r3, [r3, #26]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8b5b      	ldrh	r3, [r3, #26]
 8008066:	f043 0302 	orr.w	r3, r3, #2
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f004 f80d 	bl	800c090 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8b5b      	ldrh	r3, [r3, #26]
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8b5b      	ldrh	r3, [r3, #26]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8b5b      	ldrh	r3, [r3, #26]
 8008094:	f023 0308 	bic.w	r3, r3, #8
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff f8be 	bl	8007220 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80080b2:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <tcp_fasttmr+0xc4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f819 	bl	80080f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80080be:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <tcp_fasttmr+0xc4>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d000      	beq.n	80080c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80080c6:	e7b8      	b.n	800803a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	e002      	b.n	80080d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1b3      	bne.n	8008042 <tcp_fasttmr+0x1a>
    }
  }
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20006842 	.word	0x20006842
 80080e8:	20006838 	.word	0x20006838
 80080ec:	20006840 	.word	0x20006840

080080f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80080f0:	b590      	push	{r4, r7, lr}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <tcp_process_refused_data+0x22>
 80080fe:	4b37      	ldr	r3, [pc, #220]	; (80081dc <tcp_process_refused_data+0xec>)
 8008100:	f240 6209 	movw	r2, #1545	; 0x609
 8008104:	4936      	ldr	r1, [pc, #216]	; (80081e0 <tcp_process_refused_data+0xf0>)
 8008106:	4837      	ldr	r0, [pc, #220]	; (80081e4 <tcp_process_refused_data+0xf4>)
 8008108:	f009 ff58 	bl	8011fbc <iprintf>
 800810c:	f06f 030f 	mvn.w	r3, #15
 8008110:	e060      	b.n	80081d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008116:	7b5b      	ldrb	r3, [r3, #13]
 8008118:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <tcp_process_refused_data+0x58>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6918      	ldr	r0, [r3, #16]
 800813a:	2300      	movs	r3, #0
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	47a0      	blx	r4
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	e007      	b.n	8008158 <tcp_process_refused_data+0x68>
 8008148:	2300      	movs	r3, #0
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	2000      	movs	r0, #0
 8008150:	f000 f8c2 	bl	80082d8 <tcp_recv_null>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d12a      	bne.n	80081b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d033      	beq.n	80081d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008172:	d005      	beq.n	8008180 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008178:	3301      	adds	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <tcp_process_refused_data+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6918      	ldr	r0, [r3, #16]
 8008194:	2300      	movs	r3, #0
 8008196:	2200      	movs	r2, #0
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	47a0      	blx	r4
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
 80081a0:	e001      	b.n	80081a6 <tcp_process_refused_data+0xb6>
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80081a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081aa:	f113 0f0d 	cmn.w	r3, #13
 80081ae:	d110      	bne.n	80081d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80081b0:	f06f 030c 	mvn.w	r3, #12
 80081b4:	e00e      	b.n	80081d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80081b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ba:	f113 0f0d 	cmn.w	r3, #13
 80081be:	d102      	bne.n	80081c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80081c0:	f06f 030c 	mvn.w	r3, #12
 80081c4:	e006      	b.n	80081d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80081cc:	f06f 0304 	mvn.w	r3, #4
 80081d0:	e000      	b.n	80081d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd90      	pop	{r4, r7, pc}
 80081dc:	08013bd4 	.word	0x08013bd4
 80081e0:	080140e4 	.word	0x080140e4
 80081e4:	08013c18 	.word	0x08013c18

080081e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80081f0:	e007      	b.n	8008202 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f80a 	bl	8008212 <tcp_seg_free>
    seg = next;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f4      	bne.n	80081f2 <tcp_segs_free+0xa>
  }
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00c      	beq.n	800823a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fbb3 	bl	8006998 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	2003      	movs	r0, #3
 8008236:	f7fd fd95 	bl	8005d64 <memp_free>
  }
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <tcp_setprio+0x22>
 8008256:	4b07      	ldr	r3, [pc, #28]	; (8008274 <tcp_setprio+0x30>)
 8008258:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800825c:	4906      	ldr	r1, [pc, #24]	; (8008278 <tcp_setprio+0x34>)
 800825e:	4807      	ldr	r0, [pc, #28]	; (800827c <tcp_setprio+0x38>)
 8008260:	f009 feac 	bl	8011fbc <iprintf>
 8008264:	e002      	b.n	800826c <tcp_setprio+0x28>

  pcb->prio = prio;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	78fa      	ldrb	r2, [r7, #3]
 800826a:	755a      	strb	r2, [r3, #21]
}
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	08013bd4 	.word	0x08013bd4
 8008278:	0801410c 	.word	0x0801410c
 800827c:	08013c18 	.word	0x08013c18

08008280 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <tcp_seg_copy+0x1c>
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <tcp_seg_copy+0x4c>)
 8008290:	f240 6282 	movw	r2, #1666	; 0x682
 8008294:	490e      	ldr	r1, [pc, #56]	; (80082d0 <tcp_seg_copy+0x50>)
 8008296:	480f      	ldr	r0, [pc, #60]	; (80082d4 <tcp_seg_copy+0x54>)
 8008298:	f009 fe90 	bl	8011fbc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800829c:	2003      	movs	r0, #3
 800829e:	f7fd fd15 	bl	8005ccc <memp_malloc>
 80082a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <tcp_seg_copy+0x2e>
    return NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e00a      	b.n	80082c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80082ae:	2210      	movs	r2, #16
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f009 fe6c 	bl	8011f90 <memcpy>
  pbuf_ref(cseg->p);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe fc0b 	bl	8006ad8 <pbuf_ref>
  return cseg;
 80082c2:	68fb      	ldr	r3, [r7, #12]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	08013bd4 	.word	0x08013bd4
 80082d0:	08014128 	.word	0x08014128
 80082d4:	08013c18 	.word	0x08013c18

080082d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d109      	bne.n	8008300 <tcp_recv_null+0x28>
 80082ec:	4b12      	ldr	r3, [pc, #72]	; (8008338 <tcp_recv_null+0x60>)
 80082ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80082f2:	4912      	ldr	r1, [pc, #72]	; (800833c <tcp_recv_null+0x64>)
 80082f4:	4812      	ldr	r0, [pc, #72]	; (8008340 <tcp_recv_null+0x68>)
 80082f6:	f009 fe61 	bl	8011fbc <iprintf>
 80082fa:	f06f 030f 	mvn.w	r3, #15
 80082fe:	e016      	b.n	800832e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	891b      	ldrh	r3, [r3, #8]
 800830a:	4619      	mov	r1, r3
 800830c:	68b8      	ldr	r0, [r7, #8]
 800830e:	f7ff fab5 	bl	800787c <tcp_recved>
    pbuf_free(p);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe fb40 	bl	8006998 <pbuf_free>
 8008318:	e008      	b.n	800832c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800831a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008322:	68b8      	ldr	r0, [r7, #8]
 8008324:	f7fe ffe6 	bl	80072f4 <tcp_close>
 8008328:	4603      	mov	r3, r0
 800832a:	e000      	b.n	800832e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	08013bd4 	.word	0x08013bd4
 800833c:	08014144 	.word	0x08014144
 8008340:	08013c18 	.word	0x08013c18

08008344 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800834e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	db01      	blt.n	800835a <tcp_kill_prio+0x16>
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	e000      	b.n	800835c <tcp_kill_prio+0x18>
 800835a:	237f      	movs	r3, #127	; 0x7f
 800835c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d034      	beq.n	80083ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3b01      	subs	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008372:	4b19      	ldr	r3, [pc, #100]	; (80083d8 <tcp_kill_prio+0x94>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e01f      	b.n	80083ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	7d5b      	ldrb	r3, [r3, #21]
 800837e:	7afa      	ldrb	r2, [r7, #11]
 8008380:	429a      	cmp	r2, r3
 8008382:	d80c      	bhi.n	800839e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008388:	7afa      	ldrb	r2, [r7, #11]
 800838a:	429a      	cmp	r2, r3
 800838c:	d112      	bne.n	80083b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <tcp_kill_prio+0x98>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	429a      	cmp	r2, r3
 800839c:	d80a      	bhi.n	80083b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <tcp_kill_prio+0x98>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	7d5b      	ldrb	r3, [r3, #21]
 80083b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1dc      	bne.n	800837a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80083c6:	6938      	ldr	r0, [r7, #16]
 80083c8:	f7ff f87e 	bl	80074c8 <tcp_abort>
 80083cc:	e000      	b.n	80083d0 <tcp_kill_prio+0x8c>
    return;
 80083ce:	bf00      	nop
  }
}
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20006838 	.word	0x20006838
 80083dc:	2000682c 	.word	0x2000682c

080083e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d009      	beq.n	8008404 <tcp_kill_state+0x24>
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d006      	beq.n	8008404 <tcp_kill_state+0x24>
 80083f6:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <tcp_kill_state+0x80>)
 80083f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80083fc:	4919      	ldr	r1, [pc, #100]	; (8008464 <tcp_kill_state+0x84>)
 80083fe:	481a      	ldr	r0, [pc, #104]	; (8008468 <tcp_kill_state+0x88>)
 8008400:	f009 fddc 	bl	8011fbc <iprintf>

  inactivity = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <tcp_kill_state+0x8c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e017      	b.n	8008444 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	7d1b      	ldrb	r3, [r3, #20]
 8008418:	79fa      	ldrb	r2, [r7, #7]
 800841a:	429a      	cmp	r2, r3
 800841c:	d10f      	bne.n	800843e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <tcp_kill_state+0x90>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	429a      	cmp	r2, r3
 800842c:	d807      	bhi.n	800843e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <tcp_kill_state+0x90>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e4      	bne.n	8008414 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008450:	2100      	movs	r1, #0
 8008452:	6938      	ldr	r0, [r7, #16]
 8008454:	f7fe ff7a 	bl	800734c <tcp_abandon>
  }
}
 8008458:	bf00      	nop
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	08013bd4 	.word	0x08013bd4
 8008464:	08014160 	.word	0x08014160
 8008468:	08013c18 	.word	0x08013c18
 800846c:	20006838 	.word	0x20006838
 8008470:	2000682c 	.word	0x2000682c

08008474 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <tcp_kill_timewait+0x58>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e012      	b.n	80084b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <tcp_kill_timewait+0x5c>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d807      	bhi.n	80084aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <tcp_kill_timewait+0x5c>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e9      	bne.n	800848a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80084bc:	68b8      	ldr	r0, [r7, #8]
 80084be:	f7ff f803 	bl	80074c8 <tcp_abort>
  }
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	2000683c 	.word	0x2000683c
 80084d0:	2000682c 	.word	0x2000682c

080084d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80084da:	4b10      	ldr	r3, [pc, #64]	; (800851c <tcp_handle_closepend+0x48>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80084e0:	e014      	b.n	800850c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8b5b      	ldrh	r3, [r3, #26]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8b5b      	ldrh	r3, [r3, #26]
 80084f8:	f023 0308 	bic.w	r3, r3, #8
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fe fe8c 	bl	8007220 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e7      	bne.n	80084e2 <tcp_handle_closepend+0xe>
  }
}
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20006838 	.word	0x20006838

08008520 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800852a:	2001      	movs	r0, #1
 800852c:	f7fd fbce 	bl	8005ccc <memp_malloc>
 8008530:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d126      	bne.n	8008586 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008538:	f7ff ffcc 	bl	80084d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800853c:	f7ff ff9a 	bl	8008474 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008540:	2001      	movs	r0, #1
 8008542:	f7fd fbc3 	bl	8005ccc <memp_malloc>
 8008546:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d11b      	bne.n	8008586 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800854e:	2009      	movs	r0, #9
 8008550:	f7ff ff46 	bl	80083e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008554:	2001      	movs	r0, #1
 8008556:	f7fd fbb9 	bl	8005ccc <memp_malloc>
 800855a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d111      	bne.n	8008586 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008562:	2008      	movs	r0, #8
 8008564:	f7ff ff3c 	bl	80083e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008568:	2001      	movs	r0, #1
 800856a:	f7fd fbaf 	bl	8005ccc <memp_malloc>
 800856e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fee3 	bl	8008344 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800857e:	2001      	movs	r0, #1
 8008580:	f7fd fba4 	bl	8005ccc <memp_malloc>
 8008584:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d03f      	beq.n	800860c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800858c:	229c      	movs	r2, #156	; 0x9c
 800858e:	2100      	movs	r1, #0
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f009 fd0b 	bl	8011fac <memset>
    pcb->prio = prio;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	79fa      	ldrb	r2, [r7, #7]
 800859a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80085a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80085ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	22ff      	movs	r2, #255	; 0xff
 80085ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f44f 7206 	mov.w	r2, #536	; 0x218
 80085c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2206      	movs	r2, #6
 80085c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2206      	movs	r2, #6
 80085d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80085e2:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <tcp_alloc+0xf8>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <tcp_alloc+0xfc>)
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80085f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a08      	ldr	r2, [pc, #32]	; (8008620 <tcp_alloc+0x100>)
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a07      	ldr	r2, [pc, #28]	; (8008624 <tcp_alloc+0x104>)
 8008608:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	2000682c 	.word	0x2000682c
 800861c:	20006842 	.word	0x20006842
 8008620:	080082d9 	.word	0x080082d9
 8008624:	006ddd00 	.word	0x006ddd00

08008628 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800862c:	2040      	movs	r0, #64	; 0x40
 800862e:	f7ff ff77 	bl	8008520 <tcp_alloc>
 8008632:	4603      	mov	r3, r0
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}

08008638 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	611a      	str	r2, [r3, #16]
  }
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00e      	beq.n	800868a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d106      	bne.n	8008682 <tcp_recv+0x26>
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <tcp_recv+0x38>)
 8008676:	f240 72df 	movw	r2, #2015	; 0x7df
 800867a:	4907      	ldr	r1, [pc, #28]	; (8008698 <tcp_recv+0x3c>)
 800867c:	4807      	ldr	r0, [pc, #28]	; (800869c <tcp_recv+0x40>)
 800867e:	f009 fc9d 	bl	8011fbc <iprintf>
    pcb->recv = recv;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	08013bd4 	.word	0x08013bd4
 8008698:	08014170 	.word	0x08014170
 800869c:	08013c18 	.word	0x08013c18

080086a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d106      	bne.n	80086c6 <tcp_sent+0x26>
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <tcp_sent+0x38>)
 80086ba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80086be:	4907      	ldr	r1, [pc, #28]	; (80086dc <tcp_sent+0x3c>)
 80086c0:	4807      	ldr	r0, [pc, #28]	; (80086e0 <tcp_sent+0x40>)
 80086c2:	f009 fc7b 	bl	8011fbc <iprintf>
    pcb->sent = sent;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	08013bd4 	.word	0x08013bd4
 80086dc:	08014198 	.word	0x08014198
 80086e0:	08013c18 	.word	0x08013c18

080086e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7d1b      	ldrb	r3, [r3, #20]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d106      	bne.n	800870a <tcp_err+0x26>
 80086fc:	4b07      	ldr	r3, [pc, #28]	; (800871c <tcp_err+0x38>)
 80086fe:	f640 020d 	movw	r2, #2061	; 0x80d
 8008702:	4907      	ldr	r1, [pc, #28]	; (8008720 <tcp_err+0x3c>)
 8008704:	4807      	ldr	r0, [pc, #28]	; (8008724 <tcp_err+0x40>)
 8008706:	f009 fc59 	bl	8011fbc <iprintf>
    pcb->errf = err;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	08013bd4 	.word	0x08013bd4
 8008720:	080141c0 	.word	0x080141c0
 8008724:	08013c18 	.word	0x08013c18

08008728 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <tcp_accept+0x22>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7d1b      	ldrb	r3, [r3, #20]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d104      	bne.n	800874a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	619a      	str	r2, [r3, #24]
  }
}
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d107      	bne.n	800877c <tcp_poll+0x24>
 800876c:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <tcp_poll+0x50>)
 800876e:	f640 023d 	movw	r2, #2109	; 0x83d
 8008772:	490e      	ldr	r1, [pc, #56]	; (80087ac <tcp_poll+0x54>)
 8008774:	480e      	ldr	r0, [pc, #56]	; (80087b0 <tcp_poll+0x58>)
 8008776:	f009 fc21 	bl	8011fbc <iprintf>
 800877a:	e011      	b.n	80087a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	7d1b      	ldrb	r3, [r3, #20]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d106      	bne.n	8008792 <tcp_poll+0x3a>
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <tcp_poll+0x50>)
 8008786:	f640 023e 	movw	r2, #2110	; 0x83e
 800878a:	490a      	ldr	r1, [pc, #40]	; (80087b4 <tcp_poll+0x5c>)
 800878c:	4808      	ldr	r0, [pc, #32]	; (80087b0 <tcp_poll+0x58>)
 800878e:	f009 fc15 	bl	8011fbc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	79fa      	ldrb	r2, [r7, #7]
 800879e:	775a      	strb	r2, [r3, #29]
}
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	08013bd4 	.word	0x08013bd4
 80087ac:	080141e8 	.word	0x080141e8
 80087b0:	08013c18 	.word	0x08013c18
 80087b4:	08014200 	.word	0x08014200

080087b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d107      	bne.n	80087d6 <tcp_pcb_purge+0x1e>
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <tcp_pcb_purge+0x94>)
 80087c8:	f640 0251 	movw	r2, #2129	; 0x851
 80087cc:	4920      	ldr	r1, [pc, #128]	; (8008850 <tcp_pcb_purge+0x98>)
 80087ce:	4821      	ldr	r0, [pc, #132]	; (8008854 <tcp_pcb_purge+0x9c>)
 80087d0:	f009 fbf4 	bl	8011fbc <iprintf>
 80087d4:	e037      	b.n	8008846 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7d1b      	ldrb	r3, [r3, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d033      	beq.n	8008846 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80087e2:	2b0a      	cmp	r3, #10
 80087e4:	d02f      	beq.n	8008846 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d02b      	beq.n	8008846 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe f8cc 	bl	8006998 <pbuf_free>
      pcb->refused_data = NULL;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f986 	bl	8008b20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800881a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fce1 	bl	80081e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fcdc 	bl	80081e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	66da      	str	r2, [r3, #108]	; 0x6c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08013bd4 	.word	0x08013bd4
 8008850:	08014220 	.word	0x08014220
 8008854:	08013c18 	.word	0x08013c18

08008858 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d106      	bne.n	8008876 <tcp_pcb_remove+0x1e>
 8008868:	4b3e      	ldr	r3, [pc, #248]	; (8008964 <tcp_pcb_remove+0x10c>)
 800886a:	f640 0283 	movw	r2, #2179	; 0x883
 800886e:	493e      	ldr	r1, [pc, #248]	; (8008968 <tcp_pcb_remove+0x110>)
 8008870:	483e      	ldr	r0, [pc, #248]	; (800896c <tcp_pcb_remove+0x114>)
 8008872:	f009 fba3 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <tcp_pcb_remove+0x32>
 800887c:	4b39      	ldr	r3, [pc, #228]	; (8008964 <tcp_pcb_remove+0x10c>)
 800887e:	f640 0284 	movw	r2, #2180	; 0x884
 8008882:	493b      	ldr	r1, [pc, #236]	; (8008970 <tcp_pcb_remove+0x118>)
 8008884:	4839      	ldr	r0, [pc, #228]	; (800896c <tcp_pcb_remove+0x114>)
 8008886:	f009 fb99 	bl	8011fbc <iprintf>

  TCP_RMV(pcblist, pcb);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d105      	bne.n	80088a0 <tcp_pcb_remove+0x48>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e013      	b.n	80088c8 <tcp_pcb_remove+0x70>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e00c      	b.n	80088c2 <tcp_pcb_remove+0x6a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d104      	bne.n	80088bc <tcp_pcb_remove+0x64>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	60da      	str	r2, [r3, #12]
 80088ba:	e005      	b.n	80088c8 <tcp_pcb_remove+0x70>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1ef      	bne.n	80088a8 <tcp_pcb_remove+0x50>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f7ff ff72 	bl	80087b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	7d1b      	ldrb	r3, [r3, #20]
 80088d8:	2b0a      	cmp	r3, #10
 80088da:	d013      	beq.n	8008904 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d00f      	beq.n	8008904 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	8b5b      	ldrh	r3, [r3, #26]
 80088e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d009      	beq.n	8008904 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	8b5b      	ldrh	r3, [r3, #26]
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088fe:	6838      	ldr	r0, [r7, #0]
 8008900:	f003 fbc6 	bl	800c090 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	7d1b      	ldrb	r3, [r3, #20]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d020      	beq.n	800894e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <tcp_pcb_remove+0xca>
 8008914:	4b13      	ldr	r3, [pc, #76]	; (8008964 <tcp_pcb_remove+0x10c>)
 8008916:	f640 0293 	movw	r2, #2195	; 0x893
 800891a:	4916      	ldr	r1, [pc, #88]	; (8008974 <tcp_pcb_remove+0x11c>)
 800891c:	4813      	ldr	r0, [pc, #76]	; (800896c <tcp_pcb_remove+0x114>)
 800891e:	f009 fb4d 	bl	8011fbc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <tcp_pcb_remove+0xe0>
 800892a:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <tcp_pcb_remove+0x10c>)
 800892c:	f640 0294 	movw	r2, #2196	; 0x894
 8008930:	4911      	ldr	r1, [pc, #68]	; (8008978 <tcp_pcb_remove+0x120>)
 8008932:	480e      	ldr	r0, [pc, #56]	; (800896c <tcp_pcb_remove+0x114>)
 8008934:	f009 fb42 	bl	8011fbc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <tcp_pcb_remove+0xf6>
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <tcp_pcb_remove+0x10c>)
 8008942:	f640 0296 	movw	r2, #2198	; 0x896
 8008946:	490d      	ldr	r1, [pc, #52]	; (800897c <tcp_pcb_remove+0x124>)
 8008948:	4808      	ldr	r0, [pc, #32]	; (800896c <tcp_pcb_remove+0x114>)
 800894a:	f009 fb37 	bl	8011fbc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2200      	movs	r2, #0
 8008952:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	08013bd4 	.word	0x08013bd4
 8008968:	0801423c 	.word	0x0801423c
 800896c:	08013c18 	.word	0x08013c18
 8008970:	08014258 	.word	0x08014258
 8008974:	08014278 	.word	0x08014278
 8008978:	08014290 	.word	0x08014290
 800897c:	080142ac 	.word	0x080142ac

08008980 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <tcp_next_iss+0x1c>
 800898e:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <tcp_next_iss+0x38>)
 8008990:	f640 02af 	movw	r2, #2223	; 0x8af
 8008994:	4909      	ldr	r1, [pc, #36]	; (80089bc <tcp_next_iss+0x3c>)
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <tcp_next_iss+0x40>)
 8008998:	f009 fb10 	bl	8011fbc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <tcp_next_iss+0x44>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <tcp_next_iss+0x48>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <tcp_next_iss+0x44>)
 80089a8:	6013      	str	r3, [r2, #0]
  return iss;
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <tcp_next_iss+0x44>)
 80089ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	08013bd4 	.word	0x08013bd4
 80089bc:	080142c4 	.word	0x080142c4
 80089c0:	08013c18 	.word	0x08013c18
 80089c4:	2000000c 	.word	0x2000000c
 80089c8:	2000682c 	.word	0x2000682c

080089cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d106      	bne.n	80089ee <tcp_eff_send_mss_netif+0x22>
 80089e0:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <tcp_eff_send_mss_netif+0x68>)
 80089e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80089e6:	4914      	ldr	r1, [pc, #80]	; (8008a38 <tcp_eff_send_mss_netif+0x6c>)
 80089e8:	4814      	ldr	r0, [pc, #80]	; (8008a3c <tcp_eff_send_mss_netif+0x70>)
 80089ea:	f009 fae7 	bl	8011fbc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80089f4:	89fb      	ldrh	r3, [r7, #14]
 80089f6:	e019      	b.n	8008a2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80089fe:	8afb      	ldrh	r3, [r7, #22]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d012      	beq.n	8008a2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008a04:	2328      	movs	r3, #40	; 0x28
 8008a06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008a08:	8afa      	ldrh	r2, [r7, #22]
 8008a0a:	8abb      	ldrh	r3, [r7, #20]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d904      	bls.n	8008a1a <tcp_eff_send_mss_netif+0x4e>
 8008a10:	8afa      	ldrh	r2, [r7, #22]
 8008a12:	8abb      	ldrh	r3, [r7, #20]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	e000      	b.n	8008a1c <tcp_eff_send_mss_netif+0x50>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008a1e:	8a7a      	ldrh	r2, [r7, #18]
 8008a20:	89fb      	ldrh	r3, [r7, #14]
 8008a22:	4293      	cmp	r3, r2
 8008a24:	bf28      	it	cs
 8008a26:	4613      	movcs	r3, r2
 8008a28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	08013bd4 	.word	0x08013bd4
 8008a38:	080142e0 	.word	0x080142e0
 8008a3c:	08013c18 	.word	0x08013c18

08008a40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d119      	bne.n	8008a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008a56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008a5a:	4910      	ldr	r1, [pc, #64]	; (8008a9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008a5c:	4810      	ldr	r0, [pc, #64]	; (8008aa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008a5e:	f009 faad 	bl	8011fbc <iprintf>

  while (pcb != NULL) {
 8008a62:	e011      	b.n	8008a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d108      	bne.n	8008a82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7fe fd26 	bl	80074c8 <tcp_abort>
      pcb = next;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e002      	b.n	8008a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ea      	bne.n	8008a64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	08013bd4 	.word	0x08013bd4
 8008a9c:	08014308 	.word	0x08014308
 8008aa0:	08013c18 	.word	0x08013c18

08008aa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d02a      	beq.n	8008b0a <tcp_netif_ip_addr_changed+0x66>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d026      	beq.n	8008b0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008abc:	4b15      	ldr	r3, [pc, #84]	; (8008b14 <tcp_netif_ip_addr_changed+0x70>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff ffbc 	bl	8008a40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008ac8:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <tcp_netif_ip_addr_changed+0x74>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff ffb6 	bl	8008a40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d017      	beq.n	8008b0a <tcp_netif_ip_addr_changed+0x66>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d013      	beq.n	8008b0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <tcp_netif_ip_addr_changed+0x78>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e00c      	b.n	8008b04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d103      	bne.n	8008afe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1ef      	bne.n	8008aea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20006838 	.word	0x20006838
 8008b18:	20006830 	.word	0x20006830
 8008b1c:	20006834 	.word	0x20006834

08008b20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff fb57 	bl	80081e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008b48:	b590      	push	{r4, r7, lr}
 8008b4a:	b08d      	sub	sp, #52	; 0x34
 8008b4c:	af04      	add	r7, sp, #16
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <tcp_input+0x1c>
 8008b58:	4b9b      	ldr	r3, [pc, #620]	; (8008dc8 <tcp_input+0x280>)
 8008b5a:	2283      	movs	r2, #131	; 0x83
 8008b5c:	499b      	ldr	r1, [pc, #620]	; (8008dcc <tcp_input+0x284>)
 8008b5e:	489c      	ldr	r0, [pc, #624]	; (8008dd0 <tcp_input+0x288>)
 8008b60:	f009 fa2c 	bl	8011fbc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	4a9a      	ldr	r2, [pc, #616]	; (8008dd4 <tcp_input+0x28c>)
 8008b6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	895b      	ldrh	r3, [r3, #10]
 8008b70:	2b13      	cmp	r3, #19
 8008b72:	f240 83d1 	bls.w	8009318 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b76:	4b98      	ldr	r3, [pc, #608]	; (8008dd8 <tcp_input+0x290>)
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	4a97      	ldr	r2, [pc, #604]	; (8008dd8 <tcp_input+0x290>)
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f008 f9eb 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 83c7 	bne.w	800931c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008b8e:	4b92      	ldr	r3, [pc, #584]	; (8008dd8 <tcp_input+0x290>)
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b96:	2be0      	cmp	r3, #224	; 0xe0
 8008b98:	f000 83c0 	beq.w	800931c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008b9c:	4b8d      	ldr	r3, [pc, #564]	; (8008dd4 <tcp_input+0x28c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	899b      	ldrh	r3, [r3, #12]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fc fc3b 	bl	8005420 <lwip_htons>
 8008baa:	4603      	mov	r3, r0
 8008bac:	0b1b      	lsrs	r3, r3, #12
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008bb6:	7cbb      	ldrb	r3, [r7, #18]
 8008bb8:	2b13      	cmp	r3, #19
 8008bba:	f240 83b1 	bls.w	8009320 <tcp_input+0x7d8>
 8008bbe:	7cbb      	ldrb	r3, [r7, #18]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	891b      	ldrh	r3, [r3, #8]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	f200 83aa 	bhi.w	8009320 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008bcc:	7cbb      	ldrb	r3, [r7, #18]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b14      	subs	r3, #20
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	4b81      	ldr	r3, [pc, #516]	; (8008ddc <tcp_input+0x294>)
 8008bd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008bd8:	4b81      	ldr	r3, [pc, #516]	; (8008de0 <tcp_input+0x298>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	895a      	ldrh	r2, [r3, #10]
 8008be2:	7cbb      	ldrb	r3, [r7, #18]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d309      	bcc.n	8008bfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008bea:	4b7c      	ldr	r3, [pc, #496]	; (8008ddc <tcp_input+0x294>)
 8008bec:	881a      	ldrh	r2, [r3, #0]
 8008bee:	4b7d      	ldr	r3, [pc, #500]	; (8008de4 <tcp_input+0x29c>)
 8008bf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008bf2:	7cbb      	ldrb	r3, [r7, #18]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7fd fe48 	bl	800688c <pbuf_remove_header>
 8008bfc:	e04e      	b.n	8008c9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <tcp_input+0xca>
 8008c06:	4b70      	ldr	r3, [pc, #448]	; (8008dc8 <tcp_input+0x280>)
 8008c08:	22c2      	movs	r2, #194	; 0xc2
 8008c0a:	4977      	ldr	r1, [pc, #476]	; (8008de8 <tcp_input+0x2a0>)
 8008c0c:	4870      	ldr	r0, [pc, #448]	; (8008dd0 <tcp_input+0x288>)
 8008c0e:	f009 f9d5 	bl	8011fbc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008c12:	2114      	movs	r1, #20
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7fd fe39 	bl	800688c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	895a      	ldrh	r2, [r3, #10]
 8008c1e:	4b71      	ldr	r3, [pc, #452]	; (8008de4 <tcp_input+0x29c>)
 8008c20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008c22:	4b6e      	ldr	r3, [pc, #440]	; (8008ddc <tcp_input+0x294>)
 8008c24:	881a      	ldrh	r2, [r3, #0]
 8008c26:	4b6f      	ldr	r3, [pc, #444]	; (8008de4 <tcp_input+0x29c>)
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008c2e:	4b6d      	ldr	r3, [pc, #436]	; (8008de4 <tcp_input+0x29c>)
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fd fe29 	bl	800688c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	895b      	ldrh	r3, [r3, #10]
 8008c40:	8a3a      	ldrh	r2, [r7, #16]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	f200 836e 	bhi.w	8009324 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4a64      	ldr	r2, [pc, #400]	; (8008de0 <tcp_input+0x298>)
 8008c50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	8a3a      	ldrh	r2, [r7, #16]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd fe16 	bl	800688c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	891a      	ldrh	r2, [r3, #8]
 8008c64:	8a3b      	ldrh	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	895b      	ldrh	r3, [r3, #10]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <tcp_input+0x13a>
 8008c76:	4b54      	ldr	r3, [pc, #336]	; (8008dc8 <tcp_input+0x280>)
 8008c78:	22df      	movs	r2, #223	; 0xdf
 8008c7a:	495c      	ldr	r1, [pc, #368]	; (8008dec <tcp_input+0x2a4>)
 8008c7c:	4854      	ldr	r0, [pc, #336]	; (8008dd0 <tcp_input+0x288>)
 8008c7e:	f009 f99d 	bl	8011fbc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	891a      	ldrh	r2, [r3, #8]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	891b      	ldrh	r3, [r3, #8]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <tcp_input+0x154>
 8008c90:	4b4d      	ldr	r3, [pc, #308]	; (8008dc8 <tcp_input+0x280>)
 8008c92:	22e0      	movs	r2, #224	; 0xe0
 8008c94:	4956      	ldr	r1, [pc, #344]	; (8008df0 <tcp_input+0x2a8>)
 8008c96:	484e      	ldr	r0, [pc, #312]	; (8008dd0 <tcp_input+0x288>)
 8008c98:	f009 f990 	bl	8011fbc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008c9c:	4b4d      	ldr	r3, [pc, #308]	; (8008dd4 <tcp_input+0x28c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4a4b      	ldr	r2, [pc, #300]	; (8008dd4 <tcp_input+0x28c>)
 8008ca6:	6814      	ldr	r4, [r2, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fc fbb9 	bl	8005420 <lwip_htons>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008cb2:	4b48      	ldr	r3, [pc, #288]	; (8008dd4 <tcp_input+0x28c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4a46      	ldr	r2, [pc, #280]	; (8008dd4 <tcp_input+0x28c>)
 8008cbc:	6814      	ldr	r4, [r2, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fc fbae 	bl	8005420 <lwip_htons>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008cc8:	4b42      	ldr	r3, [pc, #264]	; (8008dd4 <tcp_input+0x28c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	4a41      	ldr	r2, [pc, #260]	; (8008dd4 <tcp_input+0x28c>)
 8008cd0:	6814      	ldr	r4, [r2, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fc fbb9 	bl	800544a <lwip_htonl>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	6063      	str	r3, [r4, #4]
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	4a45      	ldr	r2, [pc, #276]	; (8008df4 <tcp_input+0x2ac>)
 8008ce0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008ce2:	4b3c      	ldr	r3, [pc, #240]	; (8008dd4 <tcp_input+0x28c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4a3a      	ldr	r2, [pc, #232]	; (8008dd4 <tcp_input+0x28c>)
 8008cea:	6814      	ldr	r4, [r2, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fc fbac 	bl	800544a <lwip_htonl>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	4a3f      	ldr	r2, [pc, #252]	; (8008df8 <tcp_input+0x2b0>)
 8008cfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008cfc:	4b35      	ldr	r3, [pc, #212]	; (8008dd4 <tcp_input+0x28c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	89db      	ldrh	r3, [r3, #14]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4a33      	ldr	r2, [pc, #204]	; (8008dd4 <tcp_input+0x28c>)
 8008d06:	6814      	ldr	r4, [r2, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fc fb89 	bl	8005420 <lwip_htons>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008d12:	4b30      	ldr	r3, [pc, #192]	; (8008dd4 <tcp_input+0x28c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	899b      	ldrh	r3, [r3, #12]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fc fb80 	bl	8005420 <lwip_htons>
 8008d20:	4603      	mov	r3, r0
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	4b34      	ldr	r3, [pc, #208]	; (8008dfc <tcp_input+0x2b4>)
 8008d2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	891a      	ldrh	r2, [r3, #8]
 8008d32:	4b33      	ldr	r3, [pc, #204]	; (8008e00 <tcp_input+0x2b8>)
 8008d34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008d36:	4b31      	ldr	r3, [pc, #196]	; (8008dfc <tcp_input+0x2b4>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00c      	beq.n	8008d5c <tcp_input+0x214>
    tcplen++;
 8008d42:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <tcp_input+0x2b8>)
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <tcp_input+0x2b8>)
 8008d4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	891a      	ldrh	r2, [r3, #8]
 8008d52:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <tcp_input+0x2b8>)
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	f200 82e6 	bhi.w	8009328 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <tcp_input+0x2bc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	e09d      	b.n	8008ea4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d105      	bne.n	8008d7c <tcp_input+0x234>
 8008d70:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <tcp_input+0x280>)
 8008d72:	22fb      	movs	r2, #251	; 0xfb
 8008d74:	4924      	ldr	r1, [pc, #144]	; (8008e08 <tcp_input+0x2c0>)
 8008d76:	4816      	ldr	r0, [pc, #88]	; (8008dd0 <tcp_input+0x288>)
 8008d78:	f009 f920 	bl	8011fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	7d1b      	ldrb	r3, [r3, #20]
 8008d80:	2b0a      	cmp	r3, #10
 8008d82:	d105      	bne.n	8008d90 <tcp_input+0x248>
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <tcp_input+0x280>)
 8008d86:	22fc      	movs	r2, #252	; 0xfc
 8008d88:	4920      	ldr	r1, [pc, #128]	; (8008e0c <tcp_input+0x2c4>)
 8008d8a:	4811      	ldr	r0, [pc, #68]	; (8008dd0 <tcp_input+0x288>)
 8008d8c:	f009 f916 	bl	8011fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	7d1b      	ldrb	r3, [r3, #20]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d105      	bne.n	8008da4 <tcp_input+0x25c>
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <tcp_input+0x280>)
 8008d9a:	22fd      	movs	r2, #253	; 0xfd
 8008d9c:	491c      	ldr	r1, [pc, #112]	; (8008e10 <tcp_input+0x2c8>)
 8008d9e:	480c      	ldr	r0, [pc, #48]	; (8008dd0 <tcp_input+0x288>)
 8008da0:	f009 f90c 	bl	8011fbc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	7a1b      	ldrb	r3, [r3, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d033      	beq.n	8008e14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	7a1a      	ldrb	r2, [r3, #8]
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <tcp_input+0x290>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008db8:	3301      	adds	r3, #1
 8008dba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d029      	beq.n	8008e14 <tcp_input+0x2cc>
      prev = pcb;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	61bb      	str	r3, [r7, #24]
      continue;
 8008dc4:	e06b      	b.n	8008e9e <tcp_input+0x356>
 8008dc6:	bf00      	nop
 8008dc8:	0801433c 	.word	0x0801433c
 8008dcc:	08014370 	.word	0x08014370
 8008dd0:	08014388 	.word	0x08014388
 8008dd4:	20006854 	.word	0x20006854
 8008dd8:	2000329c 	.word	0x2000329c
 8008ddc:	20006858 	.word	0x20006858
 8008de0:	2000685c 	.word	0x2000685c
 8008de4:	2000685a 	.word	0x2000685a
 8008de8:	080143b0 	.word	0x080143b0
 8008dec:	080143c0 	.word	0x080143c0
 8008df0:	080143cc 	.word	0x080143cc
 8008df4:	20006864 	.word	0x20006864
 8008df8:	20006868 	.word	0x20006868
 8008dfc:	20006870 	.word	0x20006870
 8008e00:	2000686e 	.word	0x2000686e
 8008e04:	20006838 	.word	0x20006838
 8008e08:	080143ec 	.word	0x080143ec
 8008e0c:	08014414 	.word	0x08014414
 8008e10:	08014440 	.word	0x08014440
    }

    if (pcb->remote_port == tcphdr->src &&
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	8b1a      	ldrh	r2, [r3, #24]
 8008e18:	4b72      	ldr	r3, [pc, #456]	; (8008fe4 <tcp_input+0x49c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d13a      	bne.n	8008e9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	8ada      	ldrh	r2, [r3, #22]
 8008e28:	4b6e      	ldr	r3, [pc, #440]	; (8008fe4 <tcp_input+0x49c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d132      	bne.n	8008e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	4b6b      	ldr	r3, [pc, #428]	; (8008fe8 <tcp_input+0x4a0>)
 8008e3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d12c      	bne.n	8008e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	4b68      	ldr	r3, [pc, #416]	; (8008fe8 <tcp_input+0x4a0>)
 8008e46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d126      	bne.n	8008e9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d106      	bne.n	8008e64 <tcp_input+0x31c>
 8008e56:	4b65      	ldr	r3, [pc, #404]	; (8008fec <tcp_input+0x4a4>)
 8008e58:	f240 120d 	movw	r2, #269	; 0x10d
 8008e5c:	4964      	ldr	r1, [pc, #400]	; (8008ff0 <tcp_input+0x4a8>)
 8008e5e:	4865      	ldr	r0, [pc, #404]	; (8008ff4 <tcp_input+0x4ac>)
 8008e60:	f009 f8ac 	bl	8011fbc <iprintf>
      if (prev != NULL) {
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <tcp_input+0x338>
        prev->next = pcb->next;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008e72:	4b61      	ldr	r3, [pc, #388]	; (8008ff8 <tcp_input+0x4b0>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008e7a:	4a5f      	ldr	r2, [pc, #380]	; (8008ff8 <tcp_input+0x4b0>)
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d111      	bne.n	8008eae <tcp_input+0x366>
 8008e8a:	4b58      	ldr	r3, [pc, #352]	; (8008fec <tcp_input+0x4a4>)
 8008e8c:	f240 1215 	movw	r2, #277	; 0x115
 8008e90:	495a      	ldr	r1, [pc, #360]	; (8008ffc <tcp_input+0x4b4>)
 8008e92:	4858      	ldr	r0, [pc, #352]	; (8008ff4 <tcp_input+0x4ac>)
 8008e94:	f009 f892 	bl	8011fbc <iprintf>
      break;
 8008e98:	e009      	b.n	8008eae <tcp_input+0x366>
    }
    prev = pcb;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f47f af5e 	bne.w	8008d68 <tcp_input+0x220>
 8008eac:	e000      	b.n	8008eb0 <tcp_input+0x368>
      break;
 8008eae:	bf00      	nop
  }

  if (pcb == NULL) {
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 80aa 	bne.w	800900c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008eb8:	4b51      	ldr	r3, [pc, #324]	; (8009000 <tcp_input+0x4b8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	e03f      	b.n	8008f40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	7d1b      	ldrb	r3, [r3, #20]
 8008ec4:	2b0a      	cmp	r3, #10
 8008ec6:	d006      	beq.n	8008ed6 <tcp_input+0x38e>
 8008ec8:	4b48      	ldr	r3, [pc, #288]	; (8008fec <tcp_input+0x4a4>)
 8008eca:	f240 121f 	movw	r2, #287	; 0x11f
 8008ece:	494d      	ldr	r1, [pc, #308]	; (8009004 <tcp_input+0x4bc>)
 8008ed0:	4848      	ldr	r0, [pc, #288]	; (8008ff4 <tcp_input+0x4ac>)
 8008ed2:	f009 f873 	bl	8011fbc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	7a1b      	ldrb	r3, [r3, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	7a1a      	ldrb	r2, [r3, #8]
 8008ee2:	4b41      	ldr	r3, [pc, #260]	; (8008fe8 <tcp_input+0x4a0>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eea:	3301      	adds	r3, #1
 8008eec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d122      	bne.n	8008f38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	8b1a      	ldrh	r2, [r3, #24]
 8008ef6:	4b3b      	ldr	r3, [pc, #236]	; (8008fe4 <tcp_input+0x49c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d11b      	bne.n	8008f3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	8ada      	ldrh	r2, [r3, #22]
 8008f06:	4b37      	ldr	r3, [pc, #220]	; (8008fe4 <tcp_input+0x49c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	885b      	ldrh	r3, [r3, #2]
 8008f0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d113      	bne.n	8008f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b34      	ldr	r3, [pc, #208]	; (8008fe8 <tcp_input+0x4a0>)
 8008f18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d10d      	bne.n	8008f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <tcp_input+0x4a0>)
 8008f24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d107      	bne.n	8008f3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008f2a:	69f8      	ldr	r0, [r7, #28]
 8008f2c:	f000 fb56 	bl	80095dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7fd fd31 	bl	8006998 <pbuf_free>
        return;
 8008f36:	e1fd      	b.n	8009334 <tcp_input+0x7ec>
        continue;
 8008f38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1bc      	bne.n	8008ec0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <tcp_input+0x4c0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e02a      	b.n	8008fa8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	7a1b      	ldrb	r3, [r3, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	7a1a      	ldrb	r2, [r3, #8]
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <tcp_input+0x4a0>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f66:	3301      	adds	r3, #1
 8008f68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d002      	beq.n	8008f74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	61bb      	str	r3, [r7, #24]
        continue;
 8008f72:	e016      	b.n	8008fa2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	8ada      	ldrh	r2, [r3, #22]
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <tcp_input+0x49c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d10c      	bne.n	8008f9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	4b17      	ldr	r3, [pc, #92]	; (8008fe8 <tcp_input+0x4a0>)
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d00f      	beq.n	8008fb0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00d      	beq.n	8008fb2 <tcp_input+0x46a>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1d1      	bne.n	8008f52 <tcp_input+0x40a>
 8008fae:	e000      	b.n	8008fb2 <tcp_input+0x46a>
            break;
 8008fb0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d029      	beq.n	800900c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <tcp_input+0x4c0>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008fce:	4a0e      	ldr	r2, [pc, #56]	; (8009008 <tcp_input+0x4c0>)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008fd4:	6978      	ldr	r0, [r7, #20]
 8008fd6:	f000 fa03 	bl	80093e0 <tcp_listen_input>
      }
      pbuf_free(p);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7fd fcdc 	bl	8006998 <pbuf_free>
      return;
 8008fe0:	e1a8      	b.n	8009334 <tcp_input+0x7ec>
 8008fe2:	bf00      	nop
 8008fe4:	20006854 	.word	0x20006854
 8008fe8:	2000329c 	.word	0x2000329c
 8008fec:	0801433c 	.word	0x0801433c
 8008ff0:	08014468 	.word	0x08014468
 8008ff4:	08014388 	.word	0x08014388
 8008ff8:	20006838 	.word	0x20006838
 8008ffc:	08014494 	.word	0x08014494
 8009000:	2000683c 	.word	0x2000683c
 8009004:	080144c0 	.word	0x080144c0
 8009008:	20006834 	.word	0x20006834
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8158 	beq.w	80092c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009014:	4b95      	ldr	r3, [pc, #596]	; (800926c <tcp_input+0x724>)
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	891a      	ldrh	r2, [r3, #8]
 800901e:	4b93      	ldr	r3, [pc, #588]	; (800926c <tcp_input+0x724>)
 8009020:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009022:	4a92      	ldr	r2, [pc, #584]	; (800926c <tcp_input+0x724>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009028:	4b91      	ldr	r3, [pc, #580]	; (8009270 <tcp_input+0x728>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a8f      	ldr	r2, [pc, #572]	; (800926c <tcp_input+0x724>)
 800902e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009030:	4b90      	ldr	r3, [pc, #576]	; (8009274 <tcp_input+0x72c>)
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009036:	4b90      	ldr	r3, [pc, #576]	; (8009278 <tcp_input+0x730>)
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800903c:	4b8f      	ldr	r3, [pc, #572]	; (800927c <tcp_input+0x734>)
 800903e:	2200      	movs	r2, #0
 8009040:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009042:	4b8f      	ldr	r3, [pc, #572]	; (8009280 <tcp_input+0x738>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	7b5b      	ldrb	r3, [r3, #13]
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	b2da      	uxtb	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009060:	2b00      	cmp	r3, #0
 8009062:	d017      	beq.n	8009094 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009064:	69f8      	ldr	r0, [r7, #28]
 8009066:	f7ff f843 	bl	80080f0 <tcp_process_refused_data>
 800906a:	4603      	mov	r3, r0
 800906c:	f113 0f0d 	cmn.w	r3, #13
 8009070:	d007      	beq.n	8009082 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00c      	beq.n	8009094 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800907a:	4b82      	ldr	r3, [pc, #520]	; (8009284 <tcp_input+0x73c>)
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 80e3 	bne.w	8009252 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800908c:	69f8      	ldr	r0, [r7, #28]
 800908e:	f003 fe05 	bl	800cc9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009092:	e0de      	b.n	8009252 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009094:	4a7c      	ldr	r2, [pc, #496]	; (8009288 <tcp_input+0x740>)
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800909a:	69f8      	ldr	r0, [r7, #28]
 800909c:	f000 fb18 	bl	80096d0 <tcp_process>
 80090a0:	4603      	mov	r3, r0
 80090a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80090a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090a8:	f113 0f0d 	cmn.w	r3, #13
 80090ac:	f000 80d3 	beq.w	8009256 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80090b0:	4b71      	ldr	r3, [pc, #452]	; (8009278 <tcp_input+0x730>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d015      	beq.n	80090e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <tcp_input+0x590>
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	6912      	ldr	r2, [r2, #16]
 80090d0:	f06f 010d 	mvn.w	r1, #13
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80090d8:	69f9      	ldr	r1, [r7, #28]
 80090da:	486c      	ldr	r0, [pc, #432]	; (800928c <tcp_input+0x744>)
 80090dc:	f7ff fbbc 	bl	8008858 <tcp_pcb_remove>
        tcp_free(pcb);
 80090e0:	69f8      	ldr	r0, [r7, #28]
 80090e2:	f7fd ff09 	bl	8006ef8 <tcp_free>
 80090e6:	e0da      	b.n	800929e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80090ec:	4b63      	ldr	r3, [pc, #396]	; (800927c <tcp_input+0x734>)
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01d      	beq.n	8009130 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80090f4:	4b61      	ldr	r3, [pc, #388]	; (800927c <tcp_input+0x734>)
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00a      	beq.n	800911a <tcp_input+0x5d2>
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	6910      	ldr	r0, [r2, #16]
 800910e:	89fa      	ldrh	r2, [r7, #14]
 8009110:	69f9      	ldr	r1, [r7, #28]
 8009112:	4798      	blx	r3
 8009114:	4603      	mov	r3, r0
 8009116:	74fb      	strb	r3, [r7, #19]
 8009118:	e001      	b.n	800911e <tcp_input+0x5d6>
 800911a:	2300      	movs	r3, #0
 800911c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800911e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009122:	f113 0f0d 	cmn.w	r3, #13
 8009126:	f000 8098 	beq.w	800925a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800912a:	4b54      	ldr	r3, [pc, #336]	; (800927c <tcp_input+0x734>)
 800912c:	2200      	movs	r2, #0
 800912e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009130:	69f8      	ldr	r0, [r7, #28]
 8009132:	f000 f915 	bl	8009360 <tcp_input_delayed_close>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8090 	bne.w	800925e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800913e:	4b4d      	ldr	r3, [pc, #308]	; (8009274 <tcp_input+0x72c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d041      	beq.n	80091ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800914a:	2b00      	cmp	r3, #0
 800914c:	d006      	beq.n	800915c <tcp_input+0x614>
 800914e:	4b50      	ldr	r3, [pc, #320]	; (8009290 <tcp_input+0x748>)
 8009150:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009154:	494f      	ldr	r1, [pc, #316]	; (8009294 <tcp_input+0x74c>)
 8009156:	4850      	ldr	r0, [pc, #320]	; (8009298 <tcp_input+0x750>)
 8009158:	f008 ff30 	bl	8011fbc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	8b5b      	ldrh	r3, [r3, #26]
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <tcp_input+0x72c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f7fd fc13 	bl	8006998 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009172:	69f8      	ldr	r0, [r7, #28]
 8009174:	f7fe f9a8 	bl	80074c8 <tcp_abort>
            goto aborted;
 8009178:	e091      	b.n	800929e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00c      	beq.n	800919e <tcp_input+0x656>
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	6918      	ldr	r0, [r3, #16]
 800918e:	4b39      	ldr	r3, [pc, #228]	; (8009274 <tcp_input+0x72c>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	69f9      	ldr	r1, [r7, #28]
 8009196:	47a0      	blx	r4
 8009198:	4603      	mov	r3, r0
 800919a:	74fb      	strb	r3, [r7, #19]
 800919c:	e008      	b.n	80091b0 <tcp_input+0x668>
 800919e:	4b35      	ldr	r3, [pc, #212]	; (8009274 <tcp_input+0x72c>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	2000      	movs	r0, #0
 80091a8:	f7ff f896 	bl	80082d8 <tcp_recv_null>
 80091ac:	4603      	mov	r3, r0
 80091ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80091b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091b4:	f113 0f0d 	cmn.w	r3, #13
 80091b8:	d053      	beq.n	8009262 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80091ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80091c2:	4b2c      	ldr	r3, [pc, #176]	; (8009274 <tcp_input+0x72c>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80091ca:	4b2b      	ldr	r3, [pc, #172]	; (8009278 <tcp_input+0x730>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d030      	beq.n	8009238 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e2:	7b5a      	ldrb	r2, [r3, #13]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e8:	f042 0220 	orr.w	r2, r2, #32
 80091ec:	b2d2      	uxtb	r2, r2
 80091ee:	735a      	strb	r2, [r3, #13]
 80091f0:	e022      	b.n	8009238 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80091fa:	d005      	beq.n	8009208 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009200:	3301      	adds	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <tcp_input+0x6e2>
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	6918      	ldr	r0, [r3, #16]
 800921c:	2300      	movs	r3, #0
 800921e:	2200      	movs	r2, #0
 8009220:	69f9      	ldr	r1, [r7, #28]
 8009222:	47a0      	blx	r4
 8009224:	4603      	mov	r3, r0
 8009226:	74fb      	strb	r3, [r7, #19]
 8009228:	e001      	b.n	800922e <tcp_input+0x6e6>
 800922a:	2300      	movs	r3, #0
 800922c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800922e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009232:	f113 0f0d 	cmn.w	r3, #13
 8009236:	d016      	beq.n	8009266 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009238:	4b13      	ldr	r3, [pc, #76]	; (8009288 <tcp_input+0x740>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800923e:	69f8      	ldr	r0, [r7, #28]
 8009240:	f000 f88e 	bl	8009360 <tcp_input_delayed_close>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d128      	bne.n	800929c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800924a:	69f8      	ldr	r0, [r7, #28]
 800924c:	f002 ff20 	bl	800c090 <tcp_output>
 8009250:	e025      	b.n	800929e <tcp_input+0x756>
        goto aborted;
 8009252:	bf00      	nop
 8009254:	e023      	b.n	800929e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009256:	bf00      	nop
 8009258:	e021      	b.n	800929e <tcp_input+0x756>
              goto aborted;
 800925a:	bf00      	nop
 800925c:	e01f      	b.n	800929e <tcp_input+0x756>
          goto aborted;
 800925e:	bf00      	nop
 8009260:	e01d      	b.n	800929e <tcp_input+0x756>
            goto aborted;
 8009262:	bf00      	nop
 8009264:	e01b      	b.n	800929e <tcp_input+0x756>
              goto aborted;
 8009266:	bf00      	nop
 8009268:	e019      	b.n	800929e <tcp_input+0x756>
 800926a:	bf00      	nop
 800926c:	20006844 	.word	0x20006844
 8009270:	20006854 	.word	0x20006854
 8009274:	20006874 	.word	0x20006874
 8009278:	20006871 	.word	0x20006871
 800927c:	2000686c 	.word	0x2000686c
 8009280:	20006870 	.word	0x20006870
 8009284:	2000686e 	.word	0x2000686e
 8009288:	20006878 	.word	0x20006878
 800928c:	20006838 	.word	0x20006838
 8009290:	0801433c 	.word	0x0801433c
 8009294:	080144f0 	.word	0x080144f0
 8009298:	08014388 	.word	0x08014388
          goto aborted;
 800929c:	bf00      	nop
    tcp_input_pcb = NULL;
 800929e:	4b27      	ldr	r3, [pc, #156]	; (800933c <tcp_input+0x7f4>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80092a4:	4b26      	ldr	r3, [pc, #152]	; (8009340 <tcp_input+0x7f8>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80092aa:	4b26      	ldr	r3, [pc, #152]	; (8009344 <tcp_input+0x7fc>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d03f      	beq.n	8009332 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <tcp_input+0x7fc>)
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fd fb6e 	bl	8006998 <pbuf_free>
      inseg.p = NULL;
 80092bc:	4b21      	ldr	r3, [pc, #132]	; (8009344 <tcp_input+0x7fc>)
 80092be:	2200      	movs	r2, #0
 80092c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80092c2:	e036      	b.n	8009332 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80092c4:	4b20      	ldr	r3, [pc, #128]	; (8009348 <tcp_input+0x800>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	899b      	ldrh	r3, [r3, #12]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fc f8a7 	bl	8005420 <lwip_htons>
 80092d2:	4603      	mov	r3, r0
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0304 	and.w	r3, r3, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d118      	bne.n	8009310 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092de:	4b1b      	ldr	r3, [pc, #108]	; (800934c <tcp_input+0x804>)
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <tcp_input+0x808>)
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	4b1a      	ldr	r3, [pc, #104]	; (8009354 <tcp_input+0x80c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092ee:	4b16      	ldr	r3, [pc, #88]	; (8009348 <tcp_input+0x800>)
 80092f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092f2:	885b      	ldrh	r3, [r3, #2]
 80092f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092f6:	4a14      	ldr	r2, [pc, #80]	; (8009348 <tcp_input+0x800>)
 80092f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092fa:	8812      	ldrh	r2, [r2, #0]
 80092fc:	b292      	uxth	r2, r2
 80092fe:	9202      	str	r2, [sp, #8]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	4b15      	ldr	r3, [pc, #84]	; (8009358 <tcp_input+0x810>)
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <tcp_input+0x814>)
 8009308:	4602      	mov	r2, r0
 800930a:	2000      	movs	r0, #0
 800930c:	f003 fc74 	bl	800cbf8 <tcp_rst>
    pbuf_free(p);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7fd fb41 	bl	8006998 <pbuf_free>
  return;
 8009316:	e00c      	b.n	8009332 <tcp_input+0x7ea>
    goto dropped;
 8009318:	bf00      	nop
 800931a:	e006      	b.n	800932a <tcp_input+0x7e2>
    goto dropped;
 800931c:	bf00      	nop
 800931e:	e004      	b.n	800932a <tcp_input+0x7e2>
    goto dropped;
 8009320:	bf00      	nop
 8009322:	e002      	b.n	800932a <tcp_input+0x7e2>
      goto dropped;
 8009324:	bf00      	nop
 8009326:	e000      	b.n	800932a <tcp_input+0x7e2>
      goto dropped;
 8009328:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fd fb34 	bl	8006998 <pbuf_free>
 8009330:	e000      	b.n	8009334 <tcp_input+0x7ec>
  return;
 8009332:	bf00      	nop
}
 8009334:	3724      	adds	r7, #36	; 0x24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd90      	pop	{r4, r7, pc}
 800933a:	bf00      	nop
 800933c:	20006878 	.word	0x20006878
 8009340:	20006874 	.word	0x20006874
 8009344:	20006844 	.word	0x20006844
 8009348:	20006854 	.word	0x20006854
 800934c:	20006868 	.word	0x20006868
 8009350:	2000686e 	.word	0x2000686e
 8009354:	20006864 	.word	0x20006864
 8009358:	200032ac 	.word	0x200032ac
 800935c:	200032b0 	.word	0x200032b0

08009360 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <tcp_input_delayed_close+0x1c>
 800936e:	4b17      	ldr	r3, [pc, #92]	; (80093cc <tcp_input_delayed_close+0x6c>)
 8009370:	f240 225a 	movw	r2, #602	; 0x25a
 8009374:	4916      	ldr	r1, [pc, #88]	; (80093d0 <tcp_input_delayed_close+0x70>)
 8009376:	4817      	ldr	r0, [pc, #92]	; (80093d4 <tcp_input_delayed_close+0x74>)
 8009378:	f008 fe20 	bl	8011fbc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800937c:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <tcp_input_delayed_close+0x78>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01c      	beq.n	80093c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	8b5b      	ldrh	r3, [r3, #26]
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10d      	bne.n	80093b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939a:	2b00      	cmp	r3, #0
 800939c:	d008      	beq.n	80093b0 <tcp_input_delayed_close+0x50>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	6912      	ldr	r2, [r2, #16]
 80093a8:	f06f 010e 	mvn.w	r1, #14
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	480a      	ldr	r0, [pc, #40]	; (80093dc <tcp_input_delayed_close+0x7c>)
 80093b4:	f7ff fa50 	bl	8008858 <tcp_pcb_remove>
    tcp_free(pcb);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fd fd9d 	bl	8006ef8 <tcp_free>
    return 1;
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0801433c 	.word	0x0801433c
 80093d0:	0801450c 	.word	0x0801450c
 80093d4:	08014388 	.word	0x08014388
 80093d8:	20006871 	.word	0x20006871
 80093dc:	20006838 	.word	0x20006838

080093e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b08b      	sub	sp, #44	; 0x2c
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80093e8:	4b6f      	ldr	r3, [pc, #444]	; (80095a8 <tcp_listen_input+0x1c8>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 80d2 	bne.w	800959a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <tcp_listen_input+0x2a>
 80093fc:	4b6b      	ldr	r3, [pc, #428]	; (80095ac <tcp_listen_input+0x1cc>)
 80093fe:	f240 2281 	movw	r2, #641	; 0x281
 8009402:	496b      	ldr	r1, [pc, #428]	; (80095b0 <tcp_listen_input+0x1d0>)
 8009404:	486b      	ldr	r0, [pc, #428]	; (80095b4 <tcp_listen_input+0x1d4>)
 8009406:	f008 fdd9 	bl	8011fbc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800940a:	4b67      	ldr	r3, [pc, #412]	; (80095a8 <tcp_listen_input+0x1c8>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b00      	cmp	r3, #0
 8009414:	d019      	beq.n	800944a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009416:	4b68      	ldr	r3, [pc, #416]	; (80095b8 <tcp_listen_input+0x1d8>)
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	4b68      	ldr	r3, [pc, #416]	; (80095bc <tcp_listen_input+0x1dc>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	4b67      	ldr	r3, [pc, #412]	; (80095c0 <tcp_listen_input+0x1e0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009426:	4b67      	ldr	r3, [pc, #412]	; (80095c4 <tcp_listen_input+0x1e4>)
 8009428:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800942e:	4a65      	ldr	r2, [pc, #404]	; (80095c4 <tcp_listen_input+0x1e4>)
 8009430:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009432:	8812      	ldrh	r2, [r2, #0]
 8009434:	b292      	uxth	r2, r2
 8009436:	9202      	str	r2, [sp, #8]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	4b63      	ldr	r3, [pc, #396]	; (80095c8 <tcp_listen_input+0x1e8>)
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4b63      	ldr	r3, [pc, #396]	; (80095cc <tcp_listen_input+0x1ec>)
 8009440:	4602      	mov	r2, r0
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f003 fbd8 	bl	800cbf8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009448:	e0a9      	b.n	800959e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800944a:	4b57      	ldr	r3, [pc, #348]	; (80095a8 <tcp_listen_input+0x1c8>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80a3 	beq.w	800959e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7d5b      	ldrb	r3, [r3, #21]
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff f85f 	bl	8008520 <tcp_alloc>
 8009462:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d111      	bne.n	800948e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <tcp_listen_input+0xa8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6910      	ldr	r0, [r2, #16]
 800947a:	f04f 32ff 	mov.w	r2, #4294967295
 800947e:	2100      	movs	r1, #0
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	73bb      	strb	r3, [r7, #14]
      return;
 8009486:	e08b      	b.n	80095a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009488:	23f0      	movs	r3, #240	; 0xf0
 800948a:	73bb      	strb	r3, [r7, #14]
      return;
 800948c:	e088      	b.n	80095a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800948e:	4b50      	ldr	r3, [pc, #320]	; (80095d0 <tcp_listen_input+0x1f0>)
 8009490:	695a      	ldr	r2, [r3, #20]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009496:	4b4e      	ldr	r3, [pc, #312]	; (80095d0 <tcp_listen_input+0x1f0>)
 8009498:	691a      	ldr	r2, [r3, #16]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8ada      	ldrh	r2, [r3, #22]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80094a6:	4b47      	ldr	r3, [pc, #284]	; (80095c4 <tcp_listen_input+0x1e4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2203      	movs	r2, #3
 80094b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80094b8:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <tcp_listen_input+0x1e0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f7ff fa58 	bl	8008980 <tcp_next_iss>
 80094d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80094ea:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <tcp_listen_input+0x1e0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691a      	ldr	r2, [r3, #16]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7a5b      	ldrb	r3, [r3, #9]
 8009506:	f003 030c 	and.w	r3, r3, #12
 800950a:	b2da      	uxtb	r2, r3
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7a1a      	ldrb	r2, [r3, #8]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009518:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <tcp_listen_input+0x1f4>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	60da      	str	r2, [r3, #12]
 8009520:	4a2c      	ldr	r2, [pc, #176]	; (80095d4 <tcp_listen_input+0x1f4>)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	f003 fd29 	bl	800cf7c <tcp_timer_needed>
 800952a:	4b2b      	ldr	r3, [pc, #172]	; (80095d8 <tcp_listen_input+0x1f8>)
 800952c:	2201      	movs	r2, #1
 800952e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009530:	6978      	ldr	r0, [r7, #20]
 8009532:	f001 fd8f 	bl	800b054 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009536:	4b23      	ldr	r3, [pc, #140]	; (80095c4 <tcp_listen_input+0x1e4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	89db      	ldrh	r3, [r3, #14]
 800953c:	b29a      	uxth	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3304      	adds	r3, #4
 8009558:	4618      	mov	r0, r3
 800955a:	f007 fa4b 	bl	80109f4 <ip4_route>
 800955e:	4601      	mov	r1, r0
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	3304      	adds	r3, #4
 8009564:	461a      	mov	r2, r3
 8009566:	4620      	mov	r0, r4
 8009568:	f7ff fa30 	bl	80089cc <tcp_eff_send_mss_netif>
 800956c:	4603      	mov	r3, r0
 800956e:	461a      	mov	r2, r3
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009574:	2112      	movs	r1, #18
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f002 fc9c 	bl	800beb4 <tcp_enqueue_flags>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009588:	2100      	movs	r1, #0
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	f7fd fede 	bl	800734c <tcp_abandon>
      return;
 8009590:	e006      	b.n	80095a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f002 fd7c 	bl	800c090 <tcp_output>
  return;
 8009598:	e001      	b.n	800959e <tcp_listen_input+0x1be>
    return;
 800959a:	bf00      	nop
 800959c:	e000      	b.n	80095a0 <tcp_listen_input+0x1c0>
  return;
 800959e:	bf00      	nop
}
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20006870 	.word	0x20006870
 80095ac:	0801433c 	.word	0x0801433c
 80095b0:	08014534 	.word	0x08014534
 80095b4:	08014388 	.word	0x08014388
 80095b8:	20006868 	.word	0x20006868
 80095bc:	2000686e 	.word	0x2000686e
 80095c0:	20006864 	.word	0x20006864
 80095c4:	20006854 	.word	0x20006854
 80095c8:	200032ac 	.word	0x200032ac
 80095cc:	200032b0 	.word	0x200032b0
 80095d0:	2000329c 	.word	0x2000329c
 80095d4:	20006838 	.word	0x20006838
 80095d8:	20006840 	.word	0x20006840

080095dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af04      	add	r7, sp, #16
 80095e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <tcp_timewait_input+0xc8>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d153      	bne.n	8009698 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <tcp_timewait_input+0x28>
 80095f6:	4b2c      	ldr	r3, [pc, #176]	; (80096a8 <tcp_timewait_input+0xcc>)
 80095f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80095fc:	492b      	ldr	r1, [pc, #172]	; (80096ac <tcp_timewait_input+0xd0>)
 80095fe:	482c      	ldr	r0, [pc, #176]	; (80096b0 <tcp_timewait_input+0xd4>)
 8009600:	f008 fcdc 	bl	8011fbc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009604:	4b27      	ldr	r3, [pc, #156]	; (80096a4 <tcp_timewait_input+0xc8>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	f003 0302 	and.w	r3, r3, #2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02a      	beq.n	8009666 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009610:	4b28      	ldr	r3, [pc, #160]	; (80096b4 <tcp_timewait_input+0xd8>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	db2d      	blt.n	800967a <tcp_timewait_input+0x9e>
 800961e:	4b25      	ldr	r3, [pc, #148]	; (80096b4 <tcp_timewait_input+0xd8>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800962a:	440b      	add	r3, r1
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	dc23      	bgt.n	800967a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009632:	4b21      	ldr	r3, [pc, #132]	; (80096b8 <tcp_timewait_input+0xdc>)
 8009634:	6819      	ldr	r1, [r3, #0]
 8009636:	4b21      	ldr	r3, [pc, #132]	; (80096bc <tcp_timewait_input+0xe0>)
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <tcp_timewait_input+0xd8>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009642:	4b1f      	ldr	r3, [pc, #124]	; (80096c0 <tcp_timewait_input+0xe4>)
 8009644:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800964a:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <tcp_timewait_input+0xe4>)
 800964c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800964e:	8812      	ldrh	r2, [r2, #0]
 8009650:	b292      	uxth	r2, r2
 8009652:	9202      	str	r2, [sp, #8]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <tcp_timewait_input+0xe8>)
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4b1b      	ldr	r3, [pc, #108]	; (80096c8 <tcp_timewait_input+0xec>)
 800965c:	4602      	mov	r2, r0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f003 faca 	bl	800cbf8 <tcp_rst>
      return;
 8009664:	e01b      	b.n	800969e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <tcp_timewait_input+0xc8>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009672:	4b16      	ldr	r3, [pc, #88]	; (80096cc <tcp_timewait_input+0xf0>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800967a:	4b10      	ldr	r3, [pc, #64]	; (80096bc <tcp_timewait_input+0xe0>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00c      	beq.n	800969c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8b5b      	ldrh	r3, [r3, #26]
 8009686:	f043 0302 	orr.w	r3, r3, #2
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f002 fcfd 	bl	800c090 <tcp_output>
  }
  return;
 8009696:	e001      	b.n	800969c <tcp_timewait_input+0xc0>
    return;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <tcp_timewait_input+0xc2>
  return;
 800969c:	bf00      	nop
}
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20006870 	.word	0x20006870
 80096a8:	0801433c 	.word	0x0801433c
 80096ac:	08014554 	.word	0x08014554
 80096b0:	08014388 	.word	0x08014388
 80096b4:	20006864 	.word	0x20006864
 80096b8:	20006868 	.word	0x20006868
 80096bc:	2000686e 	.word	0x2000686e
 80096c0:	20006854 	.word	0x20006854
 80096c4:	200032ac 	.word	0x200032ac
 80096c8:	200032b0 	.word	0x200032b0
 80096cc:	2000682c 	.word	0x2000682c

080096d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b08d      	sub	sp, #52	; 0x34
 80096d4:	af04      	add	r7, sp, #16
 80096d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <tcp_process+0x24>
 80096e6:	4b9d      	ldr	r3, [pc, #628]	; (800995c <tcp_process+0x28c>)
 80096e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80096ec:	499c      	ldr	r1, [pc, #624]	; (8009960 <tcp_process+0x290>)
 80096ee:	489d      	ldr	r0, [pc, #628]	; (8009964 <tcp_process+0x294>)
 80096f0:	f008 fc64 	bl	8011fbc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80096f4:	4b9c      	ldr	r3, [pc, #624]	; (8009968 <tcp_process+0x298>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d04e      	beq.n	800979e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7d1b      	ldrb	r3, [r3, #20]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d108      	bne.n	800971a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800970c:	4b97      	ldr	r3, [pc, #604]	; (800996c <tcp_process+0x29c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d123      	bne.n	800975c <tcp_process+0x8c>
        acceptable = 1;
 8009714:	2301      	movs	r3, #1
 8009716:	76fb      	strb	r3, [r7, #27]
 8009718:	e020      	b.n	800975c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800971e:	4b94      	ldr	r3, [pc, #592]	; (8009970 <tcp_process+0x2a0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d102      	bne.n	800972c <tcp_process+0x5c>
        acceptable = 1;
 8009726:	2301      	movs	r3, #1
 8009728:	76fb      	strb	r3, [r7, #27]
 800972a:	e017      	b.n	800975c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800972c:	4b90      	ldr	r3, [pc, #576]	; (8009970 <tcp_process+0x2a0>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	db10      	blt.n	800975c <tcp_process+0x8c>
 800973a:	4b8d      	ldr	r3, [pc, #564]	; (8009970 <tcp_process+0x2a0>)
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009746:	440b      	add	r3, r1
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	dc06      	bgt.n	800975c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	8b5b      	ldrh	r3, [r3, #26]
 8009752:	f043 0302 	orr.w	r3, r3, #2
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800975c:	7efb      	ldrb	r3, [r7, #27]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d01b      	beq.n	800979a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7d1b      	ldrb	r3, [r3, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <tcp_process+0xa8>
 800976a:	4b7c      	ldr	r3, [pc, #496]	; (800995c <tcp_process+0x28c>)
 800976c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009770:	4980      	ldr	r1, [pc, #512]	; (8009974 <tcp_process+0x2a4>)
 8009772:	487c      	ldr	r0, [pc, #496]	; (8009964 <tcp_process+0x294>)
 8009774:	f008 fc22 	bl	8011fbc <iprintf>
      recv_flags |= TF_RESET;
 8009778:	4b7f      	ldr	r3, [pc, #508]	; (8009978 <tcp_process+0x2a8>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	b2da      	uxtb	r2, r3
 8009782:	4b7d      	ldr	r3, [pc, #500]	; (8009978 <tcp_process+0x2a8>)
 8009784:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8b5b      	ldrh	r3, [r3, #26]
 800978a:	f023 0301 	bic.w	r3, r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009794:	f06f 030d 	mvn.w	r3, #13
 8009798:	e37a      	b.n	8009e90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	e378      	b.n	8009e90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800979e:	4b72      	ldr	r3, [pc, #456]	; (8009968 <tcp_process+0x298>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d010      	beq.n	80097cc <tcp_process+0xfc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7d1b      	ldrb	r3, [r3, #20]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d00c      	beq.n	80097cc <tcp_process+0xfc>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	7d1b      	ldrb	r3, [r3, #20]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d008      	beq.n	80097cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	8b5b      	ldrh	r3, [r3, #26]
 80097be:	f043 0302 	orr.w	r3, r3, #2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e361      	b.n	8009e90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	8b5b      	ldrh	r3, [r3, #26]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d103      	bne.n	80097e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80097d8:	4b68      	ldr	r3, [pc, #416]	; (800997c <tcp_process+0x2ac>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fc2f 	bl	800b054 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7d1b      	ldrb	r3, [r3, #20]
 80097fa:	3b02      	subs	r3, #2
 80097fc:	2b07      	cmp	r3, #7
 80097fe:	f200 8337 	bhi.w	8009e70 <tcp_process+0x7a0>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <tcp_process+0x138>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009829 	.word	0x08009829
 800980c:	08009a59 	.word	0x08009a59
 8009810:	08009bd1 	.word	0x08009bd1
 8009814:	08009bfb 	.word	0x08009bfb
 8009818:	08009d1f 	.word	0x08009d1f
 800981c:	08009bd1 	.word	0x08009bd1
 8009820:	08009dab 	.word	0x08009dab
 8009824:	08009e3b 	.word	0x08009e3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009828:	4b4f      	ldr	r3, [pc, #316]	; (8009968 <tcp_process+0x298>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 80e4 	beq.w	80099fe <tcp_process+0x32e>
 8009836:	4b4c      	ldr	r3, [pc, #304]	; (8009968 <tcp_process+0x298>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80dd 	beq.w	80099fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	4b48      	ldr	r3, [pc, #288]	; (800996c <tcp_process+0x29c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	f040 80d5 	bne.w	80099fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009854:	4b46      	ldr	r3, [pc, #280]	; (8009970 <tcp_process+0x2a0>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009866:	4b41      	ldr	r3, [pc, #260]	; (800996c <tcp_process+0x29c>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800986e:	4b44      	ldr	r3, [pc, #272]	; (8009980 <tcp_process+0x2b0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	89db      	ldrh	r3, [r3, #14]
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009888:	4b39      	ldr	r3, [pc, #228]	; (8009970 <tcp_process+0x2a0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2204      	movs	r2, #4
 8009896:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3304      	adds	r3, #4
 80098a0:	4618      	mov	r0, r3
 80098a2:	f007 f8a7 	bl	80109f4 <ip4_route>
 80098a6:	4601      	mov	r1, r0
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	461a      	mov	r2, r3
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff f88c 	bl	80089cc <tcp_eff_send_mss_netif>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098c0:	009a      	lsls	r2, r3, #2
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf38      	it	cc
 80098d0:	460b      	movcc	r3, r1
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d204      	bcs.n	80098e0 <tcp_process+0x210>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	b29b      	uxth	r3, r3
 80098de:	e00d      	b.n	80098fc <tcp_process+0x22c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d904      	bls.n	80098f8 <tcp_process+0x228>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	e001      	b.n	80098fc <tcp_process+0x22c>
 80098f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <tcp_process+0x24a>
 800990c:	4b13      	ldr	r3, [pc, #76]	; (800995c <tcp_process+0x28c>)
 800990e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009912:	491c      	ldr	r1, [pc, #112]	; (8009984 <tcp_process+0x2b4>)
 8009914:	4813      	ldr	r0, [pc, #76]	; (8009964 <tcp_process+0x294>)
 8009916:	f008 fb51 	bl	8011fbc <iprintf>
        --pcb->snd_queuelen;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d12a      	bne.n	800998c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800993a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <tcp_process+0x280>
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <tcp_process+0x28c>)
 8009944:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009948:	490f      	ldr	r1, [pc, #60]	; (8009988 <tcp_process+0x2b8>)
 800994a:	4806      	ldr	r0, [pc, #24]	; (8009964 <tcp_process+0x294>)
 800994c:	f008 fb36 	bl	8011fbc <iprintf>
          pcb->unsent = rseg->next;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	66da      	str	r2, [r3, #108]	; 0x6c
 8009958:	e01c      	b.n	8009994 <tcp_process+0x2c4>
 800995a:	bf00      	nop
 800995c:	0801433c 	.word	0x0801433c
 8009960:	08014574 	.word	0x08014574
 8009964:	08014388 	.word	0x08014388
 8009968:	20006870 	.word	0x20006870
 800996c:	20006868 	.word	0x20006868
 8009970:	20006864 	.word	0x20006864
 8009974:	08014590 	.word	0x08014590
 8009978:	20006871 	.word	0x20006871
 800997c:	2000682c 	.word	0x2000682c
 8009980:	20006854 	.word	0x20006854
 8009984:	080145b0 	.word	0x080145b0
 8009988:	080145c8 	.word	0x080145c8
        } else {
          pcb->unacked = rseg->next;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009994:	69f8      	ldr	r0, [r7, #28]
 8009996:	f7fe fc3c 	bl	8008212 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099a8:	861a      	strh	r2, [r3, #48]	; 0x30
 80099aa:	e006      	b.n	80099ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <tcp_process+0x30a>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6910      	ldr	r0, [r2, #16]
 80099ce:	2200      	movs	r2, #0
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4798      	blx	r3
 80099d4:	4603      	mov	r3, r0
 80099d6:	76bb      	strb	r3, [r7, #26]
 80099d8:	e001      	b.n	80099de <tcp_process+0x30e>
 80099da:	2300      	movs	r3, #0
 80099dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80099de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099e2:	f113 0f0d 	cmn.w	r3, #13
 80099e6:	d102      	bne.n	80099ee <tcp_process+0x31e>
          return ERR_ABRT;
 80099e8:	f06f 030c 	mvn.w	r3, #12
 80099ec:	e250      	b.n	8009e90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8b5b      	ldrh	r3, [r3, #26]
 80099f2:	f043 0302 	orr.w	r3, r3, #2
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80099fc:	e23a      	b.n	8009e74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80099fe:	4b98      	ldr	r3, [pc, #608]	; (8009c60 <tcp_process+0x590>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f003 0310 	and.w	r3, r3, #16
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8234 	beq.w	8009e74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a0c:	4b95      	ldr	r3, [pc, #596]	; (8009c64 <tcp_process+0x594>)
 8009a0e:	6819      	ldr	r1, [r3, #0]
 8009a10:	4b95      	ldr	r3, [pc, #596]	; (8009c68 <tcp_process+0x598>)
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	4b95      	ldr	r3, [pc, #596]	; (8009c6c <tcp_process+0x59c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a1c:	4b94      	ldr	r3, [pc, #592]	; (8009c70 <tcp_process+0x5a0>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a24:	4a92      	ldr	r2, [pc, #584]	; (8009c70 <tcp_process+0x5a0>)
 8009a26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a28:	8812      	ldrh	r2, [r2, #0]
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	9202      	str	r2, [sp, #8]
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	4b90      	ldr	r3, [pc, #576]	; (8009c74 <tcp_process+0x5a4>)
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4b90      	ldr	r3, [pc, #576]	; (8009c78 <tcp_process+0x5a8>)
 8009a36:	4602      	mov	r2, r0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f003 f8dd 	bl	800cbf8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a44:	2b05      	cmp	r3, #5
 8009a46:	f200 8215 	bhi.w	8009e74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f002 fea7 	bl	800c7a4 <tcp_rexmit_rto>
      break;
 8009a56:	e20d      	b.n	8009e74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009a58:	4b81      	ldr	r3, [pc, #516]	; (8009c60 <tcp_process+0x590>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80a1 	beq.w	8009ba8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a66:	4b7f      	ldr	r3, [pc, #508]	; (8009c64 <tcp_process+0x594>)
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db7e      	blt.n	8009b74 <tcp_process+0x4a4>
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <tcp_process+0x594>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dc77      	bgt.n	8009b74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2204      	movs	r2, #4
 8009a88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009a92:	23fa      	movs	r3, #250	; 0xfa
 8009a94:	76bb      	strb	r3, [r7, #26]
 8009a96:	e01d      	b.n	8009ad4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <tcp_process+0x3e0>
 8009aa2:	4b76      	ldr	r3, [pc, #472]	; (8009c7c <tcp_process+0x5ac>)
 8009aa4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009aa8:	4975      	ldr	r1, [pc, #468]	; (8009c80 <tcp_process+0x5b0>)
 8009aaa:	4876      	ldr	r0, [pc, #472]	; (8009c84 <tcp_process+0x5b4>)
 8009aac:	f008 fa86 	bl	8011fbc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <tcp_process+0x400>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6910      	ldr	r0, [r2, #16]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	76bb      	strb	r3, [r7, #26]
 8009ace:	e001      	b.n	8009ad4 <tcp_process+0x404>
 8009ad0:	23f0      	movs	r3, #240	; 0xf0
 8009ad2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009ad4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00a      	beq.n	8009af2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009adc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ae0:	f113 0f0d 	cmn.w	r3, #13
 8009ae4:	d002      	beq.n	8009aec <tcp_process+0x41c>
              tcp_abort(pcb);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fd fcee 	bl	80074c8 <tcp_abort>
            }
            return ERR_ABRT;
 8009aec:	f06f 030c 	mvn.w	r3, #12
 8009af0:	e1ce      	b.n	8009e90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fae0 	bl	800a0b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009af8:	4b63      	ldr	r3, [pc, #396]	; (8009c88 <tcp_process+0x5b8>)
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <tcp_process+0x43c>
            recv_acked--;
 8009b00:	4b61      	ldr	r3, [pc, #388]	; (8009c88 <tcp_process+0x5b8>)
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	4b5f      	ldr	r3, [pc, #380]	; (8009c88 <tcp_process+0x5b8>)
 8009b0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b10:	009a      	lsls	r2, r3, #2
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b1c:	428b      	cmp	r3, r1
 8009b1e:	bf38      	it	cc
 8009b20:	460b      	movcc	r3, r1
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d204      	bcs.n	8009b30 <tcp_process+0x460>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	e00d      	b.n	8009b4c <tcp_process+0x47c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d904      	bls.n	8009b48 <tcp_process+0x478>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	e001      	b.n	8009b4c <tcp_process+0x47c>
 8009b48:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009b52:	4b4e      	ldr	r3, [pc, #312]	; (8009c8c <tcp_process+0x5bc>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d037      	beq.n	8009bce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8b5b      	ldrh	r3, [r3, #26]
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2207      	movs	r2, #7
 8009b70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009b72:	e02c      	b.n	8009bce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b74:	4b3b      	ldr	r3, [pc, #236]	; (8009c64 <tcp_process+0x594>)
 8009b76:	6819      	ldr	r1, [r3, #0]
 8009b78:	4b3b      	ldr	r3, [pc, #236]	; (8009c68 <tcp_process+0x598>)
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4b3b      	ldr	r3, [pc, #236]	; (8009c6c <tcp_process+0x59c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b84:	4b3a      	ldr	r3, [pc, #232]	; (8009c70 <tcp_process+0x5a0>)
 8009b86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b88:	885b      	ldrh	r3, [r3, #2]
 8009b8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b8c:	4a38      	ldr	r2, [pc, #224]	; (8009c70 <tcp_process+0x5a0>)
 8009b8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	b292      	uxth	r2, r2
 8009b94:	9202      	str	r2, [sp, #8]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	4b36      	ldr	r3, [pc, #216]	; (8009c74 <tcp_process+0x5a4>)
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <tcp_process+0x5a8>)
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f003 f829 	bl	800cbf8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009ba6:	e167      	b.n	8009e78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009ba8:	4b2d      	ldr	r3, [pc, #180]	; (8009c60 <tcp_process+0x590>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8161 	beq.w	8009e78 <tcp_process+0x7a8>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	1e5a      	subs	r2, r3, #1
 8009bbc:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <tcp_process+0x59c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	f040 8159 	bne.w	8009e78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fe0e 	bl	800c7e8 <tcp_rexmit>
      break;
 8009bcc:	e154      	b.n	8009e78 <tcp_process+0x7a8>
 8009bce:	e153      	b.n	8009e78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa71 	bl	800a0b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009bd6:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <tcp_process+0x5bc>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 814c 	beq.w	8009e7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8b5b      	ldrh	r3, [r3, #26]
 8009be8:	f043 0302 	orr.w	r3, r3, #2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009bf8:	e140      	b.n	8009e7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa5c 	bl	800a0b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c00:	4b22      	ldr	r3, [pc, #136]	; (8009c8c <tcp_process+0x5bc>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d071      	beq.n	8009cf0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c0c:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <tcp_process+0x590>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d060      	beq.n	8009cda <tcp_process+0x60a>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c1c:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <tcp_process+0x594>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d15a      	bne.n	8009cda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d156      	bne.n	8009cda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	8b5b      	ldrh	r3, [r3, #26]
 8009c30:	f043 0302 	orr.w	r3, r3, #2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fe fdbc 	bl	80087b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009c40:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <tcp_process+0x5c0>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d105      	bne.n	8009c56 <tcp_process+0x586>
 8009c4a:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <tcp_process+0x5c0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <tcp_process+0x5c0>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	e02e      	b.n	8009cb4 <tcp_process+0x5e4>
 8009c56:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <tcp_process+0x5c0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e027      	b.n	8009cae <tcp_process+0x5de>
 8009c5e:	bf00      	nop
 8009c60:	20006870 	.word	0x20006870
 8009c64:	20006868 	.word	0x20006868
 8009c68:	2000686e 	.word	0x2000686e
 8009c6c:	20006864 	.word	0x20006864
 8009c70:	20006854 	.word	0x20006854
 8009c74:	200032ac 	.word	0x200032ac
 8009c78:	200032b0 	.word	0x200032b0
 8009c7c:	0801433c 	.word	0x0801433c
 8009c80:	080145dc 	.word	0x080145dc
 8009c84:	08014388 	.word	0x08014388
 8009c88:	2000686c 	.word	0x2000686c
 8009c8c:	20006871 	.word	0x20006871
 8009c90:	20006838 	.word	0x20006838
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d104      	bne.n	8009ca8 <tcp_process+0x5d8>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	60da      	str	r2, [r3, #12]
 8009ca6:	e005      	b.n	8009cb4 <tcp_process+0x5e4>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	617b      	str	r3, [r7, #20]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1ef      	bne.n	8009c94 <tcp_process+0x5c4>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	4b77      	ldr	r3, [pc, #476]	; (8009e98 <tcp_process+0x7c8>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	220a      	movs	r2, #10
 8009cc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009cc6:	4b75      	ldr	r3, [pc, #468]	; (8009e9c <tcp_process+0x7cc>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	60da      	str	r2, [r3, #12]
 8009cce:	4a73      	ldr	r2, [pc, #460]	; (8009e9c <tcp_process+0x7cc>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	f003 f952 	bl	800cf7c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009cd8:	e0d2      	b.n	8009e80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8b5b      	ldrh	r3, [r3, #26]
 8009cde:	f043 0302 	orr.w	r3, r3, #2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2208      	movs	r2, #8
 8009cec:	751a      	strb	r2, [r3, #20]
      break;
 8009cee:	e0c7      	b.n	8009e80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009cf0:	4b6b      	ldr	r3, [pc, #428]	; (8009ea0 <tcp_process+0x7d0>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80c1 	beq.w	8009e80 <tcp_process+0x7b0>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d02:	4b68      	ldr	r3, [pc, #416]	; (8009ea4 <tcp_process+0x7d4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	f040 80ba 	bne.w	8009e80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 80b5 	bne.w	8009e80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2206      	movs	r2, #6
 8009d1a:	751a      	strb	r2, [r3, #20]
      break;
 8009d1c:	e0b0      	b.n	8009e80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f9ca 	bl	800a0b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d24:	4b60      	ldr	r3, [pc, #384]	; (8009ea8 <tcp_process+0x7d8>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80a9 	beq.w	8009e84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8b5b      	ldrh	r3, [r3, #26]
 8009d36:	f043 0302 	orr.w	r3, r3, #2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7fe fd39 	bl	80087b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d46:	4b59      	ldr	r3, [pc, #356]	; (8009eac <tcp_process+0x7dc>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d105      	bne.n	8009d5c <tcp_process+0x68c>
 8009d50:	4b56      	ldr	r3, [pc, #344]	; (8009eac <tcp_process+0x7dc>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	4a55      	ldr	r2, [pc, #340]	; (8009eac <tcp_process+0x7dc>)
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	e013      	b.n	8009d84 <tcp_process+0x6b4>
 8009d5c:	4b53      	ldr	r3, [pc, #332]	; (8009eac <tcp_process+0x7dc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e00c      	b.n	8009d7e <tcp_process+0x6ae>
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d104      	bne.n	8009d78 <tcp_process+0x6a8>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	e005      	b.n	8009d84 <tcp_process+0x6b4>
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1ef      	bne.n	8009d64 <tcp_process+0x694>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	60da      	str	r2, [r3, #12]
 8009d8a:	4b43      	ldr	r3, [pc, #268]	; (8009e98 <tcp_process+0x7c8>)
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	220a      	movs	r2, #10
 8009d94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009d96:	4b41      	ldr	r3, [pc, #260]	; (8009e9c <tcp_process+0x7cc>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]
 8009d9e:	4a3f      	ldr	r2, [pc, #252]	; (8009e9c <tcp_process+0x7cc>)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	f003 f8ea 	bl	800cf7c <tcp_timer_needed>
      }
      break;
 8009da8:	e06c      	b.n	8009e84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f984 	bl	800a0b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009db0:	4b3b      	ldr	r3, [pc, #236]	; (8009ea0 <tcp_process+0x7d0>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d065      	beq.n	8009e88 <tcp_process+0x7b8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dc0:	4b38      	ldr	r3, [pc, #224]	; (8009ea4 <tcp_process+0x7d4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d15f      	bne.n	8009e88 <tcp_process+0x7b8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d15b      	bne.n	8009e88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7fe fcf1 	bl	80087b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009dd6:	4b35      	ldr	r3, [pc, #212]	; (8009eac <tcp_process+0x7dc>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d105      	bne.n	8009dec <tcp_process+0x71c>
 8009de0:	4b32      	ldr	r3, [pc, #200]	; (8009eac <tcp_process+0x7dc>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	4a31      	ldr	r2, [pc, #196]	; (8009eac <tcp_process+0x7dc>)
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	e013      	b.n	8009e14 <tcp_process+0x744>
 8009dec:	4b2f      	ldr	r3, [pc, #188]	; (8009eac <tcp_process+0x7dc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e00c      	b.n	8009e0e <tcp_process+0x73e>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d104      	bne.n	8009e08 <tcp_process+0x738>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68da      	ldr	r2, [r3, #12]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	60da      	str	r2, [r3, #12]
 8009e06:	e005      	b.n	8009e14 <tcp_process+0x744>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1ef      	bne.n	8009df4 <tcp_process+0x724>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	60da      	str	r2, [r3, #12]
 8009e1a:	4b1f      	ldr	r3, [pc, #124]	; (8009e98 <tcp_process+0x7c8>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	220a      	movs	r2, #10
 8009e24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <tcp_process+0x7cc>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	4a1b      	ldr	r2, [pc, #108]	; (8009e9c <tcp_process+0x7cc>)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	f003 f8a2 	bl	800cf7c <tcp_timer_needed>
      }
      break;
 8009e38:	e026      	b.n	8009e88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f93c 	bl	800a0b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <tcp_process+0x7d0>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01f      	beq.n	8009e8c <tcp_process+0x7bc>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e50:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <tcp_process+0x7d4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d119      	bne.n	8009e8c <tcp_process+0x7bc>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d115      	bne.n	8009e8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009e60:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <tcp_process+0x7d8>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f043 0310 	orr.w	r3, r3, #16
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ea8 <tcp_process+0x7d8>)
 8009e6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009e6e:	e00d      	b.n	8009e8c <tcp_process+0x7bc>
    default:
      break;
 8009e70:	bf00      	nop
 8009e72:	e00c      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e74:	bf00      	nop
 8009e76:	e00a      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e008      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e006      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e80:	bf00      	nop
 8009e82:	e004      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e84:	bf00      	nop
 8009e86:	e002      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e88:	bf00      	nop
 8009e8a:	e000      	b.n	8009e8e <tcp_process+0x7be>
      break;
 8009e8c:	bf00      	nop
  }
  return ERR_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3724      	adds	r7, #36	; 0x24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd90      	pop	{r4, r7, pc}
 8009e98:	20006840 	.word	0x20006840
 8009e9c:	2000683c 	.word	0x2000683c
 8009ea0:	20006870 	.word	0x20006870
 8009ea4:	20006868 	.word	0x20006868
 8009ea8:	20006871 	.word	0x20006871
 8009eac:	20006838 	.word	0x20006838

08009eb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <tcp_oos_insert_segment+0x1e>
 8009ec0:	4b3b      	ldr	r3, [pc, #236]	; (8009fb0 <tcp_oos_insert_segment+0x100>)
 8009ec2:	f240 421f 	movw	r2, #1055	; 0x41f
 8009ec6:	493b      	ldr	r1, [pc, #236]	; (8009fb4 <tcp_oos_insert_segment+0x104>)
 8009ec8:	483b      	ldr	r0, [pc, #236]	; (8009fb8 <tcp_oos_insert_segment+0x108>)
 8009eca:	f008 f877 	bl	8011fbc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	899b      	ldrh	r3, [r3, #12]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fb faa2 	bl	8005420 <lwip_htons>
 8009edc:	4603      	mov	r3, r0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d028      	beq.n	8009f3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009ee8:	6838      	ldr	r0, [r7, #0]
 8009eea:	f7fe f97d 	bl	80081e8 <tcp_segs_free>
    next = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	e056      	b.n	8009fa2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	899b      	ldrh	r3, [r3, #12]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fb fa8f 	bl	8005420 <lwip_htons>
 8009f02:	4603      	mov	r3, r0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00d      	beq.n	8009f2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	899b      	ldrh	r3, [r3, #12]
 8009f14:	b29c      	uxth	r4, r3
 8009f16:	2001      	movs	r0, #1
 8009f18:	f7fb fa82 	bl	8005420 <lwip_htons>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4322      	orrs	r2, r4
 8009f26:	b292      	uxth	r2, r2
 8009f28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f7fe f96c 	bl	8008212 <tcp_seg_free>
    while (next &&
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00e      	beq.n	8009f5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	891b      	ldrh	r3, [r3, #8]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <tcp_oos_insert_segment+0x10c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	8909      	ldrh	r1, [r1, #8]
 8009f56:	440b      	add	r3, r1
 8009f58:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	daca      	bge.n	8009ef4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01e      	beq.n	8009fa2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	891b      	ldrh	r3, [r3, #8]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <tcp_oos_insert_segment+0x10c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	441a      	add	r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dd12      	ble.n	8009fa2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <tcp_oos_insert_segment+0x10c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	891b      	ldrh	r3, [r3, #8]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fc fb75 	bl	800668c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	601a      	str	r2, [r3, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd90      	pop	{r4, r7, pc}
 8009fb0:	0801433c 	.word	0x0801433c
 8009fb4:	080145fc 	.word	0x080145fc
 8009fb8:	08014388 	.word	0x08014388
 8009fbc:	20006864 	.word	0x20006864

08009fc0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009fc0:	b5b0      	push	{r4, r5, r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009fce:	e03e      	b.n	800a04e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fc fd62 	bl	8006aa8 <pbuf_clen>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fee:	8a7a      	ldrh	r2, [r7, #18]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d906      	bls.n	800a002 <tcp_free_acked_segments+0x42>
 8009ff4:	4b2a      	ldr	r3, [pc, #168]	; (800a0a0 <tcp_free_acked_segments+0xe0>)
 8009ff6:	f240 4257 	movw	r2, #1111	; 0x457
 8009ffa:	492a      	ldr	r1, [pc, #168]	; (800a0a4 <tcp_free_acked_segments+0xe4>)
 8009ffc:	482a      	ldr	r0, [pc, #168]	; (800a0a8 <tcp_free_acked_segments+0xe8>)
 8009ffe:	f007 ffdd 	bl	8011fbc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a008:	8a7b      	ldrh	r3, [r7, #18]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	891a      	ldrh	r2, [r3, #8]
 800a018:	4b24      	ldr	r3, [pc, #144]	; (800a0ac <tcp_free_acked_segments+0xec>)
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	4413      	add	r3, r2
 800a01e:	b29a      	uxth	r2, r3
 800a020:	4b22      	ldr	r3, [pc, #136]	; (800a0ac <tcp_free_acked_segments+0xec>)
 800a022:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a024:	6978      	ldr	r0, [r7, #20]
 800a026:	f7fe f8f4 	bl	8008212 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00c      	beq.n	800a04e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d109      	bne.n	800a04e <tcp_free_acked_segments+0x8e>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <tcp_free_acked_segments+0x8e>
 800a040:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <tcp_free_acked_segments+0xe0>)
 800a042:	f240 4261 	movw	r2, #1121	; 0x461
 800a046:	491a      	ldr	r1, [pc, #104]	; (800a0b0 <tcp_free_acked_segments+0xf0>)
 800a048:	4817      	ldr	r0, [pc, #92]	; (800a0a8 <tcp_free_acked_segments+0xe8>)
 800a04a:	f007 ffb7 	bl	8011fbc <iprintf>
  while (seg_list != NULL &&
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d020      	beq.n	800a096 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fb f9f5 	bl	800544a <lwip_htonl>
 800a060:	4604      	mov	r4, r0
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	891b      	ldrh	r3, [r3, #8]
 800a066:	461d      	mov	r5, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	899b      	ldrh	r3, [r3, #12]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	4618      	mov	r0, r3
 800a072:	f7fb f9d5 	bl	8005420 <lwip_htons>
 800a076:	4603      	mov	r3, r0
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <tcp_free_acked_segments+0xc6>
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <tcp_free_acked_segments+0xc8>
 800a086:	2300      	movs	r3, #0
 800a088:	442b      	add	r3, r5
 800a08a:	18e2      	adds	r2, r4, r3
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <tcp_free_acked_segments+0xf4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a092:	2b00      	cmp	r3, #0
 800a094:	dd9c      	ble.n	8009fd0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a096:	68bb      	ldr	r3, [r7, #8]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a0:	0801433c 	.word	0x0801433c
 800a0a4:	08014624 	.word	0x08014624
 800a0a8:	08014388 	.word	0x08014388
 800a0ac:	2000686c 	.word	0x2000686c
 800a0b0:	0801464c 	.word	0x0801464c
 800a0b4:	20006868 	.word	0x20006868

0800a0b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a0b8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ba:	b094      	sub	sp, #80	; 0x50
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <tcp_receive+0x20>
 800a0ca:	4b91      	ldr	r3, [pc, #580]	; (800a310 <tcp_receive+0x258>)
 800a0cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800a0d0:	4990      	ldr	r1, [pc, #576]	; (800a314 <tcp_receive+0x25c>)
 800a0d2:	4891      	ldr	r0, [pc, #580]	; (800a318 <tcp_receive+0x260>)
 800a0d4:	f007 ff72 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7d1b      	ldrb	r3, [r3, #20]
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d806      	bhi.n	800a0ee <tcp_receive+0x36>
 800a0e0:	4b8b      	ldr	r3, [pc, #556]	; (800a310 <tcp_receive+0x258>)
 800a0e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800a0e6:	498d      	ldr	r1, [pc, #564]	; (800a31c <tcp_receive+0x264>)
 800a0e8:	488b      	ldr	r0, [pc, #556]	; (800a318 <tcp_receive+0x260>)
 800a0ea:	f007 ff67 	bl	8011fbc <iprintf>

  if (flags & TCP_ACK) {
 800a0ee:	4b8c      	ldr	r3, [pc, #560]	; (800a320 <tcp_receive+0x268>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f003 0310 	and.w	r3, r3, #16
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8264 	beq.w	800a5c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a108:	4413      	add	r3, r2
 800a10a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a110:	4b84      	ldr	r3, [pc, #528]	; (800a324 <tcp_receive+0x26c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	db1b      	blt.n	800a152 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a11e:	4b81      	ldr	r3, [pc, #516]	; (800a324 <tcp_receive+0x26c>)
 800a120:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a122:	429a      	cmp	r2, r3
 800a124:	d106      	bne.n	800a134 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a12a:	4b7f      	ldr	r3, [pc, #508]	; (800a328 <tcp_receive+0x270>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	db0e      	blt.n	800a152 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a138:	4b7b      	ldr	r3, [pc, #492]	; (800a328 <tcp_receive+0x270>)
 800a13a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d125      	bne.n	800a18c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a140:	4b7a      	ldr	r3, [pc, #488]	; (800a32c <tcp_receive+0x274>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	89db      	ldrh	r3, [r3, #14]
 800a146:	b29a      	uxth	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a14e:	429a      	cmp	r2, r3
 800a150:	d91c      	bls.n	800a18c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a152:	4b76      	ldr	r3, [pc, #472]	; (800a32c <tcp_receive+0x274>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	89db      	ldrh	r3, [r3, #14]
 800a158:	b29a      	uxth	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d205      	bcs.n	800a17c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a17c:	4b69      	ldr	r3, [pc, #420]	; (800a324 <tcp_receive+0x26c>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a184:	4b68      	ldr	r3, [pc, #416]	; (800a328 <tcp_receive+0x270>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a18c:	4b66      	ldr	r3, [pc, #408]	; (800a328 <tcp_receive+0x270>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc58      	bgt.n	800a24c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a19a:	4b65      	ldr	r3, [pc, #404]	; (800a330 <tcp_receive+0x278>)
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d14b      	bne.n	800a23a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a1ac:	4413      	add	r3, r2
 800a1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d142      	bne.n	800a23a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	db3d      	blt.n	800a23a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1c2:	4b59      	ldr	r3, [pc, #356]	; (800a328 <tcp_receive+0x270>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d137      	bne.n	800a23a <tcp_receive+0x182>
              found_dupack = 1;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1d4:	2bff      	cmp	r3, #255	; 0xff
 800a1d6:	d007      	beq.n	800a1e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1de:	3301      	adds	r3, #1
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d91b      	bls.n	800a22a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a206:	429a      	cmp	r2, r3
 800a208:	d30a      	bcc.n	800a220 <tcp_receive+0x168>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a214:	4413      	add	r3, r2
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a21e:	e004      	b.n	800a22a <tcp_receive+0x172>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a230:	2b02      	cmp	r3, #2
 800a232:	d902      	bls.n	800a23a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f002 fb43 	bl	800c8c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 8161 	bne.w	800a504 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a24a:	e15b      	b.n	800a504 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <tcp_receive+0x270>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f2c0 814e 	blt.w	800a4fa <tcp_receive+0x442>
 800a25e:	4b32      	ldr	r3, [pc, #200]	; (800a328 <tcp_receive+0x270>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f300 8146 	bgt.w	800a4fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	8b5b      	ldrh	r3, [r3, #26]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d010      	beq.n	800a29c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	8b5b      	ldrh	r3, [r3, #26]
 800a27e:	f023 0304 	bic.w	r3, r3, #4
 800a282:	b29a      	uxth	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2aa:	10db      	asrs	r3, r3, #3
 800a2ac:	b21b      	sxth	r3, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b21a      	sxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a2c4:	4b18      	ldr	r3, [pc, #96]	; (800a328 <tcp_receive+0x270>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a2dc:	4b12      	ldr	r3, [pc, #72]	; (800a328 <tcp_receive+0x270>)
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7d1b      	ldrb	r3, [r3, #20]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	f240 8097 	bls.w	800a41c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d245      	bcs.n	800a38a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	8b5b      	ldrh	r3, [r3, #26]
 800a302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a306:	2b00      	cmp	r3, #0
 800a308:	d014      	beq.n	800a334 <tcp_receive+0x27c>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e013      	b.n	800a336 <tcp_receive+0x27e>
 800a30e:	bf00      	nop
 800a310:	0801433c 	.word	0x0801433c
 800a314:	0801466c 	.word	0x0801466c
 800a318:	08014388 	.word	0x08014388
 800a31c:	08014688 	.word	0x08014688
 800a320:	20006870 	.word	0x20006870
 800a324:	20006864 	.word	0x20006864
 800a328:	20006868 	.word	0x20006868
 800a32c:	20006854 	.word	0x20006854
 800a330:	2000686e 	.word	0x2000686e
 800a334:	2302      	movs	r3, #2
 800a336:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a33a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a344:	fb12 f303 	smulbb	r3, r2, r3
 800a348:	b29b      	uxth	r3, r3
 800a34a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a34c:	4293      	cmp	r3, r2
 800a34e:	bf28      	it	cs
 800a350:	4613      	movcs	r3, r2
 800a352:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a35a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a35c:	4413      	add	r3, r2
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a366:	429a      	cmp	r2, r3
 800a368:	d309      	bcc.n	800a37e <tcp_receive+0x2c6>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a372:	4413      	add	r3, r2
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a37c:	e04e      	b.n	800a41c <tcp_receive+0x364>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a388:	e048      	b.n	800a41c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a392:	4413      	add	r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d309      	bcc.n	800a3b4 <tcp_receive+0x2fc>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a3b2:	e004      	b.n	800a3be <tcp_receive+0x306>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d326      	bcc.n	800a41c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3ee:	4413      	add	r3, r2
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d30a      	bcc.n	800a412 <tcp_receive+0x35a>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a406:	4413      	add	r3, r2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a410:	e004      	b.n	800a41c <tcp_receive+0x364>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a424:	4a98      	ldr	r2, [pc, #608]	; (800a688 <tcp_receive+0x5d0>)
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fdca 	bl	8009fc0 <tcp_free_acked_segments>
 800a42c:	4602      	mov	r2, r0
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43a:	4a94      	ldr	r2, [pc, #592]	; (800a68c <tcp_receive+0x5d4>)
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fdbf 	bl	8009fc0 <tcp_free_acked_segments>
 800a442:	4602      	mov	r2, r0
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a456:	861a      	strh	r2, [r3, #48]	; 0x30
 800a458:	e002      	b.n	800a460 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a47c:	4b84      	ldr	r3, [pc, #528]	; (800a690 <tcp_receive+0x5d8>)
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	4413      	add	r3, r2
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	8b5b      	ldrh	r3, [r3, #26]
 800a48e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a492:	2b00      	cmp	r3, #0
 800a494:	d035      	beq.n	800a502 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d118      	bne.n	800a4d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00c      	beq.n	800a4c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fa ffc9 	bl	800544a <lwip_htonl>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc20      	bgt.n	800a502 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	8b5b      	ldrh	r3, [r3, #26]
 800a4c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4ce:	e018      	b.n	800a502 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fa ffb4 	bl	800544a <lwip_htonl>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	1ae3      	subs	r3, r4, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dc0b      	bgt.n	800a502 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	8b5b      	ldrh	r3, [r3, #26]
 800a4ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4f8:	e003      	b.n	800a502 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f002 fbce 	bl	800cc9c <tcp_send_empty_ack>
 800a500:	e000      	b.n	800a504 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a502:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d05b      	beq.n	800a5c4 <tcp_receive+0x50c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a510:	4b60      	ldr	r3, [pc, #384]	; (800a694 <tcp_receive+0x5dc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	da54      	bge.n	800a5c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a51a:	4b5f      	ldr	r3, [pc, #380]	; (800a698 <tcp_receive+0x5e0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a524:	b29b      	uxth	r3, r3
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a52e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a538:	10db      	asrs	r3, r3, #3
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	b29b      	uxth	r3, r3
 800a542:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a552:	4413      	add	r3, r2
 800a554:	b29b      	uxth	r3, r3
 800a556:	b21a      	sxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a55c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a560:	2b00      	cmp	r3, #0
 800a562:	da05      	bge.n	800a570 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a568:	425b      	negs	r3, r3
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a570:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a57a:	109b      	asrs	r3, r3, #2
 800a57c:	b21b      	sxth	r3, r3
 800a57e:	b29b      	uxth	r3, r3
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	b29b      	uxth	r3, r3
 800a584:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a594:	4413      	add	r3, r2
 800a596:	b29b      	uxth	r3, r3
 800a598:	b21a      	sxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5a4:	10db      	asrs	r3, r3, #3
 800a5a6:	b21b      	sxth	r3, r3
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	b21a      	sxth	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a5c4:	4b35      	ldr	r3, [pc, #212]	; (800a69c <tcp_receive+0x5e4>)
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 84e2 	beq.w	800af92 <tcp_receive+0xeda>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7d1b      	ldrb	r3, [r3, #20]
 800a5d2:	2b06      	cmp	r3, #6
 800a5d4:	f200 84dd 	bhi.w	800af92 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5dc:	4b30      	ldr	r3, [pc, #192]	; (800a6a0 <tcp_receive+0x5e8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f2c0 808f 	blt.w	800a708 <tcp_receive+0x650>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <tcp_receive+0x5e4>)
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4b2a      	ldr	r3, [pc, #168]	; (800a6a0 <tcp_receive+0x5e8>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	440b      	add	r3, r1
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f300 8082 	bgt.w	800a708 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a604:	4b27      	ldr	r3, [pc, #156]	; (800a6a4 <tcp_receive+0x5ec>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60e:	4b24      	ldr	r3, [pc, #144]	; (800a6a0 <tcp_receive+0x5e8>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a616:	4b23      	ldr	r3, [pc, #140]	; (800a6a4 <tcp_receive+0x5ec>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <tcp_receive+0x574>
 800a61e:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <tcp_receive+0x5f0>)
 800a620:	f240 5294 	movw	r2, #1428	; 0x594
 800a624:	4921      	ldr	r1, [pc, #132]	; (800a6ac <tcp_receive+0x5f4>)
 800a626:	4822      	ldr	r0, [pc, #136]	; (800a6b0 <tcp_receive+0x5f8>)
 800a628:	f007 fcc8 	bl	8011fbc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a632:	4293      	cmp	r3, r2
 800a634:	d906      	bls.n	800a644 <tcp_receive+0x58c>
 800a636:	4b1c      	ldr	r3, [pc, #112]	; (800a6a8 <tcp_receive+0x5f0>)
 800a638:	f240 5295 	movw	r2, #1429	; 0x595
 800a63c:	491d      	ldr	r1, [pc, #116]	; (800a6b4 <tcp_receive+0x5fc>)
 800a63e:	481c      	ldr	r0, [pc, #112]	; (800a6b0 <tcp_receive+0x5f8>)
 800a640:	f007 fcbc 	bl	8011fbc <iprintf>
      off = (u16_t)off32;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a64a:	4b16      	ldr	r3, [pc, #88]	; (800a6a4 <tcp_receive+0x5ec>)
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	891b      	ldrh	r3, [r3, #8]
 800a650:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a654:	429a      	cmp	r2, r3
 800a656:	d906      	bls.n	800a666 <tcp_receive+0x5ae>
 800a658:	4b13      	ldr	r3, [pc, #76]	; (800a6a8 <tcp_receive+0x5f0>)
 800a65a:	f240 5297 	movw	r2, #1431	; 0x597
 800a65e:	4916      	ldr	r1, [pc, #88]	; (800a6b8 <tcp_receive+0x600>)
 800a660:	4813      	ldr	r0, [pc, #76]	; (800a6b0 <tcp_receive+0x5f8>)
 800a662:	f007 fcab 	bl	8011fbc <iprintf>
      inseg.len -= off;
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <tcp_receive+0x5ec>)
 800a668:	891a      	ldrh	r2, [r3, #8]
 800a66a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	b29a      	uxth	r2, r3
 800a672:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <tcp_receive+0x5ec>)
 800a674:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a676:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <tcp_receive+0x5ec>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	891a      	ldrh	r2, [r3, #8]
 800a67c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a684:	e02a      	b.n	800a6dc <tcp_receive+0x624>
 800a686:	bf00      	nop
 800a688:	080146a4 	.word	0x080146a4
 800a68c:	080146ac 	.word	0x080146ac
 800a690:	2000686c 	.word	0x2000686c
 800a694:	20006868 	.word	0x20006868
 800a698:	2000682c 	.word	0x2000682c
 800a69c:	2000686e 	.word	0x2000686e
 800a6a0:	20006864 	.word	0x20006864
 800a6a4:	20006844 	.word	0x20006844
 800a6a8:	0801433c 	.word	0x0801433c
 800a6ac:	080146b4 	.word	0x080146b4
 800a6b0:	08014388 	.word	0x08014388
 800a6b4:	080146c4 	.word	0x080146c4
 800a6b8:	080146d4 	.word	0x080146d4
        off -= p->len;
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6be:	895b      	ldrh	r3, [r3, #10]
 800a6c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6de:	895b      	ldrh	r3, [r3, #10]
 800a6e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d8e9      	bhi.n	800a6bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a6e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a6f0:	f7fc f8cc 	bl	800688c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	4a91      	ldr	r2, [pc, #580]	; (800a940 <tcp_receive+0x888>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	4b91      	ldr	r3, [pc, #580]	; (800a944 <tcp_receive+0x88c>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	4a8f      	ldr	r2, [pc, #572]	; (800a940 <tcp_receive+0x888>)
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a706:	e00d      	b.n	800a724 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a708:	4b8d      	ldr	r3, [pc, #564]	; (800a940 <tcp_receive+0x888>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	da06      	bge.n	800a724 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	8b5b      	ldrh	r3, [r3, #26]
 800a71a:	f043 0302 	orr.w	r3, r3, #2
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a724:	4b86      	ldr	r3, [pc, #536]	; (800a940 <tcp_receive+0x888>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f2c0 842a 	blt.w	800af88 <tcp_receive+0xed0>
 800a734:	4b82      	ldr	r3, [pc, #520]	; (800a940 <tcp_receive+0x888>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a740:	440b      	add	r3, r1
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	3301      	adds	r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	f300 841e 	bgt.w	800af88 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a750:	4b7b      	ldr	r3, [pc, #492]	; (800a940 <tcp_receive+0x888>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	f040 829a 	bne.w	800ac8e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a75a:	4b7a      	ldr	r3, [pc, #488]	; (800a944 <tcp_receive+0x88c>)
 800a75c:	891c      	ldrh	r4, [r3, #8]
 800a75e:	4b79      	ldr	r3, [pc, #484]	; (800a944 <tcp_receive+0x88c>)
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	899b      	ldrh	r3, [r3, #12]
 800a764:	b29b      	uxth	r3, r3
 800a766:	4618      	mov	r0, r3
 800a768:	f7fa fe5a 	bl	8005420 <lwip_htons>
 800a76c:	4603      	mov	r3, r0
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <tcp_receive+0x6c4>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <tcp_receive+0x6c6>
 800a77c:	2300      	movs	r3, #0
 800a77e:	4423      	add	r3, r4
 800a780:	b29a      	uxth	r2, r3
 800a782:	4b71      	ldr	r3, [pc, #452]	; (800a948 <tcp_receive+0x890>)
 800a784:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a78a:	4b6f      	ldr	r3, [pc, #444]	; (800a948 <tcp_receive+0x890>)
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d275      	bcs.n	800a87e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a792:	4b6c      	ldr	r3, [pc, #432]	; (800a944 <tcp_receive+0x88c>)
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	899b      	ldrh	r3, [r3, #12]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fa fe40 	bl	8005420 <lwip_htons>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01f      	beq.n	800a7ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a7ac:	4b65      	ldr	r3, [pc, #404]	; (800a944 <tcp_receive+0x88c>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	899b      	ldrh	r3, [r3, #12]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	b21b      	sxth	r3, r3
 800a7b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7ba:	b21c      	sxth	r4, r3
 800a7bc:	4b61      	ldr	r3, [pc, #388]	; (800a944 <tcp_receive+0x88c>)
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fa fe2b 	bl	8005420 <lwip_htons>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fa fe22 	bl	8005420 <lwip_htons>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4323      	orrs	r3, r4
 800a7e2:	b21a      	sxth	r2, r3
 800a7e4:	4b57      	ldr	r3, [pc, #348]	; (800a944 <tcp_receive+0x88c>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7f0:	4b54      	ldr	r3, [pc, #336]	; (800a944 <tcp_receive+0x88c>)
 800a7f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a7f4:	4b53      	ldr	r3, [pc, #332]	; (800a944 <tcp_receive+0x88c>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	899b      	ldrh	r3, [r3, #12]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fa fe0f 	bl	8005420 <lwip_htons>
 800a802:	4603      	mov	r3, r0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <tcp_receive+0x762>
            inseg.len -= 1;
 800a80e:	4b4d      	ldr	r3, [pc, #308]	; (800a944 <tcp_receive+0x88c>)
 800a810:	891b      	ldrh	r3, [r3, #8]
 800a812:	3b01      	subs	r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	4b4b      	ldr	r3, [pc, #300]	; (800a944 <tcp_receive+0x88c>)
 800a818:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a81a:	4b4a      	ldr	r3, [pc, #296]	; (800a944 <tcp_receive+0x88c>)
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	4a49      	ldr	r2, [pc, #292]	; (800a944 <tcp_receive+0x88c>)
 800a820:	8912      	ldrh	r2, [r2, #8]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fb ff31 	bl	800668c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a82a:	4b46      	ldr	r3, [pc, #280]	; (800a944 <tcp_receive+0x88c>)
 800a82c:	891c      	ldrh	r4, [r3, #8]
 800a82e:	4b45      	ldr	r3, [pc, #276]	; (800a944 <tcp_receive+0x88c>)
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	899b      	ldrh	r3, [r3, #12]
 800a834:	b29b      	uxth	r3, r3
 800a836:	4618      	mov	r0, r3
 800a838:	f7fa fdf2 	bl	8005420 <lwip_htons>
 800a83c:	4603      	mov	r3, r0
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	f003 0303 	and.w	r3, r3, #3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <tcp_receive+0x794>
 800a848:	2301      	movs	r3, #1
 800a84a:	e000      	b.n	800a84e <tcp_receive+0x796>
 800a84c:	2300      	movs	r3, #0
 800a84e:	4423      	add	r3, r4
 800a850:	b29a      	uxth	r2, r3
 800a852:	4b3d      	ldr	r3, [pc, #244]	; (800a948 <tcp_receive+0x890>)
 800a854:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a856:	4b3c      	ldr	r3, [pc, #240]	; (800a948 <tcp_receive+0x890>)
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b38      	ldr	r3, [pc, #224]	; (800a940 <tcp_receive+0x888>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	441a      	add	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a86a:	440b      	add	r3, r1
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d006      	beq.n	800a87e <tcp_receive+0x7c6>
 800a870:	4b36      	ldr	r3, [pc, #216]	; (800a94c <tcp_receive+0x894>)
 800a872:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a876:	4936      	ldr	r1, [pc, #216]	; (800a950 <tcp_receive+0x898>)
 800a878:	4836      	ldr	r0, [pc, #216]	; (800a954 <tcp_receive+0x89c>)
 800a87a:	f007 fb9f 	bl	8011fbc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80e7 	beq.w	800aa56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a888:	4b2e      	ldr	r3, [pc, #184]	; (800a944 <tcp_receive+0x88c>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	899b      	ldrh	r3, [r3, #12]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4618      	mov	r0, r3
 800a892:	f7fa fdc5 	bl	8005420 <lwip_htons>
 800a896:	4603      	mov	r3, r0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d010      	beq.n	800a8c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a8a2:	e00a      	b.n	800a8ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f7fd fcac 	bl	8008212 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1f0      	bne.n	800a8a4 <tcp_receive+0x7ec>
 800a8c2:	e0c8      	b.n	800aa56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a8ca:	e052      	b.n	800a972 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	899b      	ldrh	r3, [r3, #12]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fa fda3 	bl	8005420 <lwip_htons>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d03d      	beq.n	800a962 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a8e6:	4b17      	ldr	r3, [pc, #92]	; (800a944 <tcp_receive+0x88c>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	899b      	ldrh	r3, [r3, #12]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fa fd96 	bl	8005420 <lwip_htons>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d130      	bne.n	800a962 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a900:	4b10      	ldr	r3, [pc, #64]	; (800a944 <tcp_receive+0x88c>)
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	b29c      	uxth	r4, r3
 800a908:	2001      	movs	r0, #1
 800a90a:	f7fa fd89 	bl	8005420 <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <tcp_receive+0x88c>)
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4322      	orrs	r2, r4
 800a918:	b292      	uxth	r2, r2
 800a91a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <tcp_receive+0x88c>)
 800a91e:	891c      	ldrh	r4, [r3, #8]
 800a920:	4b08      	ldr	r3, [pc, #32]	; (800a944 <tcp_receive+0x88c>)
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	899b      	ldrh	r3, [r3, #12]
 800a926:	b29b      	uxth	r3, r3
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fa fd79 	bl	8005420 <lwip_htons>
 800a92e:	4603      	mov	r3, r0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <tcp_receive+0x8a0>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e00d      	b.n	800a95a <tcp_receive+0x8a2>
 800a93e:	bf00      	nop
 800a940:	20006864 	.word	0x20006864
 800a944:	20006844 	.word	0x20006844
 800a948:	2000686e 	.word	0x2000686e
 800a94c:	0801433c 	.word	0x0801433c
 800a950:	080146e4 	.word	0x080146e4
 800a954:	08014388 	.word	0x08014388
 800a958:	2300      	movs	r3, #0
 800a95a:	4423      	add	r3, r4
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	4b98      	ldr	r3, [pc, #608]	; (800abc0 <tcp_receive+0xb08>)
 800a960:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a964:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a96c:	6938      	ldr	r0, [r7, #16]
 800a96e:	f7fd fc50 	bl	8008212 <tcp_seg_free>
            while (next &&
 800a972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a978:	4b91      	ldr	r3, [pc, #580]	; (800abc0 <tcp_receive+0xb08>)
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	461a      	mov	r2, r3
 800a97e:	4b91      	ldr	r3, [pc, #580]	; (800abc4 <tcp_receive+0xb0c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	441a      	add	r2, r3
 800a984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a98c:	8909      	ldrh	r1, [r1, #8]
 800a98e:	440b      	add	r3, r1
 800a990:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a992:	2b00      	cmp	r3, #0
 800a994:	da9a      	bge.n	800a8cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d059      	beq.n	800aa50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a99c:	4b88      	ldr	r3, [pc, #544]	; (800abc0 <tcp_receive+0xb08>)
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4b88      	ldr	r3, [pc, #544]	; (800abc4 <tcp_receive+0xb0c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	441a      	add	r2, r3
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dd4d      	ble.n	800aa50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	4b81      	ldr	r3, [pc, #516]	; (800abc4 <tcp_receive+0xb0c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	4b80      	ldr	r3, [pc, #512]	; (800abc8 <tcp_receive+0xb10>)
 800a9c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	; (800abc8 <tcp_receive+0xb10>)
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	899b      	ldrh	r3, [r3, #12]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fa fd24 	bl	8005420 <lwip_htons>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <tcp_receive+0x938>
                inseg.len -= 1;
 800a9e4:	4b78      	ldr	r3, [pc, #480]	; (800abc8 <tcp_receive+0xb10>)
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	4b76      	ldr	r3, [pc, #472]	; (800abc8 <tcp_receive+0xb10>)
 800a9ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a9f0:	4b75      	ldr	r3, [pc, #468]	; (800abc8 <tcp_receive+0xb10>)
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4a74      	ldr	r2, [pc, #464]	; (800abc8 <tcp_receive+0xb10>)
 800a9f6:	8912      	ldrh	r2, [r2, #8]
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fb fe46 	bl	800668c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa00:	4b71      	ldr	r3, [pc, #452]	; (800abc8 <tcp_receive+0xb10>)
 800aa02:	891c      	ldrh	r4, [r3, #8]
 800aa04:	4b70      	ldr	r3, [pc, #448]	; (800abc8 <tcp_receive+0xb10>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	899b      	ldrh	r3, [r3, #12]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fa fd07 	bl	8005420 <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <tcp_receive+0x96a>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e000      	b.n	800aa24 <tcp_receive+0x96c>
 800aa22:	2300      	movs	r3, #0
 800aa24:	4423      	add	r3, r4
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	4b65      	ldr	r3, [pc, #404]	; (800abc0 <tcp_receive+0xb08>)
 800aa2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa2c:	4b64      	ldr	r3, [pc, #400]	; (800abc0 <tcp_receive+0xb08>)
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	461a      	mov	r2, r3
 800aa32:	4b64      	ldr	r3, [pc, #400]	; (800abc4 <tcp_receive+0xb0c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	441a      	add	r2, r3
 800aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d006      	beq.n	800aa50 <tcp_receive+0x998>
 800aa42:	4b62      	ldr	r3, [pc, #392]	; (800abcc <tcp_receive+0xb14>)
 800aa44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800aa48:	4961      	ldr	r1, [pc, #388]	; (800abd0 <tcp_receive+0xb18>)
 800aa4a:	4862      	ldr	r0, [pc, #392]	; (800abd4 <tcp_receive+0xb1c>)
 800aa4c:	f007 fab6 	bl	8011fbc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aa56:	4b5a      	ldr	r3, [pc, #360]	; (800abc0 <tcp_receive+0xb08>)
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	4b59      	ldr	r3, [pc, #356]	; (800abc4 <tcp_receive+0xb0c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	441a      	add	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa6a:	4b55      	ldr	r3, [pc, #340]	; (800abc0 <tcp_receive+0xb08>)
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d206      	bcs.n	800aa80 <tcp_receive+0x9c8>
 800aa72:	4b56      	ldr	r3, [pc, #344]	; (800abcc <tcp_receive+0xb14>)
 800aa74:	f240 6207 	movw	r2, #1543	; 0x607
 800aa78:	4957      	ldr	r1, [pc, #348]	; (800abd8 <tcp_receive+0xb20>)
 800aa7a:	4856      	ldr	r0, [pc, #344]	; (800abd4 <tcp_receive+0xb1c>)
 800aa7c:	f007 fa9e 	bl	8011fbc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa84:	4b4e      	ldr	r3, [pc, #312]	; (800abc0 <tcp_receive+0xb08>)
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7fc fe99 	bl	80077c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aa96:	4b4c      	ldr	r3, [pc, #304]	; (800abc8 <tcp_receive+0xb10>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	891b      	ldrh	r3, [r3, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d006      	beq.n	800aaae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aaa0:	4b49      	ldr	r3, [pc, #292]	; (800abc8 <tcp_receive+0xb10>)
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	4a4d      	ldr	r2, [pc, #308]	; (800abdc <tcp_receive+0xb24>)
 800aaa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aaa8:	4b47      	ldr	r3, [pc, #284]	; (800abc8 <tcp_receive+0xb10>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aaae:	4b46      	ldr	r3, [pc, #280]	; (800abc8 <tcp_receive+0xb10>)
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	899b      	ldrh	r3, [r3, #12]
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fa fcb2 	bl	8005420 <lwip_htons>
 800aabc:	4603      	mov	r3, r0
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 0301 	and.w	r3, r3, #1
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 80b8 	beq.w	800ac3a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aaca:	4b45      	ldr	r3, [pc, #276]	; (800abe0 <tcp_receive+0xb28>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	f043 0320 	orr.w	r3, r3, #32
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	4b42      	ldr	r3, [pc, #264]	; (800abe0 <tcp_receive+0xb28>)
 800aad6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aad8:	e0af      	b.n	800ac3a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aade:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a36      	ldr	r2, [pc, #216]	; (800abc4 <tcp_receive+0xb0c>)
 800aaea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	891b      	ldrh	r3, [r3, #8]
 800aaf0:	461c      	mov	r4, r3
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	899b      	ldrh	r3, [r3, #12]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fa fc90 	bl	8005420 <lwip_htons>
 800ab00:	4603      	mov	r3, r0
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <tcp_receive+0xa58>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <tcp_receive+0xa5a>
 800ab10:	2300      	movs	r3, #0
 800ab12:	191a      	adds	r2, r3, r4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	441a      	add	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab22:	461c      	mov	r4, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	891b      	ldrh	r3, [r3, #8]
 800ab28:	461d      	mov	r5, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	899b      	ldrh	r3, [r3, #12]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fa fc74 	bl	8005420 <lwip_htons>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	f003 0303 	and.w	r3, r3, #3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <tcp_receive+0xa90>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <tcp_receive+0xa92>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	442b      	add	r3, r5
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	d206      	bcs.n	800ab5e <tcp_receive+0xaa6>
 800ab50:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <tcp_receive+0xb14>)
 800ab52:	f240 622b 	movw	r2, #1579	; 0x62b
 800ab56:	4923      	ldr	r1, [pc, #140]	; (800abe4 <tcp_receive+0xb2c>)
 800ab58:	481e      	ldr	r0, [pc, #120]	; (800abd4 <tcp_receive+0xb1c>)
 800ab5a:	f007 fa2f 	bl	8011fbc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	891b      	ldrh	r3, [r3, #8]
 800ab62:	461c      	mov	r4, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	899b      	ldrh	r3, [r3, #12]
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fa fc57 	bl	8005420 <lwip_htons>
 800ab72:	4603      	mov	r3, r0
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f003 0303 	and.w	r3, r3, #3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <tcp_receive+0xaca>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e000      	b.n	800ab84 <tcp_receive+0xacc>
 800ab82:	2300      	movs	r3, #0
 800ab84:	1919      	adds	r1, r3, r4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab8a:	b28b      	uxth	r3, r1
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7fc fe17 	bl	80077c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	891b      	ldrh	r3, [r3, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d028      	beq.n	800abf6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aba4:	4b0d      	ldr	r3, [pc, #52]	; (800abdc <tcp_receive+0xb24>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01d      	beq.n	800abe8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800abac:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <tcp_receive+0xb24>)
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	4619      	mov	r1, r3
 800abb6:	4610      	mov	r0, r2
 800abb8:	f7fb ffb0 	bl	8006b1c <pbuf_cat>
 800abbc:	e018      	b.n	800abf0 <tcp_receive+0xb38>
 800abbe:	bf00      	nop
 800abc0:	2000686e 	.word	0x2000686e
 800abc4:	20006864 	.word	0x20006864
 800abc8:	20006844 	.word	0x20006844
 800abcc:	0801433c 	.word	0x0801433c
 800abd0:	0801471c 	.word	0x0801471c
 800abd4:	08014388 	.word	0x08014388
 800abd8:	08014758 	.word	0x08014758
 800abdc:	20006874 	.word	0x20006874
 800abe0:	20006871 	.word	0x20006871
 800abe4:	08014778 	.word	0x08014778
            } else {
              recv_data = cseg->p;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4a70      	ldr	r2, [pc, #448]	; (800adb0 <tcp_receive+0xcf8>)
 800abee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fa fc0e 	bl	8005420 <lwip_htons>
 800ac04:	4603      	mov	r3, r0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00d      	beq.n	800ac2c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ac10:	4b68      	ldr	r3, [pc, #416]	; (800adb4 <tcp_receive+0xcfc>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f043 0320 	orr.w	r3, r3, #32
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4b66      	ldr	r3, [pc, #408]	; (800adb4 <tcp_receive+0xcfc>)
 800ac1c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7d1b      	ldrb	r3, [r3, #20]
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d102      	bne.n	800ac2c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2207      	movs	r2, #7
 800ac2a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7fd faec 	bl	8008212 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	f43f af43 	beq.w	800aada <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8b5b      	ldrh	r3, [r3, #26]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <tcp_receive+0xbc6>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8b5b      	ldrh	r3, [r3, #26]
 800ac64:	f023 0301 	bic.w	r3, r3, #1
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	835a      	strh	r2, [r3, #26]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	8b5b      	ldrh	r3, [r3, #26]
 800ac72:	f043 0302 	orr.w	r3, r3, #2
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac7c:	e188      	b.n	800af90 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	8b5b      	ldrh	r3, [r3, #26]
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac8c:	e180      	b.n	800af90 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ac96:	4848      	ldr	r0, [pc, #288]	; (800adb8 <tcp_receive+0xd00>)
 800ac98:	f7fd faf2 	bl	8008280 <tcp_seg_copy>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	675a      	str	r2, [r3, #116]	; 0x74
 800aca2:	e16d      	b.n	800af80 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acac:	63bb      	str	r3, [r7, #56]	; 0x38
 800acae:	e157      	b.n	800af60 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	4b41      	ldr	r3, [pc, #260]	; (800adbc <tcp_receive+0xd04>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d11d      	bne.n	800acfa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800acbe:	4b3e      	ldr	r3, [pc, #248]	; (800adb8 <tcp_receive+0xd00>)
 800acc0:	891a      	ldrh	r2, [r3, #8]
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	891b      	ldrh	r3, [r3, #8]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f240 814f 	bls.w	800af6a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800accc:	483a      	ldr	r0, [pc, #232]	; (800adb8 <tcp_receive+0xd00>)
 800acce:	f7fd fad7 	bl	8008280 <tcp_seg_copy>
 800acd2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8149 	beq.w	800af6e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800acdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <tcp_receive+0xc32>
                    prev->next = cseg;
 800ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	e002      	b.n	800acf0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800acf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acf2:	6978      	ldr	r0, [r7, #20]
 800acf4:	f7ff f8dc 	bl	8009eb0 <tcp_oos_insert_segment>
                }
                break;
 800acf8:	e139      	b.n	800af6e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d117      	bne.n	800ad30 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad00:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <tcp_receive+0xd04>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	da57      	bge.n	800adc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad10:	4829      	ldr	r0, [pc, #164]	; (800adb8 <tcp_receive+0xd00>)
 800ad12:	f7fd fab5 	bl	8008280 <tcp_seg_copy>
 800ad16:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 8129 	beq.w	800af72 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ad26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad28:	69b8      	ldr	r0, [r7, #24]
 800ad2a:	f7ff f8c1 	bl	8009eb0 <tcp_oos_insert_segment>
                  }
                  break;
 800ad2e:	e120      	b.n	800af72 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad30:	4b22      	ldr	r3, [pc, #136]	; (800adbc <tcp_receive+0xd04>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	db3e      	blt.n	800adc0 <tcp_receive+0xd08>
 800ad42:	4b1e      	ldr	r3, [pc, #120]	; (800adbc <tcp_receive+0xd04>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	3301      	adds	r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dc35      	bgt.n	800adc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad54:	4818      	ldr	r0, [pc, #96]	; (800adb8 <tcp_receive+0xd00>)
 800ad56:	f7fd fa93 	bl	8008280 <tcp_seg_copy>
 800ad5a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8109 	beq.w	800af76 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad6c:	8912      	ldrh	r2, [r2, #8]
 800ad6e:	441a      	add	r2, r3
 800ad70:	4b12      	ldr	r3, [pc, #72]	; (800adbc <tcp_receive+0xd04>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dd12      	ble.n	800ada0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <tcp_receive+0xd04>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	891b      	ldrh	r3, [r3, #8]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fb fc76 	bl	800668c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ada6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ada8:	69f8      	ldr	r0, [r7, #28]
 800adaa:	f7ff f881 	bl	8009eb0 <tcp_oos_insert_segment>
                  }
                  break;
 800adae:	e0e2      	b.n	800af76 <tcp_receive+0xebe>
 800adb0:	20006874 	.word	0x20006874
 800adb4:	20006871 	.word	0x20006871
 800adb8:	20006844 	.word	0x20006844
 800adbc:	20006864 	.word	0x20006864
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f040 80c6 	bne.w	800af5a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800adce:	4b80      	ldr	r3, [pc, #512]	; (800afd0 <tcp_receive+0xf18>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800adda:	2b00      	cmp	r3, #0
 800addc:	f340 80bd 	ble.w	800af5a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	899b      	ldrh	r3, [r3, #12]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fa fb19 	bl	8005420 <lwip_htons>
 800adee:	4603      	mov	r3, r0
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f040 80bf 	bne.w	800af7a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800adfc:	4875      	ldr	r0, [pc, #468]	; (800afd4 <tcp_receive+0xf1c>)
 800adfe:	f7fd fa3f 	bl	8008280 <tcp_seg_copy>
 800ae02:	4602      	mov	r2, r0
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 80b6 	beq.w	800af7e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae1a:	8912      	ldrh	r2, [r2, #8]
 800ae1c:	441a      	add	r2, r3
 800ae1e:	4b6c      	ldr	r3, [pc, #432]	; (800afd0 <tcp_receive+0xf18>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd12      	ble.n	800ae4e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ae28:	4b69      	ldr	r3, [pc, #420]	; (800afd0 <tcp_receive+0xf18>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	891b      	ldrh	r3, [r3, #8]
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fb fc1f 	bl	800668c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ae4e:	4b62      	ldr	r3, [pc, #392]	; (800afd8 <tcp_receive+0xf20>)
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	4b5e      	ldr	r3, [pc, #376]	; (800afd0 <tcp_receive+0xf18>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	441a      	add	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae62:	440b      	add	r3, r1
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f340 8089 	ble.w	800af7e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	899b      	ldrh	r3, [r3, #12]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fa fad2 	bl	8005420 <lwip_htons>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d022      	beq.n	800aece <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	899b      	ldrh	r3, [r3, #12]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	b21b      	sxth	r3, r3
 800ae94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae98:	b21c      	sxth	r4, r3
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	899b      	ldrh	r3, [r3, #12]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fa fabb 	bl	8005420 <lwip_htons>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fa fab2 	bl	8005420 <lwip_htons>
 800aebc:	4603      	mov	r3, r0
 800aebe:	b21b      	sxth	r3, r3
 800aec0:	4323      	orrs	r3, r4
 800aec2:	b21a      	sxth	r2, r3
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	b292      	uxth	r2, r2
 800aecc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed8:	4413      	add	r3, r2
 800aeda:	b299      	uxth	r1, r3
 800aedc:	4b3c      	ldr	r3, [pc, #240]	; (800afd0 <tcp_receive+0xf18>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	1a8a      	subs	r2, r1, r2
 800aee8:	b292      	uxth	r2, r2
 800aeea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	891b      	ldrh	r3, [r3, #8]
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f7fb fbc6 	bl	800668c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	891c      	ldrh	r4, [r3, #8]
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4618      	mov	r0, r3
 800af12:	f7fa fa85 	bl	8005420 <lwip_htons>
 800af16:	4603      	mov	r3, r0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <tcp_receive+0xe6e>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <tcp_receive+0xe70>
 800af26:	2300      	movs	r3, #0
 800af28:	4423      	add	r3, r4
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	4b2a      	ldr	r3, [pc, #168]	; (800afd8 <tcp_receive+0xf20>)
 800af2e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af30:	4b29      	ldr	r3, [pc, #164]	; (800afd8 <tcp_receive+0xf20>)
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	461a      	mov	r2, r3
 800af36:	4b26      	ldr	r3, [pc, #152]	; (800afd0 <tcp_receive+0xf18>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	441a      	add	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af44:	440b      	add	r3, r1
 800af46:	429a      	cmp	r2, r3
 800af48:	d019      	beq.n	800af7e <tcp_receive+0xec6>
 800af4a:	4b24      	ldr	r3, [pc, #144]	; (800afdc <tcp_receive+0xf24>)
 800af4c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800af50:	4923      	ldr	r1, [pc, #140]	; (800afe0 <tcp_receive+0xf28>)
 800af52:	4824      	ldr	r0, [pc, #144]	; (800afe4 <tcp_receive+0xf2c>)
 800af54:	f007 f832 	bl	8011fbc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800af58:	e011      	b.n	800af7e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	2b00      	cmp	r3, #0
 800af64:	f47f aea4 	bne.w	800acb0 <tcp_receive+0xbf8>
 800af68:	e00a      	b.n	800af80 <tcp_receive+0xec8>
                break;
 800af6a:	bf00      	nop
 800af6c:	e008      	b.n	800af80 <tcp_receive+0xec8>
                break;
 800af6e:	bf00      	nop
 800af70:	e006      	b.n	800af80 <tcp_receive+0xec8>
                  break;
 800af72:	bf00      	nop
 800af74:	e004      	b.n	800af80 <tcp_receive+0xec8>
                  break;
 800af76:	bf00      	nop
 800af78:	e002      	b.n	800af80 <tcp_receive+0xec8>
                  break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <tcp_receive+0xec8>
                break;
 800af7e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 fe8b 	bl	800cc9c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800af86:	e003      	b.n	800af90 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 fe87 	bl	800cc9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af8e:	e01a      	b.n	800afc6 <tcp_receive+0xf0e>
 800af90:	e019      	b.n	800afc6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800af92:	4b0f      	ldr	r3, [pc, #60]	; (800afd0 <tcp_receive+0xf18>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	db0a      	blt.n	800afb6 <tcp_receive+0xefe>
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <tcp_receive+0xf18>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afac:	440b      	add	r3, r1
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	3301      	adds	r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dd07      	ble.n	800afc6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	8b5b      	ldrh	r3, [r3, #26]
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800afc4:	e7ff      	b.n	800afc6 <tcp_receive+0xf0e>
 800afc6:	bf00      	nop
 800afc8:	3750      	adds	r7, #80	; 0x50
 800afca:	46bd      	mov	sp, r7
 800afcc:	bdb0      	pop	{r4, r5, r7, pc}
 800afce:	bf00      	nop
 800afd0:	20006864 	.word	0x20006864
 800afd4:	20006844 	.word	0x20006844
 800afd8:	2000686e 	.word	0x2000686e
 800afdc:	0801433c 	.word	0x0801433c
 800afe0:	080146e4 	.word	0x080146e4
 800afe4:	08014388 	.word	0x08014388

0800afe8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800afee:	4b15      	ldr	r3, [pc, #84]	; (800b044 <tcp_get_next_optbyte+0x5c>)
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	b291      	uxth	r1, r2
 800aff6:	4a13      	ldr	r2, [pc, #76]	; (800b044 <tcp_get_next_optbyte+0x5c>)
 800aff8:	8011      	strh	r1, [r2, #0]
 800affa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800affc:	4b12      	ldr	r3, [pc, #72]	; (800b048 <tcp_get_next_optbyte+0x60>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d004      	beq.n	800b00e <tcp_get_next_optbyte+0x26>
 800b004:	4b11      	ldr	r3, [pc, #68]	; (800b04c <tcp_get_next_optbyte+0x64>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	88fa      	ldrh	r2, [r7, #6]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d208      	bcs.n	800b020 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b00e:	4b10      	ldr	r3, [pc, #64]	; (800b050 <tcp_get_next_optbyte+0x68>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3314      	adds	r3, #20
 800b014:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	4413      	add	r3, r2
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	e00b      	b.n	800b038 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	b2da      	uxtb	r2, r3
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <tcp_get_next_optbyte+0x64>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b02e:	4b06      	ldr	r3, [pc, #24]	; (800b048 <tcp_get_next_optbyte+0x60>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	797b      	ldrb	r3, [r7, #5]
 800b034:	4413      	add	r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	20006860 	.word	0x20006860
 800b048:	2000685c 	.word	0x2000685c
 800b04c:	2000685a 	.word	0x2000685a
 800b050:	20006854 	.word	0x20006854

0800b054 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <tcp_parseopt+0x1c>
 800b062:	4b32      	ldr	r3, [pc, #200]	; (800b12c <tcp_parseopt+0xd8>)
 800b064:	f240 727d 	movw	r2, #1917	; 0x77d
 800b068:	4931      	ldr	r1, [pc, #196]	; (800b130 <tcp_parseopt+0xdc>)
 800b06a:	4832      	ldr	r0, [pc, #200]	; (800b134 <tcp_parseopt+0xe0>)
 800b06c:	f006 ffa6 	bl	8011fbc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b070:	4b31      	ldr	r3, [pc, #196]	; (800b138 <tcp_parseopt+0xe4>)
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d055      	beq.n	800b124 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b078:	4b30      	ldr	r3, [pc, #192]	; (800b13c <tcp_parseopt+0xe8>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	e045      	b.n	800b10c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b080:	f7ff ffb2 	bl	800afe8 <tcp_get_next_optbyte>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d006      	beq.n	800b09c <tcp_parseopt+0x48>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	dc2b      	bgt.n	800b0ea <tcp_parseopt+0x96>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d041      	beq.n	800b11a <tcp_parseopt+0xc6>
 800b096:	2b01      	cmp	r3, #1
 800b098:	d127      	bne.n	800b0ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b09a:	e037      	b.n	800b10c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b09c:	f7ff ffa4 	bl	800afe8 <tcp_get_next_optbyte>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d13b      	bne.n	800b11e <tcp_parseopt+0xca>
 800b0a6:	4b25      	ldr	r3, [pc, #148]	; (800b13c <tcp_parseopt+0xe8>)
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	4a22      	ldr	r2, [pc, #136]	; (800b138 <tcp_parseopt+0xe4>)
 800b0ae:	8812      	ldrh	r2, [r2, #0]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	da34      	bge.n	800b11e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b0b4:	f7ff ff98 	bl	800afe8 <tcp_get_next_optbyte>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b0c0:	f7ff ff92 	bl	800afe8 <tcp_get_next_optbyte>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	89bb      	ldrh	r3, [r7, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b0ce:	89bb      	ldrh	r3, [r7, #12]
 800b0d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b0d4:	d804      	bhi.n	800b0e0 <tcp_parseopt+0x8c>
 800b0d6:	89bb      	ldrh	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <tcp_parseopt+0x8c>
 800b0dc:	89ba      	ldrh	r2, [r7, #12]
 800b0de:	e001      	b.n	800b0e4 <tcp_parseopt+0x90>
 800b0e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b0e8:	e010      	b.n	800b10c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b0ea:	f7ff ff7d 	bl	800afe8 <tcp_get_next_optbyte>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d914      	bls.n	800b122 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b0f8:	7afb      	ldrb	r3, [r7, #11]
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <tcp_parseopt+0xe8>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	4413      	add	r3, r2
 800b102:	b29b      	uxth	r3, r3
 800b104:	3b02      	subs	r3, #2
 800b106:	b29a      	uxth	r2, r3
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <tcp_parseopt+0xe8>)
 800b10a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <tcp_parseopt+0xe8>)
 800b10e:	881a      	ldrh	r2, [r3, #0]
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <tcp_parseopt+0xe4>)
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d3b3      	bcc.n	800b080 <tcp_parseopt+0x2c>
 800b118:	e004      	b.n	800b124 <tcp_parseopt+0xd0>
          return;
 800b11a:	bf00      	nop
 800b11c:	e002      	b.n	800b124 <tcp_parseopt+0xd0>
            return;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <tcp_parseopt+0xd0>
            return;
 800b122:	bf00      	nop
      }
    }
  }
}
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	0801433c 	.word	0x0801433c
 800b130:	080147a0 	.word	0x080147a0
 800b134:	08014388 	.word	0x08014388
 800b138:	20006858 	.word	0x20006858
 800b13c:	20006860 	.word	0x20006860

0800b140 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <tcp_trigger_input_pcb_close+0x1c>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f043 0310 	orr.w	r3, r3, #16
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	4b03      	ldr	r3, [pc, #12]	; (800b15c <tcp_trigger_input_pcb_close+0x1c>)
 800b150:	701a      	strb	r2, [r3, #0]
}
 800b152:	bf00      	nop
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	20006871 	.word	0x20006871

0800b160 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <tcp_route+0x28>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	7a1b      	ldrb	r3, [r3, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d006      	beq.n	800b188 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7a1b      	ldrb	r3, [r3, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb f8aa 	bl	80062d8 <netif_get_by_index>
 800b184:	4603      	mov	r3, r0
 800b186:	e003      	b.n	800b190 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f005 fc33 	bl	80109f4 <ip4_route>
 800b18e:	4603      	mov	r3, r0
  }
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d105      	bne.n	800b1ba <tcp_create_segment+0x22>
 800b1ae:	4b44      	ldr	r3, [pc, #272]	; (800b2c0 <tcp_create_segment+0x128>)
 800b1b0:	22a3      	movs	r2, #163	; 0xa3
 800b1b2:	4944      	ldr	r1, [pc, #272]	; (800b2c4 <tcp_create_segment+0x12c>)
 800b1b4:	4844      	ldr	r0, [pc, #272]	; (800b2c8 <tcp_create_segment+0x130>)
 800b1b6:	f006 ff01 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d105      	bne.n	800b1cc <tcp_create_segment+0x34>
 800b1c0:	4b3f      	ldr	r3, [pc, #252]	; (800b2c0 <tcp_create_segment+0x128>)
 800b1c2:	22a4      	movs	r2, #164	; 0xa4
 800b1c4:	4941      	ldr	r1, [pc, #260]	; (800b2cc <tcp_create_segment+0x134>)
 800b1c6:	4840      	ldr	r0, [pc, #256]	; (800b2c8 <tcp_create_segment+0x130>)
 800b1c8:	f006 fef8 	bl	8011fbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b1cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b1da:	2003      	movs	r0, #3
 800b1dc:	f7fa fd76 	bl	8005ccc <memp_malloc>
 800b1e0:	6138      	str	r0, [r7, #16]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d104      	bne.n	800b1f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f7fb fbd5 	bl	8006998 <pbuf_free>
    return NULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e061      	b.n	800b2b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	891a      	ldrh	r2, [r3, #8]
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	429a      	cmp	r2, r3
 800b210:	d205      	bcs.n	800b21e <tcp_create_segment+0x86>
 800b212:	4b2b      	ldr	r3, [pc, #172]	; (800b2c0 <tcp_create_segment+0x128>)
 800b214:	22b0      	movs	r2, #176	; 0xb0
 800b216:	492e      	ldr	r1, [pc, #184]	; (800b2d0 <tcp_create_segment+0x138>)
 800b218:	482b      	ldr	r0, [pc, #172]	; (800b2c8 <tcp_create_segment+0x130>)
 800b21a:	f006 fecf 	bl	8011fbc <iprintf>
  seg->len = p->tot_len - optlen;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	891a      	ldrh	r2, [r3, #8]
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	b29b      	uxth	r3, r3
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	b29a      	uxth	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b22e:	2114      	movs	r1, #20
 800b230:	68b8      	ldr	r0, [r7, #8]
 800b232:	f7fb fb1b 	bl	800686c <pbuf_add_header>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b23c:	6938      	ldr	r0, [r7, #16]
 800b23e:	f7fc ffe8 	bl	8008212 <tcp_seg_free>
    return NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	e037      	b.n	800b2b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	8ada      	ldrh	r2, [r3, #22]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	68dc      	ldr	r4, [r3, #12]
 800b258:	4610      	mov	r0, r2
 800b25a:	f7fa f8e1 	bl	8005420 <lwip_htons>
 800b25e:	4603      	mov	r3, r0
 800b260:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8b1a      	ldrh	r2, [r3, #24]
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	68dc      	ldr	r4, [r3, #12]
 800b26a:	4610      	mov	r0, r2
 800b26c:	f7fa f8d8 	bl	8005420 <lwip_htons>
 800b270:	4603      	mov	r3, r0
 800b272:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	68dc      	ldr	r4, [r3, #12]
 800b278:	6838      	ldr	r0, [r7, #0]
 800b27a:	f7fa f8e6 	bl	800544a <lwip_htonl>
 800b27e:	4603      	mov	r3, r0
 800b280:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	089b      	lsrs	r3, r3, #2
 800b286:	b2db      	uxtb	r3, r3
 800b288:	b29b      	uxth	r3, r3
 800b28a:	3305      	adds	r3, #5
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	031b      	lsls	r3, r3, #12
 800b290:	b29a      	uxth	r2, r3
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	b29b      	uxth	r3, r3
 800b296:	4313      	orrs	r3, r2
 800b298:	b29a      	uxth	r2, r3
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	68dc      	ldr	r4, [r3, #12]
 800b29e:	4610      	mov	r0, r2
 800b2a0:	f7fa f8be 	bl	8005420 <lwip_htons>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	749a      	strb	r2, [r3, #18]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800b2b4:	693b      	ldr	r3, [r7, #16]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd90      	pop	{r4, r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	080147bc 	.word	0x080147bc
 800b2c4:	080147f0 	.word	0x080147f0
 800b2c8:	08014810 	.word	0x08014810
 800b2cc:	08014838 	.word	0x08014838
 800b2d0:	0801485c 	.word	0x0801485c

0800b2d4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	81bb      	strh	r3, [r7, #12]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b2e8:	89bb      	ldrh	r3, [r7, #12]
 800b2ea:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d105      	bne.n	800b2fe <tcp_pbuf_prealloc+0x2a>
 800b2f2:	4b30      	ldr	r3, [pc, #192]	; (800b3b4 <tcp_pbuf_prealloc+0xe0>)
 800b2f4:	22e8      	movs	r2, #232	; 0xe8
 800b2f6:	4930      	ldr	r1, [pc, #192]	; (800b3b8 <tcp_pbuf_prealloc+0xe4>)
 800b2f8:	4830      	ldr	r0, [pc, #192]	; (800b3bc <tcp_pbuf_prealloc+0xe8>)
 800b2fa:	f006 fe5f 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d105      	bne.n	800b310 <tcp_pbuf_prealloc+0x3c>
 800b304:	4b2b      	ldr	r3, [pc, #172]	; (800b3b4 <tcp_pbuf_prealloc+0xe0>)
 800b306:	22e9      	movs	r2, #233	; 0xe9
 800b308:	492d      	ldr	r1, [pc, #180]	; (800b3c0 <tcp_pbuf_prealloc+0xec>)
 800b30a:	482c      	ldr	r0, [pc, #176]	; (800b3bc <tcp_pbuf_prealloc+0xe8>)
 800b30c:	f006 fe56 	bl	8011fbc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b310:	89ba      	ldrh	r2, [r7, #12]
 800b312:	897b      	ldrh	r3, [r7, #10]
 800b314:	429a      	cmp	r2, r3
 800b316:	d221      	bcs.n	800b35c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d111      	bne.n	800b348 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	8b5b      	ldrh	r3, [r3, #26]
 800b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d115      	bne.n	800b35c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b330:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	d007      	beq.n	800b348 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d103      	bne.n	800b348 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b348:	89bb      	ldrh	r3, [r7, #12]
 800b34a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b34e:	f023 0203 	bic.w	r2, r3, #3
 800b352:	897b      	ldrh	r3, [r7, #10]
 800b354:	4293      	cmp	r3, r2
 800b356:	bf28      	it	cs
 800b358:	4613      	movcs	r3, r2
 800b35a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b35c:	8af9      	ldrh	r1, [r7, #22]
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b364:	4618      	mov	r0, r3
 800b366:	f7fb f833 	bl	80063d0 <pbuf_alloc>
 800b36a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	e019      	b.n	800b3aa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d006      	beq.n	800b38c <tcp_pbuf_prealloc+0xb8>
 800b37e:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <tcp_pbuf_prealloc+0xe0>)
 800b380:	f240 120b 	movw	r2, #267	; 0x10b
 800b384:	490f      	ldr	r1, [pc, #60]	; (800b3c4 <tcp_pbuf_prealloc+0xf0>)
 800b386:	480d      	ldr	r0, [pc, #52]	; (800b3bc <tcp_pbuf_prealloc+0xe8>)
 800b388:	f006 fe18 	bl	8011fbc <iprintf>
  *oversize = p->len - length;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	895a      	ldrh	r2, [r3, #10]
 800b390:	89bb      	ldrh	r3, [r7, #12]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	89ba      	ldrh	r2, [r7, #12]
 800b39e:	811a      	strh	r2, [r3, #8]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	891a      	ldrh	r2, [r3, #8]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	815a      	strh	r2, [r3, #10]
  return p;
 800b3a8:	693b      	ldr	r3, [r7, #16]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	080147bc 	.word	0x080147bc
 800b3b8:	08014874 	.word	0x08014874
 800b3bc:	08014810 	.word	0x08014810
 800b3c0:	08014898 	.word	0x08014898
 800b3c4:	080148b8 	.word	0x080148b8

0800b3c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <tcp_write_checks+0x20>
 800b3da:	4b33      	ldr	r3, [pc, #204]	; (800b4a8 <tcp_write_checks+0xe0>)
 800b3dc:	f240 1233 	movw	r2, #307	; 0x133
 800b3e0:	4932      	ldr	r1, [pc, #200]	; (800b4ac <tcp_write_checks+0xe4>)
 800b3e2:	4833      	ldr	r0, [pc, #204]	; (800b4b0 <tcp_write_checks+0xe8>)
 800b3e4:	f006 fdea 	bl	8011fbc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	7d1b      	ldrb	r3, [r3, #20]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d00e      	beq.n	800b40e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b3f4:	2b07      	cmp	r3, #7
 800b3f6:	d00a      	beq.n	800b40e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d006      	beq.n	800b40e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b404:	2b03      	cmp	r3, #3
 800b406:	d002      	beq.n	800b40e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b408:	f06f 030a 	mvn.w	r3, #10
 800b40c:	e048      	b.n	800b4a0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <tcp_write_checks+0x50>
    return ERR_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	e043      	b.n	800b4a0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b41e:	887a      	ldrh	r2, [r7, #2]
 800b420:	429a      	cmp	r2, r3
 800b422:	d909      	bls.n	800b438 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	8b5b      	ldrh	r3, [r3, #26]
 800b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	e033      	b.n	800b4a0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b43e:	2b08      	cmp	r3, #8
 800b440:	d909      	bls.n	800b456 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8b5b      	ldrh	r3, [r3, #26]
 800b446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295
 800b454:	e024      	b.n	800b4a0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00f      	beq.n	800b480 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b464:	2b00      	cmp	r3, #0
 800b466:	d11a      	bne.n	800b49e <tcp_write_checks+0xd6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d116      	bne.n	800b49e <tcp_write_checks+0xd6>
 800b470:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <tcp_write_checks+0xe0>)
 800b472:	f240 1255 	movw	r2, #341	; 0x155
 800b476:	490f      	ldr	r1, [pc, #60]	; (800b4b4 <tcp_write_checks+0xec>)
 800b478:	480d      	ldr	r0, [pc, #52]	; (800b4b0 <tcp_write_checks+0xe8>)
 800b47a:	f006 fd9f 	bl	8011fbc <iprintf>
 800b47e:	e00e      	b.n	800b49e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <tcp_write_checks+0xc8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <tcp_write_checks+0xd6>
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <tcp_write_checks+0xe0>)
 800b492:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b496:	4908      	ldr	r1, [pc, #32]	; (800b4b8 <tcp_write_checks+0xf0>)
 800b498:	4805      	ldr	r0, [pc, #20]	; (800b4b0 <tcp_write_checks+0xe8>)
 800b49a:	f006 fd8f 	bl	8011fbc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	080147bc 	.word	0x080147bc
 800b4ac:	080148cc 	.word	0x080148cc
 800b4b0:	08014810 	.word	0x08014810
 800b4b4:	080148ec 	.word	0x080148ec
 800b4b8:	08014928 	.word	0x08014928

0800b4bc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b09b      	sub	sp, #108	; 0x6c
 800b4c0:	af04      	add	r7, sp, #16
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	80fb      	strh	r3, [r7, #6]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b4da:	2300      	movs	r3, #0
 800b4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4de:	2300      	movs	r3, #0
 800b4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d109      	bne.n	800b518 <tcp_write+0x5c>
 800b504:	4ba4      	ldr	r3, [pc, #656]	; (800b798 <tcp_write+0x2dc>)
 800b506:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b50a:	49a4      	ldr	r1, [pc, #656]	; (800b79c <tcp_write+0x2e0>)
 800b50c:	48a4      	ldr	r0, [pc, #656]	; (800b7a0 <tcp_write+0x2e4>)
 800b50e:	f006 fd55 	bl	8011fbc <iprintf>
 800b512:	f06f 030f 	mvn.w	r3, #15
 800b516:	e32a      	b.n	800bb6e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b51e:	085b      	lsrs	r3, r3, #1
 800b520:	b29a      	uxth	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b526:	4293      	cmp	r3, r2
 800b528:	bf28      	it	cs
 800b52a:	4613      	movcs	r3, r2
 800b52c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <tcp_write+0x7e>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b538:	e000      	b.n	800b53c <tcp_write+0x80>
 800b53a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b53c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d109      	bne.n	800b558 <tcp_write+0x9c>
 800b544:	4b94      	ldr	r3, [pc, #592]	; (800b798 <tcp_write+0x2dc>)
 800b546:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b54a:	4996      	ldr	r1, [pc, #600]	; (800b7a4 <tcp_write+0x2e8>)
 800b54c:	4894      	ldr	r0, [pc, #592]	; (800b7a0 <tcp_write+0x2e4>)
 800b54e:	f006 fd35 	bl	8011fbc <iprintf>
 800b552:	f06f 030f 	mvn.w	r3, #15
 800b556:	e30a      	b.n	800bb6e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b558:	88fb      	ldrh	r3, [r7, #6]
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7ff ff33 	bl	800b3c8 <tcp_write_checks>
 800b562:	4603      	mov	r3, r0
 800b564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b568:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <tcp_write+0xba>
    return err;
 800b570:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b574:	e2fb      	b.n	800bb6e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b57c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b580:	2300      	movs	r3, #0
 800b582:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 80f6 	beq.w	800b77c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b594:	653b      	str	r3, [r7, #80]	; 0x50
 800b596:	e002      	b.n	800b59e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f8      	bne.n	800b598 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	7a9b      	ldrb	r3, [r3, #10]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	f003 0304 	and.w	r3, r3, #4
 800b5b2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b5b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b8:	891b      	ldrh	r3, [r3, #8]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	8c3b      	ldrh	r3, [r7, #32]
 800b5be:	440b      	add	r3, r1
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	da06      	bge.n	800b5d2 <tcp_write+0x116>
 800b5c4:	4b74      	ldr	r3, [pc, #464]	; (800b798 <tcp_write+0x2dc>)
 800b5c6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b5ca:	4977      	ldr	r1, [pc, #476]	; (800b7a8 <tcp_write+0x2ec>)
 800b5cc:	4874      	ldr	r0, [pc, #464]	; (800b7a0 <tcp_write+0x2e4>)
 800b5ce:	f006 fcf5 	bl	8011fbc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d4:	891a      	ldrh	r2, [r3, #8]
 800b5d6:	8c3b      	ldrh	r3, [r7, #32]
 800b5d8:	4413      	add	r3, r2
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5e8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b5ea:	8a7b      	ldrh	r3, [r7, #18]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d026      	beq.n	800b63e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b5f0:	8a7b      	ldrh	r3, [r7, #18]
 800b5f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d206      	bcs.n	800b606 <tcp_write+0x14a>
 800b5f8:	4b67      	ldr	r3, [pc, #412]	; (800b798 <tcp_write+0x2dc>)
 800b5fa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b5fe:	496b      	ldr	r1, [pc, #428]	; (800b7ac <tcp_write+0x2f0>)
 800b600:	4867      	ldr	r0, [pc, #412]	; (800b7a0 <tcp_write+0x2e4>)
 800b602:	f006 fcdb 	bl	8011fbc <iprintf>
      seg = last_unsent;
 800b606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b608:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b60a:	8a7b      	ldrh	r3, [r7, #18]
 800b60c:	88fa      	ldrh	r2, [r7, #6]
 800b60e:	4293      	cmp	r3, r2
 800b610:	bf28      	it	cs
 800b612:	4613      	movcs	r3, r2
 800b614:	b29b      	uxth	r3, r3
 800b616:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b618:	4293      	cmp	r3, r2
 800b61a:	bf28      	it	cs
 800b61c:	4613      	movcs	r3, r2
 800b61e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b620:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b626:	4413      	add	r3, r2
 800b628:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b62c:	8a7a      	ldrh	r2, [r7, #18]
 800b62e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	b29b      	uxth	r3, r3
 800b634:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b636:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b638:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b63e:	8a7b      	ldrh	r3, [r7, #18]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <tcp_write+0x1a0>
 800b644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b648:	88fb      	ldrh	r3, [r7, #6]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d006      	beq.n	800b65c <tcp_write+0x1a0>
 800b64e:	4b52      	ldr	r3, [pc, #328]	; (800b798 <tcp_write+0x2dc>)
 800b650:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b654:	4956      	ldr	r1, [pc, #344]	; (800b7b0 <tcp_write+0x2f4>)
 800b656:	4852      	ldr	r0, [pc, #328]	; (800b7a0 <tcp_write+0x2e4>)
 800b658:	f006 fcb0 	bl	8011fbc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b65c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	429a      	cmp	r2, r3
 800b664:	f080 8167 	bcs.w	800b936 <tcp_write+0x47a>
 800b668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 8163 	beq.w	800b936 <tcp_write+0x47a>
 800b670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b672:	891b      	ldrh	r3, [r3, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 815e 	beq.w	800b936 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b67a:	88fa      	ldrh	r2, [r7, #6]
 800b67c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b684:	4293      	cmp	r3, r2
 800b686:	bfa8      	it	ge
 800b688:	4613      	movge	r3, r2
 800b68a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b68e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b690:	797b      	ldrb	r3, [r7, #5]
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d027      	beq.n	800b6ea <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b69a:	f107 0012 	add.w	r0, r7, #18
 800b69e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b6a0:	8bf9      	ldrh	r1, [r7, #30]
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	797b      	ldrb	r3, [r7, #5]
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f7ff fe0f 	bl	800b2d4 <tcp_pbuf_prealloc>
 800b6b6:	6578      	str	r0, [r7, #84]	; 0x54
 800b6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 8225 	beq.w	800bb0a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c2:	6858      	ldr	r0, [r3, #4]
 800b6c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	8bfa      	ldrh	r2, [r7, #30]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f006 fc5e 	bl	8011f90 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b6d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b6d6:	f7fb f9e7 	bl	8006aa8 <pbuf_clen>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b6e8:	e041      	b.n	800b76e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f0:	e002      	b.n	800b6f8 <tcp_write+0x23c>
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f8      	bne.n	800b6f2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b702:	7b1b      	ldrb	r3, [r3, #12]
 800b704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d115      	bne.n	800b738 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b712:	8952      	ldrh	r2, [r2, #10]
 800b714:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d10d      	bne.n	800b738 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b71c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <tcp_write+0x276>
 800b724:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <tcp_write+0x2dc>)
 800b726:	f240 2231 	movw	r2, #561	; 0x231
 800b72a:	4922      	ldr	r1, [pc, #136]	; (800b7b4 <tcp_write+0x2f8>)
 800b72c:	481c      	ldr	r0, [pc, #112]	; (800b7a0 <tcp_write+0x2e4>)
 800b72e:	f006 fc45 	bl	8011fbc <iprintf>
          extendlen = seglen;
 800b732:	8bfb      	ldrh	r3, [r7, #30]
 800b734:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b736:	e01a      	b.n	800b76e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b738:	8bfb      	ldrh	r3, [r7, #30]
 800b73a:	2201      	movs	r2, #1
 800b73c:	4619      	mov	r1, r3
 800b73e:	2000      	movs	r0, #0
 800b740:	f7fa fe46 	bl	80063d0 <pbuf_alloc>
 800b744:	6578      	str	r0, [r7, #84]	; 0x54
 800b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f000 81e0 	beq.w	800bb0e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b74e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	441a      	add	r2, r3
 800b756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b758:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b75a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b75c:	f7fb f9a4 	bl	8006aa8 <pbuf_clen>
 800b760:	4603      	mov	r3, r0
 800b762:	461a      	mov	r2, r3
 800b764:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b768:	4413      	add	r3, r2
 800b76a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b76e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b772:	8bfb      	ldrh	r3, [r7, #30]
 800b774:	4413      	add	r3, r2
 800b776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b77a:	e0dc      	b.n	800b936 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 80d7 	beq.w	800b936 <tcp_write+0x47a>
 800b788:	4b03      	ldr	r3, [pc, #12]	; (800b798 <tcp_write+0x2dc>)
 800b78a:	f240 224a 	movw	r2, #586	; 0x24a
 800b78e:	490a      	ldr	r1, [pc, #40]	; (800b7b8 <tcp_write+0x2fc>)
 800b790:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <tcp_write+0x2e4>)
 800b792:	f006 fc13 	bl	8011fbc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b796:	e0ce      	b.n	800b936 <tcp_write+0x47a>
 800b798:	080147bc 	.word	0x080147bc
 800b79c:	0801495c 	.word	0x0801495c
 800b7a0:	08014810 	.word	0x08014810
 800b7a4:	08014974 	.word	0x08014974
 800b7a8:	080149a8 	.word	0x080149a8
 800b7ac:	080149c0 	.word	0x080149c0
 800b7b0:	080149e0 	.word	0x080149e0
 800b7b4:	08014a00 	.word	0x08014a00
 800b7b8:	08014a2c 	.word	0x08014a2c
    struct pbuf *p;
    u16_t left = len - pos;
 800b7bc:	88fa      	ldrh	r2, [r7, #6]
 800b7be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b7c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b7d2:	8b7a      	ldrh	r2, [r7, #26]
 800b7d4:	8bbb      	ldrh	r3, [r7, #28]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	bf28      	it	cs
 800b7da:	4613      	movcs	r3, r2
 800b7dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b7de:	797b      	ldrb	r3, [r7, #5]
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d036      	beq.n	800b856 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b7e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	8b3b      	ldrh	r3, [r7, #24]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	bf0c      	ite	eq
 800b7fa:	2301      	moveq	r3, #1
 800b7fc:	2300      	movne	r3, #0
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f107 0012 	add.w	r0, r7, #18
 800b804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b806:	9302      	str	r3, [sp, #8]
 800b808:	797b      	ldrb	r3, [r7, #5]
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	4603      	mov	r3, r0
 800b812:	2036      	movs	r0, #54	; 0x36
 800b814:	f7ff fd5e 	bl	800b2d4 <tcp_pbuf_prealloc>
 800b818:	6338      	str	r0, [r7, #48]	; 0x30
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 8178 	beq.w	800bb12 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	895b      	ldrh	r3, [r3, #10]
 800b826:	8b3a      	ldrh	r2, [r7, #24]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d906      	bls.n	800b83a <tcp_write+0x37e>
 800b82c:	4b8c      	ldr	r3, [pc, #560]	; (800ba60 <tcp_write+0x5a4>)
 800b82e:	f240 2266 	movw	r2, #614	; 0x266
 800b832:	498c      	ldr	r1, [pc, #560]	; (800ba64 <tcp_write+0x5a8>)
 800b834:	488c      	ldr	r0, [pc, #560]	; (800ba68 <tcp_write+0x5ac>)
 800b836:	f006 fbc1 	bl	8011fbc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b842:	18d0      	adds	r0, r2, r3
 800b844:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	4413      	add	r3, r2
 800b84c:	8b3a      	ldrh	r2, [r7, #24]
 800b84e:	4619      	mov	r1, r3
 800b850:	f006 fb9e 	bl	8011f90 <memcpy>
 800b854:	e02f      	b.n	800b8b6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b856:	8a7b      	ldrh	r3, [r7, #18]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <tcp_write+0x3ae>
 800b85c:	4b80      	ldr	r3, [pc, #512]	; (800ba60 <tcp_write+0x5a4>)
 800b85e:	f240 2271 	movw	r2, #625	; 0x271
 800b862:	4982      	ldr	r1, [pc, #520]	; (800ba6c <tcp_write+0x5b0>)
 800b864:	4880      	ldr	r0, [pc, #512]	; (800ba68 <tcp_write+0x5ac>)
 800b866:	f006 fba9 	bl	8011fbc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b86a:	8b3b      	ldrh	r3, [r7, #24]
 800b86c:	2201      	movs	r2, #1
 800b86e:	4619      	mov	r1, r3
 800b870:	2036      	movs	r0, #54	; 0x36
 800b872:	f7fa fdad 	bl	80063d0 <pbuf_alloc>
 800b876:	6178      	str	r0, [r7, #20]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 814b 	beq.w	800bb16 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	441a      	add	r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b88c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b890:	b29b      	uxth	r3, r3
 800b892:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b896:	4619      	mov	r1, r3
 800b898:	2036      	movs	r0, #54	; 0x36
 800b89a:	f7fa fd99 	bl	80063d0 <pbuf_alloc>
 800b89e:	6338      	str	r0, [r7, #48]	; 0x30
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d103      	bne.n	800b8ae <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b8a6:	6978      	ldr	r0, [r7, #20]
 800b8a8:	f7fb f876 	bl	8006998 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b8ac:	e136      	b.n	800bb1c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b2:	f7fb f933 	bl	8006b1c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b8:	f7fb f8f6 	bl	8006aa8 <pbuf_clen>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b8ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d903      	bls.n	800b8da <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d4:	f7fb f860 	bl	8006998 <pbuf_free>
      goto memerr;
 800b8d8:	e120      	b.n	800bb1c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8e2:	441a      	add	r2, r3
 800b8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fc51 	bl	800b198 <tcp_create_segment>
 800b8f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 810d 	beq.w	800bb1a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <tcp_write+0x450>
      queue = seg;
 800b906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b908:	647b      	str	r3, [r7, #68]	; 0x44
 800b90a:	e00c      	b.n	800b926 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <tcp_write+0x464>
 800b912:	4b53      	ldr	r3, [pc, #332]	; (800ba60 <tcp_write+0x5a4>)
 800b914:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b918:	4955      	ldr	r1, [pc, #340]	; (800ba70 <tcp_write+0x5b4>)
 800b91a:	4853      	ldr	r0, [pc, #332]	; (800ba68 <tcp_write+0x5ac>)
 800b91c:	f006 fb4e 	bl	8011fbc <iprintf>
      prev_seg->next = seg;
 800b920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b924:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b928:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b92a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b92e:	8b3b      	ldrh	r3, [r7, #24]
 800b930:	4413      	add	r3, r2
 800b932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	f4ff af3d 	bcc.w	800b7bc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b942:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b944:	2b00      	cmp	r3, #0
 800b946:	d02c      	beq.n	800b9a2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b94e:	e01e      	b.n	800b98e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	891a      	ldrh	r2, [r3, #8]
 800b954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b956:	4413      	add	r3, r2
 800b958:	b29a      	uxth	r2, r3
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d110      	bne.n	800b988 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b96c:	8952      	ldrh	r2, [r2, #10]
 800b96e:	4413      	add	r3, r2
 800b970:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	4618      	mov	r0, r3
 800b976:	f006 fb0b 	bl	8011f90 <memcpy>
        p->len += oversize_used;
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	895a      	ldrh	r2, [r3, #10]
 800b97e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b980:	4413      	add	r3, r2
 800b982:	b29a      	uxth	r2, r3
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1dd      	bne.n	800b950 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b996:	891a      	ldrh	r2, [r3, #8]
 800b998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b99a:	4413      	add	r3, r2
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b9a2:	8a7a      	ldrh	r2, [r7, #18]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d018      	beq.n	800b9e2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d106      	bne.n	800b9c4 <tcp_write+0x508>
 800b9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <tcp_write+0x5a4>)
 800b9b8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b9bc:	492d      	ldr	r1, [pc, #180]	; (800ba74 <tcp_write+0x5b8>)
 800b9be:	482a      	ldr	r0, [pc, #168]	; (800ba68 <tcp_write+0x5ac>)
 800b9c0:	f006 fafc 	bl	8011fbc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fb f8a6 	bl	8006b1c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d2:	891a      	ldrh	r2, [r3, #8]
 800b9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d6:	891b      	ldrh	r3, [r3, #8]
 800b9d8:	4413      	add	r3, r2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9de:	811a      	strh	r2, [r3, #8]
 800b9e0:	e037      	b.n	800ba52 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b9e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d034      	beq.n	800ba52 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <tcp_write+0x53a>
 800b9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <tcp_write+0x548>
 800b9f6:	4b1a      	ldr	r3, [pc, #104]	; (800ba60 <tcp_write+0x5a4>)
 800b9f8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b9fc:	491e      	ldr	r1, [pc, #120]	; (800ba78 <tcp_write+0x5bc>)
 800b9fe:	481a      	ldr	r0, [pc, #104]	; (800ba68 <tcp_write+0x5ac>)
 800ba00:	f006 fadc 	bl	8011fbc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba0a:	e009      	b.n	800ba20 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	891a      	ldrh	r2, [r3, #8]
 800ba10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba12:	4413      	add	r3, r2
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f1      	bne.n	800ba0c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	891a      	ldrh	r2, [r3, #8]
 800ba2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba2e:	4413      	add	r3, r2
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	895a      	ldrh	r2, [r3, #10]
 800ba3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba3c:	4413      	add	r3, r2
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba46:	891a      	ldrh	r2, [r3, #8]
 800ba48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba4a:	4413      	add	r3, r2
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba50:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d111      	bne.n	800ba7c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba5e:	e010      	b.n	800ba82 <tcp_write+0x5c6>
 800ba60:	080147bc 	.word	0x080147bc
 800ba64:	08014a5c 	.word	0x08014a5c
 800ba68:	08014810 	.word	0x08014810
 800ba6c:	08014a9c 	.word	0x08014a9c
 800ba70:	08014aac 	.word	0x08014aac
 800ba74:	08014ac0 	.word	0x08014ac0
 800ba78:	08014af8 	.word	0x08014af8
  } else {
    last_unsent->next = queue;
 800ba7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba80:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba86:	88fb      	ldrh	r3, [r7, #6]
 800ba88:	441a      	add	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ba94:	88fb      	ldrh	r3, [r7, #6]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800baa6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00e      	beq.n	800bad2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <tcp_write+0x616>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <tcp_write+0x616>
 800bac4:	4b2c      	ldr	r3, [pc, #176]	; (800bb78 <tcp_write+0x6bc>)
 800bac6:	f240 3212 	movw	r2, #786	; 0x312
 800baca:	492c      	ldr	r1, [pc, #176]	; (800bb7c <tcp_write+0x6c0>)
 800bacc:	482c      	ldr	r0, [pc, #176]	; (800bb80 <tcp_write+0x6c4>)
 800bace:	f006 fa75 	bl	8011fbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d016      	beq.n	800bb06 <tcp_write+0x64a>
 800bad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d012      	beq.n	800bb06 <tcp_write+0x64a>
 800bae0:	797b      	ldrb	r3, [r7, #5]
 800bae2:	f003 0302 	and.w	r3, r3, #2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10d      	bne.n	800bb06 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800baea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	899b      	ldrh	r3, [r3, #12]
 800baf0:	b29c      	uxth	r4, r3
 800baf2:	2008      	movs	r0, #8
 800baf4:	f7f9 fc94 	bl	8005420 <lwip_htons>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	4322      	orrs	r2, r4
 800bb02:	b292      	uxth	r2, r2
 800bb04:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e031      	b.n	800bb6e <tcp_write+0x6b2>
          goto memerr;
 800bb0a:	bf00      	nop
 800bb0c:	e006      	b.n	800bb1c <tcp_write+0x660>
            goto memerr;
 800bb0e:	bf00      	nop
 800bb10:	e004      	b.n	800bb1c <tcp_write+0x660>
        goto memerr;
 800bb12:	bf00      	nop
 800bb14:	e002      	b.n	800bb1c <tcp_write+0x660>
        goto memerr;
 800bb16:	bf00      	nop
 800bb18:	e000      	b.n	800bb1c <tcp_write+0x660>
      goto memerr;
 800bb1a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8b5b      	ldrh	r3, [r3, #26]
 800bb20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800bb30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb32:	f7fa ff31 	bl	8006998 <pbuf_free>
  }
  if (queue != NULL) {
 800bb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <tcp_write+0x686>
    tcp_segs_free(queue);
 800bb3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bb3e:	f7fc fb53 	bl	80081e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00e      	beq.n	800bb6a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <tcp_write+0x6ae>
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d106      	bne.n	800bb6a <tcp_write+0x6ae>
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <tcp_write+0x6bc>)
 800bb5e:	f240 3227 	movw	r2, #807	; 0x327
 800bb62:	4906      	ldr	r1, [pc, #24]	; (800bb7c <tcp_write+0x6c0>)
 800bb64:	4806      	ldr	r0, [pc, #24]	; (800bb80 <tcp_write+0x6c4>)
 800bb66:	f006 fa29 	bl	8011fbc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	375c      	adds	r7, #92	; 0x5c
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}
 800bb76:	bf00      	nop
 800bb78:	080147bc 	.word	0x080147bc
 800bb7c:	08014b30 	.word	0x08014b30
 800bb80:	08014810 	.word	0x08014810

0800bb84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bb84:	b590      	push	{r4, r7, lr}
 800bb86:	b08b      	sub	sp, #44	; 0x2c
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]
 800bb94:	2300      	movs	r3, #0
 800bb96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <tcp_split_unsent_seg+0x2c>
 800bba2:	4b95      	ldr	r3, [pc, #596]	; (800bdf8 <tcp_split_unsent_seg+0x274>)
 800bba4:	f240 324b 	movw	r2, #843	; 0x34b
 800bba8:	4994      	ldr	r1, [pc, #592]	; (800bdfc <tcp_split_unsent_seg+0x278>)
 800bbaa:	4895      	ldr	r0, [pc, #596]	; (800be00 <tcp_split_unsent_seg+0x27c>)
 800bbac:	f006 fa06 	bl	8011fbc <iprintf>

  useg = pcb->unsent;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc0:	e116      	b.n	800bdf0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bbc2:	887b      	ldrh	r3, [r7, #2]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d109      	bne.n	800bbdc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bbc8:	4b8b      	ldr	r3, [pc, #556]	; (800bdf8 <tcp_split_unsent_seg+0x274>)
 800bbca:	f240 3253 	movw	r2, #851	; 0x353
 800bbce:	498d      	ldr	r1, [pc, #564]	; (800be04 <tcp_split_unsent_seg+0x280>)
 800bbd0:	488b      	ldr	r0, [pc, #556]	; (800be00 <tcp_split_unsent_seg+0x27c>)
 800bbd2:	f006 f9f3 	bl	8011fbc <iprintf>
    return ERR_VAL;
 800bbd6:	f06f 0305 	mvn.w	r3, #5
 800bbda:	e109      	b.n	800bdf0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	891b      	ldrh	r3, [r3, #8]
 800bbe0:	887a      	ldrh	r2, [r7, #2]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d301      	bcc.n	800bbea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e102      	b.n	800bdf0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbee:	887a      	ldrh	r2, [r7, #2]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d906      	bls.n	800bc02 <tcp_split_unsent_seg+0x7e>
 800bbf4:	4b80      	ldr	r3, [pc, #512]	; (800bdf8 <tcp_split_unsent_seg+0x274>)
 800bbf6:	f240 325b 	movw	r2, #859	; 0x35b
 800bbfa:	4983      	ldr	r1, [pc, #524]	; (800be08 <tcp_split_unsent_seg+0x284>)
 800bbfc:	4880      	ldr	r0, [pc, #512]	; (800be00 <tcp_split_unsent_seg+0x27c>)
 800bbfe:	f006 f9dd 	bl	8011fbc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	891b      	ldrh	r3, [r3, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <tcp_split_unsent_seg+0x94>
 800bc0a:	4b7b      	ldr	r3, [pc, #492]	; (800bdf8 <tcp_split_unsent_seg+0x274>)
 800bc0c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bc10:	497e      	ldr	r1, [pc, #504]	; (800be0c <tcp_split_unsent_seg+0x288>)
 800bc12:	487b      	ldr	r0, [pc, #492]	; (800be00 <tcp_split_unsent_seg+0x27c>)
 800bc14:	f006 f9d2 	bl	8011fbc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	7a9b      	ldrb	r3, [r3, #10]
 800bc1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	891a      	ldrh	r2, [r3, #8]
 800bc2e:	887b      	ldrh	r3, [r7, #2]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	89bb      	ldrh	r3, [r7, #12]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc42:	4619      	mov	r1, r3
 800bc44:	2036      	movs	r0, #54	; 0x36
 800bc46:	f7fa fbc3 	bl	80063d0 <pbuf_alloc>
 800bc4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80b7 	beq.w	800bdc2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	891a      	ldrh	r2, [r3, #8]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	891b      	ldrh	r3, [r3, #8]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	887b      	ldrh	r3, [r7, #2]
 800bc64:	4413      	add	r3, r2
 800bc66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6858      	ldr	r0, [r3, #4]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	7bbb      	ldrb	r3, [r7, #14]
 800bc72:	18d1      	adds	r1, r2, r3
 800bc74:	897b      	ldrh	r3, [r7, #10]
 800bc76:	89ba      	ldrh	r2, [r7, #12]
 800bc78:	f7fb f888 	bl	8006d8c <pbuf_copy_partial>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	89bb      	ldrh	r3, [r7, #12]
 800bc82:	4293      	cmp	r3, r2
 800bc84:	f040 809f 	bne.w	800bdc6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	899b      	ldrh	r3, [r3, #12]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f9 fbc5 	bl	8005420 <lwip_htons>
 800bc96:	4603      	mov	r3, r0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bca0:	2300      	movs	r3, #0
 800bca2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bca4:	7efb      	ldrb	r3, [r7, #27]
 800bca6:	f003 0308 	and.w	r3, r3, #8
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bcae:	7efb      	ldrb	r3, [r7, #27]
 800bcb0:	f023 0308 	bic.w	r3, r3, #8
 800bcb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bcb6:	7ebb      	ldrb	r3, [r7, #26]
 800bcb8:	f043 0308 	orr.w	r3, r3, #8
 800bcbc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bcbe:	7efb      	ldrb	r3, [r7, #27]
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d007      	beq.n	800bcd8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bcc8:	7efb      	ldrb	r3, [r7, #27]
 800bcca:	f023 0301 	bic.w	r3, r3, #1
 800bcce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bcd0:	7ebb      	ldrb	r3, [r7, #26]
 800bcd2:	f043 0301 	orr.w	r3, r3, #1
 800bcd6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f9 fbb3 	bl	800544a <lwip_htonl>
 800bce4:	4602      	mov	r2, r0
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	18d1      	adds	r1, r2, r3
 800bcea:	7eba      	ldrb	r2, [r7, #26]
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	6939      	ldr	r1, [r7, #16]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff fa4f 	bl	800b198 <tcp_create_segment>
 800bcfa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d063      	beq.n	800bdca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fa fece 	bl	8006aa8 <pbuf_clen>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd16:	1a9b      	subs	r3, r3, r2
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	6858      	ldr	r0, [r3, #4]
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	891a      	ldrh	r2, [r3, #8]
 800bd2a:	89bb      	ldrh	r3, [r7, #12]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	4619      	mov	r1, r3
 800bd32:	f7fa fcab 	bl	800668c <pbuf_realloc>
  useg->len -= remainder;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	891a      	ldrh	r2, [r3, #8]
 800bd3a:	89bb      	ldrh	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	899b      	ldrh	r3, [r3, #12]
 800bd4a:	b29c      	uxth	r4, r3
 800bd4c:	7efb      	ldrb	r3, [r7, #27]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f9 fb65 	bl	8005420 <lwip_htons>
 800bd56:	4603      	mov	r3, r0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	4322      	orrs	r2, r4
 800bd60:	b292      	uxth	r2, r2
 800bd62:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fa fe9d 	bl	8006aa8 <pbuf_clen>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	461a      	mov	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd78:	4413      	add	r3, r2
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fa fe8e 	bl	8006aa8 <pbuf_clen>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd96:	4413      	add	r3, r2
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d103      	bne.n	800bdbe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e016      	b.n	800bdf0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bdc2:	bf00      	nop
 800bdc4:	e002      	b.n	800bdcc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bdc6:	bf00      	nop
 800bdc8:	e000      	b.n	800bdcc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bdca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d006      	beq.n	800bde0 <tcp_split_unsent_seg+0x25c>
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <tcp_split_unsent_seg+0x274>)
 800bdd4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bdd8:	490d      	ldr	r1, [pc, #52]	; (800be10 <tcp_split_unsent_seg+0x28c>)
 800bdda:	4809      	ldr	r0, [pc, #36]	; (800be00 <tcp_split_unsent_seg+0x27c>)
 800bddc:	f006 f8ee 	bl	8011fbc <iprintf>
  if (p != NULL) {
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bde6:	6938      	ldr	r0, [r7, #16]
 800bde8:	f7fa fdd6 	bl	8006998 <pbuf_free>
  }

  return ERR_MEM;
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3724      	adds	r7, #36	; 0x24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd90      	pop	{r4, r7, pc}
 800bdf8:	080147bc 	.word	0x080147bc
 800bdfc:	08014b50 	.word	0x08014b50
 800be00:	08014810 	.word	0x08014810
 800be04:	08014b74 	.word	0x08014b74
 800be08:	08014b98 	.word	0x08014b98
 800be0c:	08014ba8 	.word	0x08014ba8
 800be10:	08014bb8 	.word	0x08014bb8

0800be14 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800be14:	b590      	push	{r4, r7, lr}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <tcp_send_fin+0x1c>
 800be22:	4b21      	ldr	r3, [pc, #132]	; (800bea8 <tcp_send_fin+0x94>)
 800be24:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800be28:	4920      	ldr	r1, [pc, #128]	; (800beac <tcp_send_fin+0x98>)
 800be2a:	4821      	ldr	r0, [pc, #132]	; (800beb0 <tcp_send_fin+0x9c>)
 800be2c:	f006 f8c6 	bl	8011fbc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d02e      	beq.n	800be96 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	e002      	b.n	800be46 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1f8      	bne.n	800be40 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	899b      	ldrh	r3, [r3, #12]
 800be54:	b29b      	uxth	r3, r3
 800be56:	4618      	mov	r0, r3
 800be58:	f7f9 fae2 	bl	8005420 <lwip_htons>
 800be5c:	4603      	mov	r3, r0
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 0307 	and.w	r3, r3, #7
 800be64:	2b00      	cmp	r3, #0
 800be66:	d116      	bne.n	800be96 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	899b      	ldrh	r3, [r3, #12]
 800be6e:	b29c      	uxth	r4, r3
 800be70:	2001      	movs	r0, #1
 800be72:	f7f9 fad5 	bl	8005420 <lwip_htons>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	4322      	orrs	r2, r4
 800be80:	b292      	uxth	r2, r2
 800be82:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	8b5b      	ldrh	r3, [r3, #26]
 800be88:	f043 0320 	orr.w	r3, r3, #32
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	e004      	b.n	800bea0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800be96:	2101      	movs	r1, #1
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f80b 	bl	800beb4 <tcp_enqueue_flags>
 800be9e:	4603      	mov	r3, r0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd90      	pop	{r4, r7, pc}
 800bea8:	080147bc 	.word	0x080147bc
 800beac:	08014bc4 	.word	0x08014bc4
 800beb0:	08014810 	.word	0x08014810

0800beb4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af02      	add	r7, sp, #8
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bec8:	78fb      	ldrb	r3, [r7, #3]
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <tcp_enqueue_flags+0x2c>
 800bed2:	4b67      	ldr	r3, [pc, #412]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800bed4:	f240 4211 	movw	r2, #1041	; 0x411
 800bed8:	4966      	ldr	r1, [pc, #408]	; (800c074 <tcp_enqueue_flags+0x1c0>)
 800beda:	4867      	ldr	r0, [pc, #412]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800bedc:	f006 f86e 	bl	8011fbc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <tcp_enqueue_flags+0x40>
 800bee6:	4b62      	ldr	r3, [pc, #392]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800bee8:	f240 4213 	movw	r2, #1043	; 0x413
 800beec:	4963      	ldr	r1, [pc, #396]	; (800c07c <tcp_enqueue_flags+0x1c8>)
 800beee:	4862      	ldr	r0, [pc, #392]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800bef0:	f006 f864 	bl	8011fbc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800befe:	2301      	movs	r3, #1
 800bf00:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf02:	7ffb      	ldrb	r3, [r7, #31]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf16:	4619      	mov	r1, r3
 800bf18:	2036      	movs	r0, #54	; 0x36
 800bf1a:	f7fa fa59 	bl	80063d0 <pbuf_alloc>
 800bf1e:	6138      	str	r0, [r7, #16]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	8b5b      	ldrh	r3, [r3, #26]
 800bf2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf34:	f04f 33ff 	mov.w	r3, #4294967295
 800bf38:	e095      	b.n	800c066 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	895a      	ldrh	r2, [r3, #10]
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d206      	bcs.n	800bf54 <tcp_enqueue_flags+0xa0>
 800bf46:	4b4a      	ldr	r3, [pc, #296]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800bf48:	f240 4239 	movw	r2, #1081	; 0x439
 800bf4c:	494c      	ldr	r1, [pc, #304]	; (800c080 <tcp_enqueue_flags+0x1cc>)
 800bf4e:	484a      	ldr	r0, [pc, #296]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800bf50:	f006 f834 	bl	8011fbc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bf58:	78fa      	ldrb	r2, [r7, #3]
 800bf5a:	7ffb      	ldrb	r3, [r7, #31]
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	6939      	ldr	r1, [r7, #16]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff f918 	bl	800b198 <tcp_create_segment>
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d109      	bne.n	800bf84 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8b5b      	ldrh	r3, [r3, #26]
 800bf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	e070      	b.n	800c066 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f003 0303 	and.w	r3, r3, #3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d006      	beq.n	800bf9e <tcp_enqueue_flags+0xea>
 800bf90:	4b37      	ldr	r3, [pc, #220]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800bf92:	f240 4242 	movw	r2, #1090	; 0x442
 800bf96:	493b      	ldr	r1, [pc, #236]	; (800c084 <tcp_enqueue_flags+0x1d0>)
 800bf98:	4837      	ldr	r0, [pc, #220]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800bf9a:	f006 f80f 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	891b      	ldrh	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <tcp_enqueue_flags+0x100>
 800bfa6:	4b32      	ldr	r3, [pc, #200]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800bfa8:	f240 4243 	movw	r2, #1091	; 0x443
 800bfac:	4936      	ldr	r1, [pc, #216]	; (800c088 <tcp_enqueue_flags+0x1d4>)
 800bfae:	4832      	ldr	r0, [pc, #200]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800bfb0:	f006 f804 	bl	8011fbc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfc2:	e00d      	b.n	800bfe0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc8:	61bb      	str	r3, [r7, #24]
 800bfca:	e002      	b.n	800bfd2 <tcp_enqueue_flags+0x11e>
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	61bb      	str	r3, [r7, #24]
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1f8      	bne.n	800bfcc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d104      	bne.n	800bffc <tcp_enqueue_flags+0x148>
 800bff2:	78fb      	ldrb	r3, [r7, #3]
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c006:	78fb      	ldrb	r3, [r7, #3]
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d006      	beq.n	800c01e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	8b5b      	ldrh	r3, [r3, #26]
 800c014:	f043 0320 	orr.w	r3, r3, #32
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	4618      	mov	r0, r3
 800c024:	f7fa fd40 	bl	8006aa8 <pbuf_clen>
 800c028:	4603      	mov	r3, r0
 800c02a:	461a      	mov	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c032:	4413      	add	r3, r2
 800c034:	b29a      	uxth	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00e      	beq.n	800c064 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <tcp_enqueue_flags+0x1b0>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <tcp_enqueue_flags+0x1b0>
 800c056:	4b06      	ldr	r3, [pc, #24]	; (800c070 <tcp_enqueue_flags+0x1bc>)
 800c058:	f240 4265 	movw	r2, #1125	; 0x465
 800c05c:	490b      	ldr	r1, [pc, #44]	; (800c08c <tcp_enqueue_flags+0x1d8>)
 800c05e:	4806      	ldr	r0, [pc, #24]	; (800c078 <tcp_enqueue_flags+0x1c4>)
 800c060:	f005 ffac 	bl	8011fbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3720      	adds	r7, #32
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	080147bc 	.word	0x080147bc
 800c074:	08014be0 	.word	0x08014be0
 800c078:	08014810 	.word	0x08014810
 800c07c:	08014c38 	.word	0x08014c38
 800c080:	08014c58 	.word	0x08014c58
 800c084:	08014c94 	.word	0x08014c94
 800c088:	08014cac 	.word	0x08014cac
 800c08c:	08014cd8 	.word	0x08014cd8

0800c090 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c090:	b5b0      	push	{r4, r5, r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <tcp_output+0x1c>
 800c09e:	4b8a      	ldr	r3, [pc, #552]	; (800c2c8 <tcp_output+0x238>)
 800c0a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c0a4:	4989      	ldr	r1, [pc, #548]	; (800c2cc <tcp_output+0x23c>)
 800c0a6:	488a      	ldr	r0, [pc, #552]	; (800c2d0 <tcp_output+0x240>)
 800c0a8:	f005 ff88 	bl	8011fbc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	7d1b      	ldrb	r3, [r3, #20]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d106      	bne.n	800c0c2 <tcp_output+0x32>
 800c0b4:	4b84      	ldr	r3, [pc, #528]	; (800c2c8 <tcp_output+0x238>)
 800c0b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c0ba:	4986      	ldr	r1, [pc, #536]	; (800c2d4 <tcp_output+0x244>)
 800c0bc:	4884      	ldr	r0, [pc, #528]	; (800c2d0 <tcp_output+0x240>)
 800c0be:	f005 ff7d 	bl	8011fbc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c0c2:	4b85      	ldr	r3, [pc, #532]	; (800c2d8 <tcp_output+0x248>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d101      	bne.n	800c0d0 <tcp_output+0x40>
    return ERR_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e1ce      	b.n	800c46e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	bf28      	it	cs
 800c0e0:	4613      	movcs	r3, r2
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10b      	bne.n	800c10a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	8b5b      	ldrh	r3, [r3, #26]
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 81aa 	beq.w	800c454 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fdcb 	bl	800cc9c <tcp_send_empty_ack>
 800c106:	4603      	mov	r3, r0
 800c108:	e1b1      	b.n	800c46e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3304      	adds	r3, #4
 800c110:	461a      	mov	r2, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff f824 	bl	800b160 <tcp_route>
 800c118:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <tcp_output+0x96>
    return ERR_RTE;
 800c120:	f06f 0303 	mvn.w	r3, #3
 800c124:	e1a3      	b.n	800c46e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <tcp_output+0xa4>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d111      	bne.n	800c158 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <tcp_output+0xb0>
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	3304      	adds	r3, #4
 800c13e:	e000      	b.n	800c142 <tcp_output+0xb2>
 800c140:	2300      	movs	r3, #0
 800c142:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <tcp_output+0xc0>
      return ERR_RTE;
 800c14a:	f06f 0303 	mvn.w	r3, #3
 800c14e:	e18e      	b.n	800c46e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7f9 f973 	bl	800544a <lwip_htonl>
 800c164:	4602      	mov	r2, r0
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16e:	8912      	ldrh	r2, [r2, #8]
 800c170:	4413      	add	r3, r2
 800c172:	69ba      	ldr	r2, [r7, #24]
 800c174:	429a      	cmp	r2, r3
 800c176:	d227      	bcs.n	800c1c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c17e:	461a      	mov	r2, r3
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	4293      	cmp	r3, r2
 800c184:	d114      	bne.n	800c1b0 <tcp_output+0x120>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d110      	bne.n	800c1b0 <tcp_output+0x120>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10b      	bne.n	800c1b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	8b5b      	ldrh	r3, [r3, #26]
 800c1b4:	f003 0302 	and.w	r3, r3, #2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 814d 	beq.w	800c458 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fd6c 	bl	800cc9c <tcp_send_empty_ack>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	e152      	b.n	800c46e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 811c 	beq.w	800c416 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c1de:	e002      	b.n	800c1e6 <tcp_output+0x156>
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	623b      	str	r3, [r7, #32]
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1f8      	bne.n	800c1e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c1ee:	e112      	b.n	800c416 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7f9 f911 	bl	8005420 <lwip_htons>
 800c1fe:	4603      	mov	r3, r0
 800c200:	b2db      	uxtb	r3, r3
 800c202:	f003 0304 	and.w	r3, r3, #4
 800c206:	2b00      	cmp	r3, #0
 800c208:	d006      	beq.n	800c218 <tcp_output+0x188>
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <tcp_output+0x238>)
 800c20c:	f240 5236 	movw	r2, #1334	; 0x536
 800c210:	4932      	ldr	r1, [pc, #200]	; (800c2dc <tcp_output+0x24c>)
 800c212:	482f      	ldr	r0, [pc, #188]	; (800c2d0 <tcp_output+0x240>)
 800c214:	f005 fed2 	bl	8011fbc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01f      	beq.n	800c260 <tcp_output+0x1d0>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	8b5b      	ldrh	r3, [r3, #26]
 800c224:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d119      	bne.n	800c260 <tcp_output+0x1d0>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <tcp_output+0x1bc>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d110      	bne.n	800c260 <tcp_output+0x1d0>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c242:	891a      	ldrh	r2, [r3, #8]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c248:	429a      	cmp	r2, r3
 800c24a:	d209      	bcs.n	800c260 <tcp_output+0x1d0>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c252:	2b00      	cmp	r3, #0
 800c254:	d004      	beq.n	800c260 <tcp_output+0x1d0>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d901      	bls.n	800c264 <tcp_output+0x1d4>
 800c260:	2301      	movs	r3, #1
 800c262:	e000      	b.n	800c266 <tcp_output+0x1d6>
 800c264:	2300      	movs	r3, #0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d106      	bne.n	800c278 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8b5b      	ldrh	r3, [r3, #26]
 800c26e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 80e4 	beq.w	800c440 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7d1b      	ldrb	r3, [r3, #20]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d00d      	beq.n	800c29c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	899b      	ldrh	r3, [r3, #12]
 800c286:	b29c      	uxth	r4, r3
 800c288:	2010      	movs	r0, #16
 800c28a:	f7f9 f8c9 	bl	8005420 <lwip_htons>
 800c28e:	4603      	mov	r3, r0
 800c290:	461a      	mov	r2, r3
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4322      	orrs	r2, r4
 800c298:	b292      	uxth	r2, r2
 800c29a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2a2:	f000 f909 	bl	800c4b8 <tcp_output_segment>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d016      	beq.n	800c2e0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	8b5b      	ldrh	r3, [r3, #26]
 800c2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	835a      	strh	r2, [r3, #26]
      return err;
 800c2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2c4:	e0d3      	b.n	800c46e <tcp_output+0x3de>
 800c2c6:	bf00      	nop
 800c2c8:	080147bc 	.word	0x080147bc
 800c2cc:	08014d00 	.word	0x08014d00
 800c2d0:	08014810 	.word	0x08014810
 800c2d4:	08014d18 	.word	0x08014d18
 800c2d8:	20006878 	.word	0x20006878
 800c2dc:	08014d40 	.word	0x08014d40
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7d1b      	ldrb	r3, [r3, #20]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d006      	beq.n	800c2fe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	8b5b      	ldrh	r3, [r3, #26]
 800c2f4:	f023 0303 	bic.w	r3, r3, #3
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	f7f9 f8a0 	bl	800544a <lwip_htonl>
 800c30a:	4604      	mov	r4, r0
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	891b      	ldrh	r3, [r3, #8]
 800c310:	461d      	mov	r5, r3
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	899b      	ldrh	r3, [r3, #12]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7f9 f880 	bl	8005420 <lwip_htons>
 800c320:	4603      	mov	r3, r0
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <tcp_output+0x2a0>
 800c32c:	2301      	movs	r3, #1
 800c32e:	e000      	b.n	800c332 <tcp_output+0x2a2>
 800c330:	2300      	movs	r3, #0
 800c332:	442b      	add	r3, r5
 800c334:	4423      	add	r3, r4
 800c336:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	2b00      	cmp	r3, #0
 800c342:	da02      	bge.n	800c34a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	891b      	ldrh	r3, [r3, #8]
 800c34e:	461c      	mov	r4, r3
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	899b      	ldrh	r3, [r3, #12]
 800c356:	b29b      	uxth	r3, r3
 800c358:	4618      	mov	r0, r3
 800c35a:	f7f9 f861 	bl	8005420 <lwip_htons>
 800c35e:	4603      	mov	r3, r0
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 0303 	and.w	r3, r3, #3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <tcp_output+0x2de>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <tcp_output+0x2e0>
 800c36e:	2300      	movs	r3, #0
 800c370:	4423      	add	r3, r4
 800c372:	2b00      	cmp	r3, #0
 800c374:	d049      	beq.n	800c40a <tcp_output+0x37a>
      seg->next = NULL;
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <tcp_output+0x300>
        pcb->unacked = seg;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c388:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	623b      	str	r3, [r7, #32]
 800c38e:	e03f      	b.n	800c410 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	f7f9 f857 	bl	800544a <lwip_htonl>
 800c39c:	4604      	mov	r4, r0
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7f9 f850 	bl	800544a <lwip_htonl>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	1ae3      	subs	r3, r4, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da24      	bge.n	800c3fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3370      	adds	r3, #112	; 0x70
 800c3b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3b8:	e002      	b.n	800c3c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d011      	beq.n	800c3ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f9 f83a 	bl	800544a <lwip_htonl>
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f9 f833 	bl	800544a <lwip_htonl>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	dbe6      	blt.n	800c3ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	e009      	b.n	800c410 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c400:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	623b      	str	r3, [r7, #32]
 800c408:	e002      	b.n	800c410 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c40c:	f7fb ff01 	bl	8008212 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d012      	beq.n	800c442 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	f7f9 f811 	bl	800544a <lwip_htonl>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c432:	8912      	ldrh	r2, [r2, #8]
 800c434:	4413      	add	r3, r2
  while (seg != NULL &&
 800c436:	69ba      	ldr	r2, [r7, #24]
 800c438:	429a      	cmp	r2, r3
 800c43a:	f4bf aed9 	bcs.w	800c1f0 <tcp_output+0x160>
 800c43e:	e000      	b.n	800c442 <tcp_output+0x3b2>
      break;
 800c440:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d108      	bne.n	800c45c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c452:	e004      	b.n	800c45e <tcp_output+0x3ce>
    goto output_done;
 800c454:	bf00      	nop
 800c456:	e002      	b.n	800c45e <tcp_output+0x3ce>
    goto output_done;
 800c458:	bf00      	nop
 800c45a:	e000      	b.n	800c45e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c45c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	8b5b      	ldrh	r3, [r3, #26]
 800c462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c466:	b29a      	uxth	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3728      	adds	r7, #40	; 0x28
 800c472:	46bd      	mov	sp, r7
 800c474:	bdb0      	pop	{r4, r5, r7, pc}
 800c476:	bf00      	nop

0800c478 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <tcp_output_segment_busy+0x1c>
 800c486:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <tcp_output_segment_busy+0x34>)
 800c488:	f240 529a 	movw	r2, #1434	; 0x59a
 800c48c:	4908      	ldr	r1, [pc, #32]	; (800c4b0 <tcp_output_segment_busy+0x38>)
 800c48e:	4809      	ldr	r0, [pc, #36]	; (800c4b4 <tcp_output_segment_busy+0x3c>)
 800c490:	f005 fd94 	bl	8011fbc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	7b9b      	ldrb	r3, [r3, #14]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d001      	beq.n	800c4a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e000      	b.n	800c4a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	080147bc 	.word	0x080147bc
 800c4b0:	08014d58 	.word	0x08014d58
 800c4b4:	08014810 	.word	0x08014810

0800c4b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c4b8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ba:	b08c      	sub	sp, #48	; 0x30
 800c4bc:	af04      	add	r7, sp, #16
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <tcp_output_segment+0x20>
 800c4ca:	4b63      	ldr	r3, [pc, #396]	; (800c658 <tcp_output_segment+0x1a0>)
 800c4cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c4d0:	4962      	ldr	r1, [pc, #392]	; (800c65c <tcp_output_segment+0x1a4>)
 800c4d2:	4863      	ldr	r0, [pc, #396]	; (800c660 <tcp_output_segment+0x1a8>)
 800c4d4:	f005 fd72 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <tcp_output_segment+0x34>
 800c4de:	4b5e      	ldr	r3, [pc, #376]	; (800c658 <tcp_output_segment+0x1a0>)
 800c4e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c4e4:	495f      	ldr	r1, [pc, #380]	; (800c664 <tcp_output_segment+0x1ac>)
 800c4e6:	485e      	ldr	r0, [pc, #376]	; (800c660 <tcp_output_segment+0x1a8>)
 800c4e8:	f005 fd68 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_output_segment+0x48>
 800c4f2:	4b59      	ldr	r3, [pc, #356]	; (800c658 <tcp_output_segment+0x1a0>)
 800c4f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c4f8:	495b      	ldr	r1, [pc, #364]	; (800c668 <tcp_output_segment+0x1b0>)
 800c4fa:	4859      	ldr	r0, [pc, #356]	; (800c660 <tcp_output_segment+0x1a8>)
 800c4fc:	f005 fd5e 	bl	8011fbc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff ffb9 	bl	800c478 <tcp_output_segment_busy>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	e09f      	b.n	800c650 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68dc      	ldr	r4, [r3, #12]
 800c518:	4610      	mov	r0, r2
 800c51a:	f7f8 ff96 	bl	800544a <lwip_htonl>
 800c51e:	4603      	mov	r3, r0
 800c520:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68dc      	ldr	r4, [r3, #12]
 800c52a:	4610      	mov	r0, r2
 800c52c:	f7f8 ff78 	bl	8005420 <lwip_htons>
 800c530:	4603      	mov	r3, r0
 800c532:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c53c:	441a      	add	r2, r3
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	3314      	adds	r3, #20
 800c548:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	7a9b      	ldrb	r3, [r3, #10]
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d015      	beq.n	800c582 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	3304      	adds	r3, #4
 800c55a:	461a      	mov	r2, r3
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c562:	f7fc fa33 	bl	80089cc <tcp_eff_send_mss_netif>
 800c566:	4603      	mov	r3, r0
 800c568:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c56a:	8b7b      	ldrh	r3, [r7, #26]
 800c56c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c570:	4618      	mov	r0, r3
 800c572:	f7f8 ff6a 	bl	800544a <lwip_htonl>
 800c576:	4602      	mov	r2, r0
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	3304      	adds	r3, #4
 800c580:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c588:	2b00      	cmp	r3, #0
 800c58a:	da02      	bge.n	800c592 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2200      	movs	r2, #0
 800c590:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10c      	bne.n	800c5b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c59a:	4b34      	ldr	r3, [pc, #208]	; (800c66c <tcp_output_segment+0x1b4>)
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7f8 ff4e 	bl	800544a <lwip_htonl>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	68da      	ldr	r2, [r3, #12]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	8959      	ldrh	r1, [r3, #10]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	8b3a      	ldrh	r2, [r7, #24]
 800c5ce:	1a8a      	subs	r2, r1, r2
 800c5d0:	b292      	uxth	r2, r2
 800c5d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	8919      	ldrh	r1, [r3, #8]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	8b3a      	ldrh	r2, [r7, #24]
 800c5e0:	1a8a      	subs	r2, r1, r2
 800c5e2:	b292      	uxth	r2, r2
 800c5e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	68d2      	ldr	r2, [r2, #12]
 800c5ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	741a      	strb	r2, [r3, #16]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f103 0214 	add.w	r2, r3, #20
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	7a9b      	ldrb	r3, [r3, #10]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	4413      	add	r3, r2
 800c610:	69fa      	ldr	r2, [r7, #28]
 800c612:	429a      	cmp	r2, r3
 800c614:	d006      	beq.n	800c624 <tcp_output_segment+0x16c>
 800c616:	4b10      	ldr	r3, [pc, #64]	; (800c658 <tcp_output_segment+0x1a0>)
 800c618:	f240 621c 	movw	r2, #1564	; 0x61c
 800c61c:	4914      	ldr	r1, [pc, #80]	; (800c670 <tcp_output_segment+0x1b8>)
 800c61e:	4810      	ldr	r0, [pc, #64]	; (800c660 <tcp_output_segment+0x1a8>)
 800c620:	f005 fccc 	bl	8011fbc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6858      	ldr	r0, [r3, #4]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	1d1c      	adds	r4, r3, #4
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	7add      	ldrb	r5, [r3, #11]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	7a9b      	ldrb	r3, [r3, #10]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	9202      	str	r2, [sp, #8]
 800c63a:	2206      	movs	r2, #6
 800c63c:	9201      	str	r2, [sp, #4]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	462b      	mov	r3, r5
 800c642:	4622      	mov	r2, r4
 800c644:	f004 fbb2 	bl	8010dac <ip4_output_if>
 800c648:	4603      	mov	r3, r0
 800c64a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bdb0      	pop	{r4, r5, r7, pc}
 800c658:	080147bc 	.word	0x080147bc
 800c65c:	08014d80 	.word	0x08014d80
 800c660:	08014810 	.word	0x08014810
 800c664:	08014da0 	.word	0x08014da0
 800c668:	08014dc0 	.word	0x08014dc0
 800c66c:	2000682c 	.word	0x2000682c
 800c670:	08014de4 	.word	0x08014de4

0800c674 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c674:	b5b0      	push	{r4, r5, r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <tcp_rexmit_rto_prepare+0x1c>
 800c682:	4b31      	ldr	r3, [pc, #196]	; (800c748 <tcp_rexmit_rto_prepare+0xd4>)
 800c684:	f240 6263 	movw	r2, #1635	; 0x663
 800c688:	4930      	ldr	r1, [pc, #192]	; (800c74c <tcp_rexmit_rto_prepare+0xd8>)
 800c68a:	4831      	ldr	r0, [pc, #196]	; (800c750 <tcp_rexmit_rto_prepare+0xdc>)
 800c68c:	f005 fc96 	bl	8011fbc <iprintf>

  if (pcb->unacked == NULL) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c698:	f06f 0305 	mvn.w	r3, #5
 800c69c:	e050      	b.n	800c740 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e00b      	b.n	800c6be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7ff fee6 	bl	800c478 <tcp_output_segment_busy>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c6b2:	f06f 0305 	mvn.w	r3, #5
 800c6b6:	e043      	b.n	800c740 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1ef      	bne.n	800c6a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fed6 	bl	800c478 <tcp_output_segment_busy>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c6d2:	f06f 0305 	mvn.w	r3, #5
 800c6d6:	e033      	b.n	800c740 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	8b5b      	ldrh	r3, [r3, #26]
 800c6f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	4618      	mov	r0, r3
 800c704:	f7f8 fea1 	bl	800544a <lwip_htonl>
 800c708:	4604      	mov	r4, r0
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	891b      	ldrh	r3, [r3, #8]
 800c70e:	461d      	mov	r5, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	899b      	ldrh	r3, [r3, #12]
 800c716:	b29b      	uxth	r3, r3
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f8 fe81 	bl	8005420 <lwip_htons>
 800c71e:	4603      	mov	r3, r0
 800c720:	b2db      	uxtb	r3, r3
 800c722:	f003 0303 	and.w	r3, r3, #3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <tcp_rexmit_rto_prepare+0xba>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <tcp_rexmit_rto_prepare+0xbc>
 800c72e:	2300      	movs	r3, #0
 800c730:	442b      	add	r3, r5
 800c732:	18e2      	adds	r2, r4, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bdb0      	pop	{r4, r5, r7, pc}
 800c748:	080147bc 	.word	0x080147bc
 800c74c:	08014df8 	.word	0x08014df8
 800c750:	08014810 	.word	0x08014810

0800c754 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <tcp_rexmit_rto_commit+0x1c>
 800c762:	4b0d      	ldr	r3, [pc, #52]	; (800c798 <tcp_rexmit_rto_commit+0x44>)
 800c764:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c768:	490c      	ldr	r1, [pc, #48]	; (800c79c <tcp_rexmit_rto_commit+0x48>)
 800c76a:	480d      	ldr	r0, [pc, #52]	; (800c7a0 <tcp_rexmit_rto_commit+0x4c>)
 800c76c:	f005 fc26 	bl	8011fbc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c776:	2bff      	cmp	r3, #255	; 0xff
 800c778:	d007      	beq.n	800c78a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c780:	3301      	adds	r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff fc80 	bl	800c090 <tcp_output>
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	080147bc 	.word	0x080147bc
 800c79c:	08014e1c 	.word	0x08014e1c
 800c7a0:	08014810 	.word	0x08014810

0800c7a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d106      	bne.n	800c7c0 <tcp_rexmit_rto+0x1c>
 800c7b2:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <tcp_rexmit_rto+0x38>)
 800c7b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c7b8:	4909      	ldr	r1, [pc, #36]	; (800c7e0 <tcp_rexmit_rto+0x3c>)
 800c7ba:	480a      	ldr	r0, [pc, #40]	; (800c7e4 <tcp_rexmit_rto+0x40>)
 800c7bc:	f005 fbfe 	bl	8011fbc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff ff57 	bl	800c674 <tcp_rexmit_rto_prepare>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ffc1 	bl	800c754 <tcp_rexmit_rto_commit>
  }
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	080147bc 	.word	0x080147bc
 800c7e0:	08014e40 	.word	0x08014e40
 800c7e4:	08014810 	.word	0x08014810

0800c7e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c7e8:	b590      	push	{r4, r7, lr}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <tcp_rexmit+0x1c>
 800c7f6:	4b2f      	ldr	r3, [pc, #188]	; (800c8b4 <tcp_rexmit+0xcc>)
 800c7f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c7fc:	492e      	ldr	r1, [pc, #184]	; (800c8b8 <tcp_rexmit+0xd0>)
 800c7fe:	482f      	ldr	r0, [pc, #188]	; (800c8bc <tcp_rexmit+0xd4>)
 800c800:	f005 fbdc 	bl	8011fbc <iprintf>

  if (pcb->unacked == NULL) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c80c:	f06f 0305 	mvn.w	r3, #5
 800c810:	e04c      	b.n	800c8ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c816:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c818:	68b8      	ldr	r0, [r7, #8]
 800c81a:	f7ff fe2d 	bl	800c478 <tcp_output_segment_busy>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c824:	f06f 0305 	mvn.w	r3, #5
 800c828:	e040      	b.n	800c8ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	336c      	adds	r3, #108	; 0x6c
 800c836:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c838:	e002      	b.n	800c840 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d011      	beq.n	800c86c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	f7f8 fdfa 	bl	800544a <lwip_htonl>
 800c856:	4604      	mov	r4, r0
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f8 fdf3 	bl	800544a <lwip_htonl>
 800c864:	4603      	mov	r3, r0
 800c866:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dbe6      	blt.n	800c83a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c890:	2bff      	cmp	r3, #255	; 0xff
 800c892:	d007      	beq.n	800c8a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c89a:	3301      	adds	r3, #1
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd90      	pop	{r4, r7, pc}
 800c8b4:	080147bc 	.word	0x080147bc
 800c8b8:	08014e5c 	.word	0x08014e5c
 800c8bc:	08014810 	.word	0x08014810

0800c8c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <tcp_rexmit_fast+0x1c>
 800c8ce:	4b2a      	ldr	r3, [pc, #168]	; (800c978 <tcp_rexmit_fast+0xb8>)
 800c8d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c8d4:	4929      	ldr	r1, [pc, #164]	; (800c97c <tcp_rexmit_fast+0xbc>)
 800c8d6:	482a      	ldr	r0, [pc, #168]	; (800c980 <tcp_rexmit_fast+0xc0>)
 800c8d8:	f005 fb70 	bl	8011fbc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d045      	beq.n	800c970 <tcp_rexmit_fast+0xb0>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	8b5b      	ldrh	r3, [r3, #26]
 800c8e8:	f003 0304 	and.w	r3, r3, #4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d13f      	bne.n	800c970 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff ff79 	bl	800c7e8 <tcp_rexmit>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d139      	bne.n	800c970 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c908:	4293      	cmp	r3, r2
 800c90a:	bf28      	it	cs
 800c90c:	4613      	movcs	r3, r2
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	da00      	bge.n	800c916 <tcp_rexmit_fast+0x56>
 800c914:	3301      	adds	r3, #1
 800c916:	105b      	asrs	r3, r3, #1
 800c918:	b29a      	uxth	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c926:	461a      	mov	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	429a      	cmp	r2, r3
 800c930:	d206      	bcs.n	800c940 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	b29a      	uxth	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94a:	4619      	mov	r1, r3
 800c94c:	0049      	lsls	r1, r1, #1
 800c94e:	440b      	add	r3, r1
 800c950:	b29b      	uxth	r3, r3
 800c952:	4413      	add	r3, r2
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8b5b      	ldrh	r3, [r3, #26]
 800c960:	f043 0304 	orr.w	r3, r3, #4
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	080147bc 	.word	0x080147bc
 800c97c:	08014e74 	.word	0x08014e74
 800c980:	08014810 	.word	0x08014810

0800c984 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	607b      	str	r3, [r7, #4]
 800c98e:	460b      	mov	r3, r1
 800c990:	817b      	strh	r3, [r7, #10]
 800c992:	4613      	mov	r3, r2
 800c994:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c996:	897a      	ldrh	r2, [r7, #10]
 800c998:	893b      	ldrh	r3, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	3314      	adds	r3, #20
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	2022      	movs	r0, #34	; 0x22
 800c9aa:	f7f9 fd11 	bl	80063d0 <pbuf_alloc>
 800c9ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d04d      	beq.n	800ca52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c9b6:	897b      	ldrh	r3, [r7, #10]
 800c9b8:	3313      	adds	r3, #19
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	8952      	ldrh	r2, [r2, #10]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	db06      	blt.n	800c9d0 <tcp_output_alloc_header_common+0x4c>
 800c9c2:	4b26      	ldr	r3, [pc, #152]	; (800ca5c <tcp_output_alloc_header_common+0xd8>)
 800c9c4:	f240 7223 	movw	r2, #1827	; 0x723
 800c9c8:	4925      	ldr	r1, [pc, #148]	; (800ca60 <tcp_output_alloc_header_common+0xdc>)
 800c9ca:	4826      	ldr	r0, [pc, #152]	; (800ca64 <tcp_output_alloc_header_common+0xe0>)
 800c9cc:	f005 faf6 	bl	8011fbc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c9d6:	8c3b      	ldrh	r3, [r7, #32]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f8 fd21 	bl	8005420 <lwip_htons>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c9e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7f8 fd19 	bl	8005420 <lwip_htons>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7f8 fd24 	bl	800544a <lwip_htonl>
 800ca02:	4602      	mov	r2, r0
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ca08:	897b      	ldrh	r3, [r7, #10]
 800ca0a:	089b      	lsrs	r3, r3, #2
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	3305      	adds	r3, #5
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	031b      	lsls	r3, r3, #12
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f8 fcfd 	bl	8005420 <lwip_htons>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ca2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7f8 fcf5 	bl	8005420 <lwip_htons>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2200      	movs	r2, #0
 800ca42:	741a      	strb	r2, [r3, #16]
 800ca44:	2200      	movs	r2, #0
 800ca46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	749a      	strb	r2, [r3, #18]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ca52:	697b      	ldr	r3, [r7, #20]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	080147bc 	.word	0x080147bc
 800ca60:	08014e94 	.word	0x08014e94
 800ca64:	08014810 	.word	0x08014810

0800ca68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ca68:	b5b0      	push	{r4, r5, r7, lr}
 800ca6a:	b08a      	sub	sp, #40	; 0x28
 800ca6c:	af04      	add	r7, sp, #16
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	607b      	str	r3, [r7, #4]
 800ca72:	460b      	mov	r3, r1
 800ca74:	817b      	strh	r3, [r7, #10]
 800ca76:	4613      	mov	r3, r2
 800ca78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <tcp_output_alloc_header+0x26>
 800ca80:	4b15      	ldr	r3, [pc, #84]	; (800cad8 <tcp_output_alloc_header+0x70>)
 800ca82:	f240 7242 	movw	r2, #1858	; 0x742
 800ca86:	4915      	ldr	r1, [pc, #84]	; (800cadc <tcp_output_alloc_header+0x74>)
 800ca88:	4815      	ldr	r0, [pc, #84]	; (800cae0 <tcp_output_alloc_header+0x78>)
 800ca8a:	f005 fa97 	bl	8011fbc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	8adb      	ldrh	r3, [r3, #22]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	8b12      	ldrh	r2, [r2, #24]
 800ca9a:	68f9      	ldr	r1, [r7, #12]
 800ca9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ca9e:	893d      	ldrh	r5, [r7, #8]
 800caa0:	897c      	ldrh	r4, [r7, #10]
 800caa2:	9103      	str	r1, [sp, #12]
 800caa4:	2110      	movs	r1, #16
 800caa6:	9102      	str	r1, [sp, #8]
 800caa8:	9201      	str	r2, [sp, #4]
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	462a      	mov	r2, r5
 800cab0:	4621      	mov	r1, r4
 800cab2:	f7ff ff67 	bl	800c984 <tcp_output_alloc_header_common>
 800cab6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d006      	beq.n	800cacc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cac6:	441a      	add	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cacc:	697b      	ldr	r3, [r7, #20]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bdb0      	pop	{r4, r5, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	080147bc 	.word	0x080147bc
 800cadc:	08014ec4 	.word	0x08014ec4
 800cae0:	08014810 	.word	0x08014810

0800cae4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	4611      	mov	r1, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	460b      	mov	r3, r1
 800caf4:	71fb      	strb	r3, [r7, #7]
 800caf6:	4613      	mov	r3, r2
 800caf8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <tcp_output_fill_options+0x2e>
 800cb04:	4b13      	ldr	r3, [pc, #76]	; (800cb54 <tcp_output_fill_options+0x70>)
 800cb06:	f240 7256 	movw	r2, #1878	; 0x756
 800cb0a:	4913      	ldr	r1, [pc, #76]	; (800cb58 <tcp_output_fill_options+0x74>)
 800cb0c:	4813      	ldr	r0, [pc, #76]	; (800cb5c <tcp_output_fill_options+0x78>)
 800cb0e:	f005 fa55 	bl	8011fbc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	f103 0214 	add.w	r2, r3, #20
 800cb24:	8bfb      	ldrh	r3, [r7, #30]
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4619      	mov	r1, r3
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	f003 0304 	and.w	r3, r3, #4
 800cb32:	440b      	add	r3, r1
 800cb34:	4413      	add	r3, r2
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d006      	beq.n	800cb4a <tcp_output_fill_options+0x66>
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <tcp_output_fill_options+0x70>)
 800cb3e:	f240 7275 	movw	r2, #1909	; 0x775
 800cb42:	4907      	ldr	r1, [pc, #28]	; (800cb60 <tcp_output_fill_options+0x7c>)
 800cb44:	4805      	ldr	r0, [pc, #20]	; (800cb5c <tcp_output_fill_options+0x78>)
 800cb46:	f005 fa39 	bl	8011fbc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cb4a:	bf00      	nop
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	080147bc 	.word	0x080147bc
 800cb58:	08014eec 	.word	0x08014eec
 800cb5c:	08014810 	.word	0x08014810
 800cb60:	08014de4 	.word	0x08014de4

0800cb64 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b08a      	sub	sp, #40	; 0x28
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
 800cb70:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d106      	bne.n	800cb86 <tcp_output_control_segment+0x22>
 800cb78:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <tcp_output_control_segment+0x88>)
 800cb7a:	f240 7287 	movw	r2, #1927	; 0x787
 800cb7e:	491c      	ldr	r1, [pc, #112]	; (800cbf0 <tcp_output_control_segment+0x8c>)
 800cb80:	481c      	ldr	r0, [pc, #112]	; (800cbf4 <tcp_output_control_segment+0x90>)
 800cb82:	f005 fa1b 	bl	8011fbc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7fe fae8 	bl	800b160 <tcp_route>
 800cb90:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cb98:	23fc      	movs	r3, #252	; 0xfc
 800cb9a:	75fb      	strb	r3, [r7, #23]
 800cb9c:	e01c      	b.n	800cbd8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	7adb      	ldrb	r3, [r3, #11]
 800cba8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	7a9b      	ldrb	r3, [r3, #10]
 800cbae:	757b      	strb	r3, [r7, #21]
 800cbb0:	e003      	b.n	800cbba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cbb2:	23ff      	movs	r3, #255	; 0xff
 800cbb4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cbba:	7dba      	ldrb	r2, [r7, #22]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	9302      	str	r3, [sp, #8]
 800cbc0:	2306      	movs	r3, #6
 800cbc2:	9301      	str	r3, [sp, #4]
 800cbc4:	7d7b      	ldrb	r3, [r7, #21]
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	68b8      	ldr	r0, [r7, #8]
 800cbd0:	f004 f8ec 	bl	8010dac <ip4_output_if>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cbd8:	68b8      	ldr	r0, [r7, #8]
 800cbda:	f7f9 fedd 	bl	8006998 <pbuf_free>
  return err;
 800cbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	080147bc 	.word	0x080147bc
 800cbf0:	08014f14 	.word	0x08014f14
 800cbf4:	08014810 	.word	0x08014810

0800cbf8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b08b      	sub	sp, #44	; 0x2c
 800cbfc:	af04      	add	r7, sp, #16
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <tcp_rst+0x22>
 800cc0c:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <tcp_rst+0x94>)
 800cc0e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cc12:	491f      	ldr	r1, [pc, #124]	; (800cc90 <tcp_rst+0x98>)
 800cc14:	481f      	ldr	r0, [pc, #124]	; (800cc94 <tcp_rst+0x9c>)
 800cc16:	f005 f9d1 	bl	8011fbc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <tcp_rst+0x36>
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <tcp_rst+0x94>)
 800cc22:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cc26:	491c      	ldr	r1, [pc, #112]	; (800cc98 <tcp_rst+0xa0>)
 800cc28:	481a      	ldr	r0, [pc, #104]	; (800cc94 <tcp_rst+0x9c>)
 800cc2a:	f005 f9c7 	bl	8011fbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc2e:	2300      	movs	r3, #0
 800cc30:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cc32:	f246 0308 	movw	r3, #24584	; 0x6008
 800cc36:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	b29c      	uxth	r4, r3
 800cc3c:	68b8      	ldr	r0, [r7, #8]
 800cc3e:	f7f8 fc04 	bl	800544a <lwip_htonl>
 800cc42:	4602      	mov	r2, r0
 800cc44:	8abb      	ldrh	r3, [r7, #20]
 800cc46:	9303      	str	r3, [sp, #12]
 800cc48:	2314      	movs	r3, #20
 800cc4a:	9302      	str	r3, [sp, #8]
 800cc4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4613      	mov	r3, r2
 800cc56:	2200      	movs	r2, #0
 800cc58:	4621      	mov	r1, r4
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7ff fe92 	bl	800c984 <tcp_output_alloc_header_common>
 800cc60:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00c      	beq.n	800cc82 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6939      	ldr	r1, [r7, #16]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff ff38 	bl	800cae4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	6939      	ldr	r1, [r7, #16]
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff ff72 	bl	800cb64 <tcp_output_control_segment>
 800cc80:	e000      	b.n	800cc84 <tcp_rst+0x8c>
    return;
 800cc82:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd90      	pop	{r4, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	080147bc 	.word	0x080147bc
 800cc90:	08014f40 	.word	0x08014f40
 800cc94:	08014810 	.word	0x08014810
 800cc98:	08014f5c 	.word	0x08014f5c

0800cc9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cc9c:	b590      	push	{r4, r7, lr}
 800cc9e:	b087      	sub	sp, #28
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <tcp_send_empty_ack+0x24>
 800ccb2:	4b28      	ldr	r3, [pc, #160]	; (800cd54 <tcp_send_empty_ack+0xb8>)
 800ccb4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ccb8:	4927      	ldr	r1, [pc, #156]	; (800cd58 <tcp_send_empty_ack+0xbc>)
 800ccba:	4828      	ldr	r0, [pc, #160]	; (800cd5c <tcp_send_empty_ack+0xc0>)
 800ccbc:	f005 f97e 	bl	8011fbc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f003 0304 	and.w	r3, r3, #4
 800ccca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cccc:	7d7b      	ldrb	r3, [r7, #21]
 800ccce:	b29c      	uxth	r4, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7f8 fbb8 	bl	800544a <lwip_htonl>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2200      	movs	r2, #0
 800ccde:	4621      	mov	r1, r4
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fec1 	bl	800ca68 <tcp_output_alloc_header>
 800cce6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d109      	bne.n	800cd02 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	8b5b      	ldrh	r3, [r3, #26]
 800ccf2:	f043 0303 	orr.w	r3, r3, #3
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ccfc:	f06f 0301 	mvn.w	r3, #1
 800cd00:	e023      	b.n	800cd4a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cd02:	7dbb      	ldrb	r3, [r7, #22]
 800cd04:	7dfa      	ldrb	r2, [r7, #23]
 800cd06:	6939      	ldr	r1, [r7, #16]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff feeb 	bl	800cae4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	6939      	ldr	r1, [r7, #16]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff ff24 	bl	800cb64 <tcp_output_control_segment>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cd20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d007      	beq.n	800cd38 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8b5b      	ldrh	r3, [r3, #26]
 800cd2c:	f043 0303 	orr.w	r3, r3, #3
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	835a      	strh	r2, [r3, #26]
 800cd36:	e006      	b.n	800cd46 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8b5b      	ldrh	r3, [r3, #26]
 800cd3c:	f023 0303 	bic.w	r3, r3, #3
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cd46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	371c      	adds	r7, #28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd90      	pop	{r4, r7, pc}
 800cd52:	bf00      	nop
 800cd54:	080147bc 	.word	0x080147bc
 800cd58:	08014f78 	.word	0x08014f78
 800cd5c:	08014810 	.word	0x08014810

0800cd60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cd60:	b590      	push	{r4, r7, lr}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cd68:	2300      	movs	r3, #0
 800cd6a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d106      	bne.n	800cd80 <tcp_keepalive+0x20>
 800cd72:	4b18      	ldr	r3, [pc, #96]	; (800cdd4 <tcp_keepalive+0x74>)
 800cd74:	f640 0224 	movw	r2, #2084	; 0x824
 800cd78:	4917      	ldr	r1, [pc, #92]	; (800cdd8 <tcp_keepalive+0x78>)
 800cd7a:	4818      	ldr	r0, [pc, #96]	; (800cddc <tcp_keepalive+0x7c>)
 800cd7c:	f005 f91e 	bl	8011fbc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	b29c      	uxth	r4, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f8 fb5d 	bl	800544a <lwip_htonl>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2200      	movs	r2, #0
 800cd94:	4621      	mov	r1, r4
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fe66 	bl	800ca68 <tcp_output_alloc_header>
 800cd9c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295
 800cda8:	e010      	b.n	800cdcc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2200      	movs	r2, #0
 800cdae:	6939      	ldr	r1, [r7, #16]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff fe97 	bl	800cae4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3304      	adds	r3, #4
 800cdbc:	6939      	ldr	r1, [r7, #16]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fed0 	bl	800cb64 <tcp_output_control_segment>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cdc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	371c      	adds	r7, #28
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}
 800cdd4:	080147bc 	.word	0x080147bc
 800cdd8:	08014f98 	.word	0x08014f98
 800cddc:	08014810 	.word	0x08014810

0800cde0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b08b      	sub	sp, #44	; 0x2c
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cde8:	2300      	movs	r3, #0
 800cdea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d106      	bne.n	800ce02 <tcp_zero_window_probe+0x22>
 800cdf4:	4b4c      	ldr	r3, [pc, #304]	; (800cf28 <tcp_zero_window_probe+0x148>)
 800cdf6:	f640 024f 	movw	r2, #2127	; 0x84f
 800cdfa:	494c      	ldr	r1, [pc, #304]	; (800cf2c <tcp_zero_window_probe+0x14c>)
 800cdfc:	484c      	ldr	r0, [pc, #304]	; (800cf30 <tcp_zero_window_probe+0x150>)
 800cdfe:	f005 f8dd 	bl	8011fbc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce06:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e086      	b.n	800cf20 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce18:	2bff      	cmp	r3, #255	; 0xff
 800ce1a:	d007      	beq.n	800ce2c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce22:	3301      	adds	r3, #1
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	899b      	ldrh	r3, [r3, #12]
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f8 faf3 	bl	8005420 <lwip_htons>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d005      	beq.n	800ce52 <tcp_zero_window_probe+0x72>
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	891b      	ldrh	r3, [r3, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <tcp_zero_window_probe+0x72>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e000      	b.n	800ce54 <tcp_zero_window_probe+0x74>
 800ce52:	2300      	movs	r3, #0
 800ce54:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ce56:	7ffb      	ldrb	r3, [r7, #31]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bf0c      	ite	eq
 800ce5c:	2301      	moveq	r3, #1
 800ce5e:	2300      	movne	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ce64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce68:	b299      	uxth	r1, r3
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	8bba      	ldrh	r2, [r7, #28]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff fdf8 	bl	800ca68 <tcp_output_alloc_header>
 800ce78:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d102      	bne.n	800ce86 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ce80:	f04f 33ff 	mov.w	r3, #4294967295
 800ce84:	e04c      	b.n	800cf20 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ce8c:	7ffb      	ldrb	r3, [r7, #31]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d011      	beq.n	800ceb6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	899b      	ldrh	r3, [r3, #12]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	b21b      	sxth	r3, r3
 800ce9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ce9e:	b21c      	sxth	r4, r3
 800cea0:	2011      	movs	r0, #17
 800cea2:	f7f8 fabd 	bl	8005420 <lwip_htons>
 800cea6:	4603      	mov	r3, r0
 800cea8:	b21b      	sxth	r3, r3
 800ceaa:	4323      	orrs	r3, r4
 800ceac:	b21b      	sxth	r3, r3
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	819a      	strh	r2, [r3, #12]
 800ceb4:	e010      	b.n	800ced8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	3314      	adds	r3, #20
 800cebc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	6858      	ldr	r0, [r3, #4]
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	891a      	ldrh	r2, [r3, #8]
 800cec8:	6a3b      	ldr	r3, [r7, #32]
 800ceca:	891b      	ldrh	r3, [r3, #8]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	b29b      	uxth	r3, r3
 800ced0:	2201      	movs	r2, #1
 800ced2:	6939      	ldr	r1, [r7, #16]
 800ced4:	f7f9 ff5a 	bl	8006d8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f8 fab3 	bl	800544a <lwip_htonl>
 800cee4:	4603      	mov	r3, r0
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da02      	bge.n	800cefc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf00:	2200      	movs	r2, #0
 800cf02:	69b9      	ldr	r1, [r7, #24]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff fded 	bl	800cae4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	69b9      	ldr	r1, [r7, #24]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fe26 	bl	800cb64 <tcp_output_control_segment>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cf1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	372c      	adds	r7, #44	; 0x2c
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd90      	pop	{r4, r7, pc}
 800cf28:	080147bc 	.word	0x080147bc
 800cf2c:	08014fb4 	.word	0x08014fb4
 800cf30:	08014810 	.word	0x08014810

0800cf34 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cf3c:	f7fa f814 	bl	8006f68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <tcpip_tcp_timer+0x38>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <tcpip_tcp_timer+0x1c>
 800cf48:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <tcpip_tcp_timer+0x3c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d005      	beq.n	800cf5c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf50:	2200      	movs	r2, #0
 800cf52:	4908      	ldr	r1, [pc, #32]	; (800cf74 <tcpip_tcp_timer+0x40>)
 800cf54:	20fa      	movs	r0, #250	; 0xfa
 800cf56:	f000 f8f3 	bl	800d140 <sys_timeout>
 800cf5a:	e003      	b.n	800cf64 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <tcpip_tcp_timer+0x44>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
  }
}
 800cf62:	bf00      	nop
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20006838 	.word	0x20006838
 800cf70:	2000683c 	.word	0x2000683c
 800cf74:	0800cf35 	.word	0x0800cf35
 800cf78:	20006884 	.word	0x20006884

0800cf7c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <tcp_timer_needed+0x30>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10f      	bne.n	800cfa8 <tcp_timer_needed+0x2c>
 800cf88:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <tcp_timer_needed+0x34>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d103      	bne.n	800cf98 <tcp_timer_needed+0x1c>
 800cf90:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <tcp_timer_needed+0x38>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d007      	beq.n	800cfa8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cf98:	4b04      	ldr	r3, [pc, #16]	; (800cfac <tcp_timer_needed+0x30>)
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	4905      	ldr	r1, [pc, #20]	; (800cfb8 <tcp_timer_needed+0x3c>)
 800cfa2:	20fa      	movs	r0, #250	; 0xfa
 800cfa4:	f000 f8cc 	bl	800d140 <sys_timeout>
  }
}
 800cfa8:	bf00      	nop
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	20006884 	.word	0x20006884
 800cfb0:	20006838 	.word	0x20006838
 800cfb4:	2000683c 	.word	0x2000683c
 800cfb8:	0800cf35 	.word	0x0800cf35

0800cfbc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cfc8:	2006      	movs	r0, #6
 800cfca:	f7f8 fe7f 	bl	8005ccc <memp_malloc>
 800cfce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d109      	bne.n	800cfea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d151      	bne.n	800d080 <sys_timeout_abs+0xc4>
 800cfdc:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <sys_timeout_abs+0xcc>)
 800cfde:	22be      	movs	r2, #190	; 0xbe
 800cfe0:	492a      	ldr	r1, [pc, #168]	; (800d08c <sys_timeout_abs+0xd0>)
 800cfe2:	482b      	ldr	r0, [pc, #172]	; (800d090 <sys_timeout_abs+0xd4>)
 800cfe4:	f004 ffea 	bl	8011fbc <iprintf>
    return;
 800cfe8:	e04a      	b.n	800d080 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d002:	4b24      	ldr	r3, [pc, #144]	; (800d094 <sys_timeout_abs+0xd8>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d103      	bne.n	800d012 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d00a:	4a22      	ldr	r2, [pc, #136]	; (800d094 <sys_timeout_abs+0xd8>)
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	6013      	str	r3, [r2, #0]
    return;
 800d010:	e037      	b.n	800d082 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	4b1f      	ldr	r3, [pc, #124]	; (800d094 <sys_timeout_abs+0xd8>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	0fdb      	lsrs	r3, r3, #31
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d007      	beq.n	800d03a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d02a:	4b1a      	ldr	r3, [pc, #104]	; (800d094 <sys_timeout_abs+0xd8>)
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d032:	4a18      	ldr	r2, [pc, #96]	; (800d094 <sys_timeout_abs+0xd8>)
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	e023      	b.n	800d082 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d03a:	4b16      	ldr	r3, [pc, #88]	; (800d094 <sys_timeout_abs+0xd8>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	e01a      	b.n	800d078 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00b      	beq.n	800d062 <sys_timeout_abs+0xa6>
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	0fdb      	lsrs	r3, r3, #31
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d007      	beq.n	800d072 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	601a      	str	r2, [r3, #0]
        break;
 800d070:	e007      	b.n	800d082 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1e1      	bne.n	800d042 <sys_timeout_abs+0x86>
 800d07e:	e000      	b.n	800d082 <sys_timeout_abs+0xc6>
    return;
 800d080:	bf00      	nop
      }
    }
  }
}
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	08014fd8 	.word	0x08014fd8
 800d08c:	0801500c 	.word	0x0801500c
 800d090:	0801504c 	.word	0x0801504c
 800d094:	2000687c 	.word	0x2000687c

0800d098 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	4798      	blx	r3

  now = sys_now();
 800d0aa:	f7f8 f92b 	bl	8005304 <sys_now>
 800d0ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <lwip_cyclic_timer+0x5c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	0fdb      	lsrs	r3, r3, #31
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d009      	beq.n	800d0e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4907      	ldr	r1, [pc, #28]	; (800d0f8 <lwip_cyclic_timer+0x60>)
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7ff ff6e 	bl	800cfbc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d0e0:	e004      	b.n	800d0ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	4904      	ldr	r1, [pc, #16]	; (800d0f8 <lwip_cyclic_timer+0x60>)
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7ff ff68 	bl	800cfbc <sys_timeout_abs>
}
 800d0ec:	bf00      	nop
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20006880 	.word	0x20006880
 800d0f8:	0800d099 	.word	0x0800d099

0800d0fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d102:	2301      	movs	r3, #1
 800d104:	607b      	str	r3, [r7, #4]
 800d106:	e00e      	b.n	800d126 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d108:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <sys_timeouts_init+0x3c>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4a08      	ldr	r2, [pc, #32]	; (800d138 <sys_timeouts_init+0x3c>)
 800d116:	4413      	add	r3, r2
 800d118:	461a      	mov	r2, r3
 800d11a:	4908      	ldr	r1, [pc, #32]	; (800d13c <sys_timeouts_init+0x40>)
 800d11c:	f000 f810 	bl	800d140 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3301      	adds	r3, #1
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b04      	cmp	r3, #4
 800d12a:	d9ed      	bls.n	800d108 <sys_timeouts_init+0xc>
  }
}
 800d12c:	bf00      	nop
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	08015f58 	.word	0x08015f58
 800d13c:	0800d099 	.word	0x0800d099

0800d140 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d152:	d306      	bcc.n	800d162 <sys_timeout+0x22>
 800d154:	4b0a      	ldr	r3, [pc, #40]	; (800d180 <sys_timeout+0x40>)
 800d156:	f240 1229 	movw	r2, #297	; 0x129
 800d15a:	490a      	ldr	r1, [pc, #40]	; (800d184 <sys_timeout+0x44>)
 800d15c:	480a      	ldr	r0, [pc, #40]	; (800d188 <sys_timeout+0x48>)
 800d15e:	f004 ff2d 	bl	8011fbc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d162:	f7f8 f8cf 	bl	8005304 <sys_now>
 800d166:	4602      	mov	r2, r0
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	4413      	add	r3, r2
 800d16c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	6978      	ldr	r0, [r7, #20]
 800d174:	f7ff ff22 	bl	800cfbc <sys_timeout_abs>
#endif
}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	08014fd8 	.word	0x08014fd8
 800d184:	08015074 	.word	0x08015074
 800d188:	0801504c 	.word	0x0801504c

0800d18c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d192:	f7f8 f8b7 	bl	8005304 <sys_now>
 800d196:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d198:	4b1a      	ldr	r3, [pc, #104]	; (800d204 <sys_check_timeouts+0x78>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <sys_check_timeouts+0x1a>
 800d1a2:	f7f9 f8bf 	bl	8006324 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d1a6:	4b18      	ldr	r3, [pc, #96]	; (800d208 <sys_check_timeouts+0x7c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d022      	beq.n	800d1f8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	0fdb      	lsrs	r3, r3, #31
 800d1bc:	f003 0301 	and.w	r3, r3, #1
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d11a      	bne.n	800d1fc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a0f      	ldr	r2, [pc, #60]	; (800d208 <sys_check_timeouts+0x7c>)
 800d1cc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	4a0b      	ldr	r2, [pc, #44]	; (800d20c <sys_check_timeouts+0x80>)
 800d1e0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	2006      	movs	r0, #6
 800d1e6:	f7f8 fdbd 	bl	8005d64 <memp_free>
    if (handler != NULL) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0d3      	beq.n	800d198 <sys_check_timeouts+0xc>
      handler(arg);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6838      	ldr	r0, [r7, #0]
 800d1f4:	4798      	blx	r3
  do {
 800d1f6:	e7cf      	b.n	800d198 <sys_check_timeouts+0xc>
      return;
 800d1f8:	bf00      	nop
 800d1fa:	e000      	b.n	800d1fe <sys_check_timeouts+0x72>
      return;
 800d1fc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	20006829 	.word	0x20006829
 800d208:	2000687c 	.word	0x2000687c
 800d20c:	20006880 	.word	0x20006880

0800d210 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d214:	f004 feea 	bl	8011fec <rand>
 800d218:	4603      	mov	r3, r0
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d220:	b29b      	uxth	r3, r3
 800d222:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d226:	b29a      	uxth	r2, r3
 800d228:	4b01      	ldr	r3, [pc, #4]	; (800d230 <udp_init+0x20>)
 800d22a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d22c:	bf00      	nop
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	20000010 	.word	0x20000010

0800d234 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d23e:	4b17      	ldr	r3, [pc, #92]	; (800d29c <udp_new_port+0x68>)
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	b291      	uxth	r1, r2
 800d246:	4a15      	ldr	r2, [pc, #84]	; (800d29c <udp_new_port+0x68>)
 800d248:	8011      	strh	r1, [r2, #0]
 800d24a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d24e:	4293      	cmp	r3, r2
 800d250:	d103      	bne.n	800d25a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d252:	4b12      	ldr	r3, [pc, #72]	; (800d29c <udp_new_port+0x68>)
 800d254:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d258:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d25a:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <udp_new_port+0x6c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	e011      	b.n	800d286 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	8a5a      	ldrh	r2, [r3, #18]
 800d266:	4b0d      	ldr	r3, [pc, #52]	; (800d29c <udp_new_port+0x68>)
 800d268:	881b      	ldrh	r3, [r3, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d108      	bne.n	800d280 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d26e:	88fb      	ldrh	r3, [r7, #6]
 800d270:	3301      	adds	r3, #1
 800d272:	80fb      	strh	r3, [r7, #6]
 800d274:	88fb      	ldrh	r3, [r7, #6]
 800d276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d27a:	d3e0      	bcc.n	800d23e <udp_new_port+0xa>
        return 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	e007      	b.n	800d290 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	603b      	str	r3, [r7, #0]
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1ea      	bne.n	800d262 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d28c:	4b03      	ldr	r3, [pc, #12]	; (800d29c <udp_new_port+0x68>)
 800d28e:	881b      	ldrh	r3, [r3, #0]
}
 800d290:	4618      	mov	r0, r3
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	20000010 	.word	0x20000010
 800d2a0:	20006888 	.word	0x20006888

0800d2a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <udp_input_local_match+0x20>
 800d2b8:	4b27      	ldr	r3, [pc, #156]	; (800d358 <udp_input_local_match+0xb4>)
 800d2ba:	2287      	movs	r2, #135	; 0x87
 800d2bc:	4927      	ldr	r1, [pc, #156]	; (800d35c <udp_input_local_match+0xb8>)
 800d2be:	4828      	ldr	r0, [pc, #160]	; (800d360 <udp_input_local_match+0xbc>)
 800d2c0:	f004 fe7c 	bl	8011fbc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <udp_input_local_match+0x32>
 800d2ca:	4b23      	ldr	r3, [pc, #140]	; (800d358 <udp_input_local_match+0xb4>)
 800d2cc:	2288      	movs	r2, #136	; 0x88
 800d2ce:	4925      	ldr	r1, [pc, #148]	; (800d364 <udp_input_local_match+0xc0>)
 800d2d0:	4823      	ldr	r0, [pc, #140]	; (800d360 <udp_input_local_match+0xbc>)
 800d2d2:	f004 fe73 	bl	8011fbc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	7a1b      	ldrb	r3, [r3, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00b      	beq.n	800d2f6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	7a1a      	ldrb	r2, [r3, #8]
 800d2e2:	4b21      	ldr	r3, [pc, #132]	; (800d368 <udp_input_local_match+0xc4>)
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d001      	beq.n	800d2f6 <udp_input_local_match+0x52>
    return 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e02b      	b.n	800d34e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d018      	beq.n	800d32e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d013      	beq.n	800d32a <udp_input_local_match+0x86>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00f      	beq.n	800d32a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d30a:	4b17      	ldr	r3, [pc, #92]	; (800d368 <udp_input_local_match+0xc4>)
 800d30c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d312:	d00a      	beq.n	800d32a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b13      	ldr	r3, [pc, #76]	; (800d368 <udp_input_local_match+0xc4>)
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	405a      	eors	r2, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3308      	adds	r3, #8
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d326:	2b00      	cmp	r3, #0
 800d328:	d110      	bne.n	800d34c <udp_input_local_match+0xa8>
          return 1;
 800d32a:	2301      	movs	r3, #1
 800d32c:	e00f      	b.n	800d34e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d009      	beq.n	800d348 <udp_input_local_match+0xa4>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <udp_input_local_match+0xa4>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	4b09      	ldr	r3, [pc, #36]	; (800d368 <udp_input_local_match+0xc4>)
 800d342:	695b      	ldr	r3, [r3, #20]
 800d344:	429a      	cmp	r2, r3
 800d346:	d101      	bne.n	800d34c <udp_input_local_match+0xa8>
        return 1;
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	080150c0 	.word	0x080150c0
 800d35c:	080150f0 	.word	0x080150f0
 800d360:	08015114 	.word	0x08015114
 800d364:	0801513c 	.word	0x0801513c
 800d368:	2000329c 	.word	0x2000329c

0800d36c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d36c:	b590      	push	{r4, r7, lr}
 800d36e:	b08d      	sub	sp, #52	; 0x34
 800d370:	af02      	add	r7, sp, #8
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d105      	bne.n	800d38c <udp_input+0x20>
 800d380:	4b7c      	ldr	r3, [pc, #496]	; (800d574 <udp_input+0x208>)
 800d382:	22cf      	movs	r2, #207	; 0xcf
 800d384:	497c      	ldr	r1, [pc, #496]	; (800d578 <udp_input+0x20c>)
 800d386:	487d      	ldr	r0, [pc, #500]	; (800d57c <udp_input+0x210>)
 800d388:	f004 fe18 	bl	8011fbc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <udp_input+0x32>
 800d392:	4b78      	ldr	r3, [pc, #480]	; (800d574 <udp_input+0x208>)
 800d394:	22d0      	movs	r2, #208	; 0xd0
 800d396:	497a      	ldr	r1, [pc, #488]	; (800d580 <udp_input+0x214>)
 800d398:	4878      	ldr	r0, [pc, #480]	; (800d57c <udp_input+0x210>)
 800d39a:	f004 fe0f 	bl	8011fbc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	895b      	ldrh	r3, [r3, #10]
 800d3a2:	2b07      	cmp	r3, #7
 800d3a4:	d803      	bhi.n	800d3ae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7f9 faf6 	bl	8006998 <pbuf_free>
    goto end;
 800d3ac:	e0de      	b.n	800d56c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d3b4:	4b73      	ldr	r3, [pc, #460]	; (800d584 <udp_input+0x218>)
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	4a72      	ldr	r2, [pc, #456]	; (800d584 <udp_input+0x218>)
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f003 fdcc 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f8 f826 	bl	8005420 <lwip_htons>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	885b      	ldrh	r3, [r3, #2]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f8 f81e 	bl	8005420 <lwip_htons>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3f4:	4b64      	ldr	r3, [pc, #400]	; (800d588 <udp_input+0x21c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3fa:	e054      	b.n	800d4a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	8a5b      	ldrh	r3, [r3, #18]
 800d400:	89fa      	ldrh	r2, [r7, #14]
 800d402:	429a      	cmp	r2, r3
 800d404:	d14a      	bne.n	800d49c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d406:	7cfb      	ldrb	r3, [r7, #19]
 800d408:	461a      	mov	r2, r3
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d40e:	f7ff ff49 	bl	800d2a4 <udp_input_local_match>
 800d412:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d414:	2b00      	cmp	r3, #0
 800d416:	d041      	beq.n	800d49c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	7c1b      	ldrb	r3, [r3, #16]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d11d      	bne.n	800d460 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d102      	bne.n	800d430 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	61fb      	str	r3, [r7, #28]
 800d42e:	e017      	b.n	800d460 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d430:	7cfb      	ldrb	r3, [r7, #19]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d014      	beq.n	800d460 <udp_input+0xf4>
 800d436:	4b53      	ldr	r3, [pc, #332]	; (800d584 <udp_input+0x218>)
 800d438:	695b      	ldr	r3, [r3, #20]
 800d43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43e:	d10f      	bne.n	800d460 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	3304      	adds	r3, #4
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d008      	beq.n	800d460 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	3304      	adds	r3, #4
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d101      	bne.n	800d460 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	8a9b      	ldrh	r3, [r3, #20]
 800d464:	8a3a      	ldrh	r2, [r7, #16]
 800d466:	429a      	cmp	r2, r3
 800d468:	d118      	bne.n	800d49c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d005      	beq.n	800d47e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	4b43      	ldr	r3, [pc, #268]	; (800d584 <udp_input+0x218>)
 800d478:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d10e      	bne.n	800d49c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d014      	beq.n	800d4ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d48c:	4b3e      	ldr	r3, [pc, #248]	; (800d588 <udp_input+0x21c>)
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d494:	4a3c      	ldr	r2, [pc, #240]	; (800d588 <udp_input+0x21c>)
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d49a:	e008      	b.n	800d4ae <udp_input+0x142>
      }
    }

    prev = pcb;
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1a7      	bne.n	800d3fc <udp_input+0x90>
 800d4ac:	e000      	b.n	800d4b0 <udp_input+0x144>
        break;
 800d4ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <udp_input+0x14e>
    pcb = uncon_pcb;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <udp_input+0x15a>
    for_us = 1;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	76fb      	strb	r3, [r7, #27]
 800d4c4:	e00a      	b.n	800d4dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	4b2d      	ldr	r3, [pc, #180]	; (800d584 <udp_input+0x218>)
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	bf0c      	ite	eq
 800d4d4:	2301      	moveq	r3, #1
 800d4d6:	2300      	movne	r3, #0
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d4dc:	7efb      	ldrb	r3, [r7, #27]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d041      	beq.n	800d566 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d4e2:	2108      	movs	r1, #8
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7f9 f9d1 	bl	800688c <pbuf_remove_header>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00a      	beq.n	800d506 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d4f0:	4b20      	ldr	r3, [pc, #128]	; (800d574 <udp_input+0x208>)
 800d4f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d4f6:	4925      	ldr	r1, [pc, #148]	; (800d58c <udp_input+0x220>)
 800d4f8:	4820      	ldr	r0, [pc, #128]	; (800d57c <udp_input+0x210>)
 800d4fa:	f004 fd5f 	bl	8011fbc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7f9 fa4a 	bl	8006998 <pbuf_free>
      goto end;
 800d504:	e032      	b.n	800d56c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d012      	beq.n	800d532 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00a      	beq.n	800d52a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	699c      	ldr	r4, [r3, #24]
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	69d8      	ldr	r0, [r3, #28]
 800d51c:	8a3b      	ldrh	r3, [r7, #16]
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4b1b      	ldr	r3, [pc, #108]	; (800d590 <udp_input+0x224>)
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d526:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d528:	e021      	b.n	800d56e <udp_input+0x202>
        pbuf_free(p);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7f9 fa34 	bl	8006998 <pbuf_free>
        goto end;
 800d530:	e01c      	b.n	800d56c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d532:	7cfb      	ldrb	r3, [r7, #19]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d112      	bne.n	800d55e <udp_input+0x1f2>
 800d538:	4b12      	ldr	r3, [pc, #72]	; (800d584 <udp_input+0x218>)
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d540:	2be0      	cmp	r3, #224	; 0xe0
 800d542:	d00c      	beq.n	800d55e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d544:	4b0f      	ldr	r3, [pc, #60]	; (800d584 <udp_input+0x218>)
 800d546:	899b      	ldrh	r3, [r3, #12]
 800d548:	3308      	adds	r3, #8
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	b21b      	sxth	r3, r3
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7f9 fa0e 	bl	8006972 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d556:	2103      	movs	r1, #3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f003 f9c1 	bl	80108e0 <icmp_dest_unreach>
      pbuf_free(p);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7f9 fa1a 	bl	8006998 <pbuf_free>
  return;
 800d564:	e003      	b.n	800d56e <udp_input+0x202>
    pbuf_free(p);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7f9 fa16 	bl	8006998 <pbuf_free>
  return;
 800d56c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d56e:	372c      	adds	r7, #44	; 0x2c
 800d570:	46bd      	mov	sp, r7
 800d572:	bd90      	pop	{r4, r7, pc}
 800d574:	080150c0 	.word	0x080150c0
 800d578:	08015164 	.word	0x08015164
 800d57c:	08015114 	.word	0x08015114
 800d580:	0801517c 	.word	0x0801517c
 800d584:	2000329c 	.word	0x2000329c
 800d588:	20006888 	.word	0x20006888
 800d58c:	08015198 	.word	0x08015198
 800d590:	200032ac 	.word	0x200032ac

0800d594 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d109      	bne.n	800d5bc <udp_sendto_if+0x28>
 800d5a8:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <udp_sendto_if+0xd0>)
 800d5aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5ae:	492e      	ldr	r1, [pc, #184]	; (800d668 <udp_sendto_if+0xd4>)
 800d5b0:	482e      	ldr	r0, [pc, #184]	; (800d66c <udp_sendto_if+0xd8>)
 800d5b2:	f004 fd03 	bl	8011fbc <iprintf>
 800d5b6:	f06f 030f 	mvn.w	r3, #15
 800d5ba:	e04f      	b.n	800d65c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d109      	bne.n	800d5d6 <udp_sendto_if+0x42>
 800d5c2:	4b28      	ldr	r3, [pc, #160]	; (800d664 <udp_sendto_if+0xd0>)
 800d5c4:	f240 2281 	movw	r2, #641	; 0x281
 800d5c8:	4929      	ldr	r1, [pc, #164]	; (800d670 <udp_sendto_if+0xdc>)
 800d5ca:	4828      	ldr	r0, [pc, #160]	; (800d66c <udp_sendto_if+0xd8>)
 800d5cc:	f004 fcf6 	bl	8011fbc <iprintf>
 800d5d0:	f06f 030f 	mvn.w	r3, #15
 800d5d4:	e042      	b.n	800d65c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d109      	bne.n	800d5f0 <udp_sendto_if+0x5c>
 800d5dc:	4b21      	ldr	r3, [pc, #132]	; (800d664 <udp_sendto_if+0xd0>)
 800d5de:	f240 2282 	movw	r2, #642	; 0x282
 800d5e2:	4924      	ldr	r1, [pc, #144]	; (800d674 <udp_sendto_if+0xe0>)
 800d5e4:	4821      	ldr	r0, [pc, #132]	; (800d66c <udp_sendto_if+0xd8>)
 800d5e6:	f004 fce9 	bl	8011fbc <iprintf>
 800d5ea:	f06f 030f 	mvn.w	r3, #15
 800d5ee:	e035      	b.n	800d65c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d109      	bne.n	800d60a <udp_sendto_if+0x76>
 800d5f6:	4b1b      	ldr	r3, [pc, #108]	; (800d664 <udp_sendto_if+0xd0>)
 800d5f8:	f240 2283 	movw	r2, #643	; 0x283
 800d5fc:	491e      	ldr	r1, [pc, #120]	; (800d678 <udp_sendto_if+0xe4>)
 800d5fe:	481b      	ldr	r0, [pc, #108]	; (800d66c <udp_sendto_if+0xd8>)
 800d600:	f004 fcdc 	bl	8011fbc <iprintf>
 800d604:	f06f 030f 	mvn.w	r3, #15
 800d608:	e028      	b.n	800d65c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <udp_sendto_if+0x90>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d005      	beq.n	800d624 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d620:	2be0      	cmp	r3, #224	; 0xe0
 800d622:	d103      	bne.n	800d62c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	3304      	adds	r3, #4
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	e00b      	b.n	800d644 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	3304      	adds	r3, #4
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d002      	beq.n	800d640 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d63a:	f06f 0303 	mvn.w	r3, #3
 800d63e:	e00d      	b.n	800d65c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d644:	887a      	ldrh	r2, [r7, #2]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	4613      	mov	r3, r2
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f811 	bl	800d67c <udp_sendto_if_src>
 800d65a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	080150c0 	.word	0x080150c0
 800d668:	08015234 	.word	0x08015234
 800d66c:	08015114 	.word	0x08015114
 800d670:	08015250 	.word	0x08015250
 800d674:	0801526c 	.word	0x0801526c
 800d678:	0801528c 	.word	0x0801528c

0800d67c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08c      	sub	sp, #48	; 0x30
 800d680:	af04      	add	r7, sp, #16
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d109      	bne.n	800d6a4 <udp_sendto_if_src+0x28>
 800d690:	4b65      	ldr	r3, [pc, #404]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d692:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d696:	4965      	ldr	r1, [pc, #404]	; (800d82c <udp_sendto_if_src+0x1b0>)
 800d698:	4865      	ldr	r0, [pc, #404]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d69a:	f004 fc8f 	bl	8011fbc <iprintf>
 800d69e:	f06f 030f 	mvn.w	r3, #15
 800d6a2:	e0bc      	b.n	800d81e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d109      	bne.n	800d6be <udp_sendto_if_src+0x42>
 800d6aa:	4b5f      	ldr	r3, [pc, #380]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d6ac:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d6b0:	4960      	ldr	r1, [pc, #384]	; (800d834 <udp_sendto_if_src+0x1b8>)
 800d6b2:	485f      	ldr	r0, [pc, #380]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d6b4:	f004 fc82 	bl	8011fbc <iprintf>
 800d6b8:	f06f 030f 	mvn.w	r3, #15
 800d6bc:	e0af      	b.n	800d81e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <udp_sendto_if_src+0x5c>
 800d6c4:	4b58      	ldr	r3, [pc, #352]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d6c6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d6ca:	495b      	ldr	r1, [pc, #364]	; (800d838 <udp_sendto_if_src+0x1bc>)
 800d6cc:	4858      	ldr	r0, [pc, #352]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d6ce:	f004 fc75 	bl	8011fbc <iprintf>
 800d6d2:	f06f 030f 	mvn.w	r3, #15
 800d6d6:	e0a2      	b.n	800d81e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d109      	bne.n	800d6f2 <udp_sendto_if_src+0x76>
 800d6de:	4b52      	ldr	r3, [pc, #328]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d6e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d6e4:	4955      	ldr	r1, [pc, #340]	; (800d83c <udp_sendto_if_src+0x1c0>)
 800d6e6:	4852      	ldr	r0, [pc, #328]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d6e8:	f004 fc68 	bl	8011fbc <iprintf>
 800d6ec:	f06f 030f 	mvn.w	r3, #15
 800d6f0:	e095      	b.n	800d81e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d109      	bne.n	800d70c <udp_sendto_if_src+0x90>
 800d6f8:	4b4b      	ldr	r3, [pc, #300]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d6fa:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d6fe:	4950      	ldr	r1, [pc, #320]	; (800d840 <udp_sendto_if_src+0x1c4>)
 800d700:	484b      	ldr	r0, [pc, #300]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d702:	f004 fc5b 	bl	8011fbc <iprintf>
 800d706:	f06f 030f 	mvn.w	r3, #15
 800d70a:	e088      	b.n	800d81e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8a5b      	ldrh	r3, [r3, #18]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10f      	bne.n	800d734 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d714:	68f9      	ldr	r1, [r7, #12]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8a5b      	ldrh	r3, [r3, #18]
 800d71a:	461a      	mov	r2, r3
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 f893 	bl	800d848 <udp_bind>
 800d722:	4603      	mov	r3, r0
 800d724:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d726:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d72e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d732:	e074      	b.n	800d81e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	891b      	ldrh	r3, [r3, #8]
 800d738:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d902      	bls.n	800d746 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d740:	f04f 33ff 	mov.w	r3, #4294967295
 800d744:	e06b      	b.n	800d81e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d746:	2108      	movs	r1, #8
 800d748:	68b8      	ldr	r0, [r7, #8]
 800d74a:	f7f9 f88f 	bl	800686c <pbuf_add_header>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d015      	beq.n	800d780 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d754:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d758:	2108      	movs	r1, #8
 800d75a:	2022      	movs	r0, #34	; 0x22
 800d75c:	f7f8 fe38 	bl	80063d0 <pbuf_alloc>
 800d760:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d102      	bne.n	800d76e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d768:	f04f 33ff 	mov.w	r3, #4294967295
 800d76c:	e057      	b.n	800d81e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	891b      	ldrh	r3, [r3, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d006      	beq.n	800d784 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	69f8      	ldr	r0, [r7, #28]
 800d77a:	f7f9 fa25 	bl	8006bc8 <pbuf_chain>
 800d77e:	e001      	b.n	800d784 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	895b      	ldrh	r3, [r3, #10]
 800d788:	2b07      	cmp	r3, #7
 800d78a:	d806      	bhi.n	800d79a <udp_sendto_if_src+0x11e>
 800d78c:	4b26      	ldr	r3, [pc, #152]	; (800d828 <udp_sendto_if_src+0x1ac>)
 800d78e:	f240 320d 	movw	r2, #781	; 0x30d
 800d792:	492c      	ldr	r1, [pc, #176]	; (800d844 <udp_sendto_if_src+0x1c8>)
 800d794:	4826      	ldr	r0, [pc, #152]	; (800d830 <udp_sendto_if_src+0x1b4>)
 800d796:	f004 fc11 	bl	8011fbc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	8a5b      	ldrh	r3, [r3, #18]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7f7 fe3b 	bl	8005420 <lwip_htons>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d7b2:	887b      	ldrh	r3, [r7, #2]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7f7 fe33 	bl	8005420 <lwip_htons>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	461a      	mov	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	719a      	strb	r2, [r3, #6]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	891b      	ldrh	r3, [r3, #8]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7f7 fe25 	bl	8005420 <lwip_htons>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	461a      	mov	r2, r3
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d7de:	2311      	movs	r3, #17
 800d7e0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	7adb      	ldrb	r3, [r3, #11]
 800d7e6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	7a9b      	ldrb	r3, [r3, #10]
 800d7ec:	7cb9      	ldrb	r1, [r7, #18]
 800d7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f0:	9202      	str	r2, [sp, #8]
 800d7f2:	7cfa      	ldrb	r2, [r7, #19]
 800d7f4:	9201      	str	r2, [sp, #4]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7fe:	69f8      	ldr	r0, [r7, #28]
 800d800:	f003 fafe 	bl	8010e00 <ip4_output_if_src>
 800d804:	4603      	mov	r3, r0
 800d806:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d808:	69fa      	ldr	r2, [r7, #28]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d004      	beq.n	800d81a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d810:	69f8      	ldr	r0, [r7, #28]
 800d812:	f7f9 f8c1 	bl	8006998 <pbuf_free>
    q = NULL;
 800d816:	2300      	movs	r3, #0
 800d818:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d81a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	080150c0 	.word	0x080150c0
 800d82c:	080152ac 	.word	0x080152ac
 800d830:	08015114 	.word	0x08015114
 800d834:	080152cc 	.word	0x080152cc
 800d838:	080152ec 	.word	0x080152ec
 800d83c:	08015310 	.word	0x08015310
 800d840:	08015334 	.word	0x08015334
 800d844:	08015358 	.word	0x08015358

0800d848 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d85c:	4b39      	ldr	r3, [pc, #228]	; (800d944 <udp_bind+0xfc>)
 800d85e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <udp_bind+0x32>
 800d866:	4b38      	ldr	r3, [pc, #224]	; (800d948 <udp_bind+0x100>)
 800d868:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d86c:	4937      	ldr	r1, [pc, #220]	; (800d94c <udp_bind+0x104>)
 800d86e:	4838      	ldr	r0, [pc, #224]	; (800d950 <udp_bind+0x108>)
 800d870:	f004 fba4 	bl	8011fbc <iprintf>
 800d874:	f06f 030f 	mvn.w	r3, #15
 800d878:	e060      	b.n	800d93c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d87a:	2300      	movs	r3, #0
 800d87c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d87e:	4b35      	ldr	r3, [pc, #212]	; (800d954 <udp_bind+0x10c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e009      	b.n	800d89a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d102      	bne.n	800d894 <udp_bind+0x4c>
      rebind = 1;
 800d88e:	2301      	movs	r3, #1
 800d890:	74fb      	strb	r3, [r7, #19]
      break;
 800d892:	e005      	b.n	800d8a0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1f2      	bne.n	800d886 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d8a0:	88fb      	ldrh	r3, [r7, #6]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d109      	bne.n	800d8ba <udp_bind+0x72>
    port = udp_new_port();
 800d8a6:	f7ff fcc5 	bl	800d234 <udp_new_port>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d8ae:	88fb      	ldrh	r3, [r7, #6]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d12c      	bne.n	800d90e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d8b4:	f06f 0307 	mvn.w	r3, #7
 800d8b8:	e040      	b.n	800d93c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8ba:	4b26      	ldr	r3, [pc, #152]	; (800d954 <udp_bind+0x10c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	617b      	str	r3, [r7, #20]
 800d8c0:	e022      	b.n	800d908 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d01b      	beq.n	800d902 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	8a5b      	ldrh	r3, [r3, #18]
 800d8ce:	88fa      	ldrh	r2, [r7, #6]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d116      	bne.n	800d902 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d00d      	beq.n	800d8fc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <udp_bind+0xb4>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d006      	beq.n	800d8fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d8ee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d8fc:	f06f 0307 	mvn.w	r3, #7
 800d900:	e01c      	b.n	800d93c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1d9      	bne.n	800d8c2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <udp_bind+0xd2>
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	e000      	b.n	800d91c <udp_bind+0xd4>
 800d91a:	2300      	movs	r3, #0
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	88fa      	ldrh	r2, [r7, #6]
 800d924:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d926:	7cfb      	ldrb	r3, [r7, #19]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d92c:	4b09      	ldr	r3, [pc, #36]	; (800d954 <udp_bind+0x10c>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d934:	4a07      	ldr	r2, [pc, #28]	; (800d954 <udp_bind+0x10c>)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	08015f80 	.word	0x08015f80
 800d948:	080150c0 	.word	0x080150c0
 800d94c:	08015388 	.word	0x08015388
 800d950:	08015114 	.word	0x08015114
 800d954:	20006888 	.word	0x20006888

0800d958 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d109      	bne.n	800d980 <udp_connect+0x28>
 800d96c:	4b2c      	ldr	r3, [pc, #176]	; (800da20 <udp_connect+0xc8>)
 800d96e:	f240 4235 	movw	r2, #1077	; 0x435
 800d972:	492c      	ldr	r1, [pc, #176]	; (800da24 <udp_connect+0xcc>)
 800d974:	482c      	ldr	r0, [pc, #176]	; (800da28 <udp_connect+0xd0>)
 800d976:	f004 fb21 	bl	8011fbc <iprintf>
 800d97a:	f06f 030f 	mvn.w	r3, #15
 800d97e:	e04b      	b.n	800da18 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d109      	bne.n	800d99a <udp_connect+0x42>
 800d986:	4b26      	ldr	r3, [pc, #152]	; (800da20 <udp_connect+0xc8>)
 800d988:	f240 4236 	movw	r2, #1078	; 0x436
 800d98c:	4927      	ldr	r1, [pc, #156]	; (800da2c <udp_connect+0xd4>)
 800d98e:	4826      	ldr	r0, [pc, #152]	; (800da28 <udp_connect+0xd0>)
 800d990:	f004 fb14 	bl	8011fbc <iprintf>
 800d994:	f06f 030f 	mvn.w	r3, #15
 800d998:	e03e      	b.n	800da18 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	8a5b      	ldrh	r3, [r3, #18]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10f      	bne.n	800d9c2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9a2:	68f9      	ldr	r1, [r7, #12]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	8a5b      	ldrh	r3, [r3, #18]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7ff ff4c 	bl	800d848 <udp_bind>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d9b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <udp_connect+0x6a>
      return err;
 800d9bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9c0:	e02a      	b.n	800da18 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <udp_connect+0x76>
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	e000      	b.n	800d9d0 <udp_connect+0x78>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	88fa      	ldrh	r2, [r7, #6]
 800d9d8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	7c1b      	ldrb	r3, [r3, #16]
 800d9de:	f043 0304 	orr.w	r3, r3, #4
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9e8:	4b11      	ldr	r3, [pc, #68]	; (800da30 <udp_connect+0xd8>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	617b      	str	r3, [r7, #20]
 800d9ee:	e008      	b.n	800da02 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d101      	bne.n	800d9fc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e00d      	b.n	800da18 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	617b      	str	r3, [r7, #20]
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1f3      	bne.n	800d9f0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800da08:	4b09      	ldr	r3, [pc, #36]	; (800da30 <udp_connect+0xd8>)
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800da10:	4a07      	ldr	r2, [pc, #28]	; (800da30 <udp_connect+0xd8>)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3718      	adds	r7, #24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	080150c0 	.word	0x080150c0
 800da24:	080153a0 	.word	0x080153a0
 800da28:	08015114 	.word	0x08015114
 800da2c:	080153bc 	.word	0x080153bc
 800da30:	20006888 	.word	0x20006888

0800da34 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d107      	bne.n	800da56 <udp_recv+0x22>
 800da46:	4b08      	ldr	r3, [pc, #32]	; (800da68 <udp_recv+0x34>)
 800da48:	f240 428a 	movw	r2, #1162	; 0x48a
 800da4c:	4907      	ldr	r1, [pc, #28]	; (800da6c <udp_recv+0x38>)
 800da4e:	4808      	ldr	r0, [pc, #32]	; (800da70 <udp_recv+0x3c>)
 800da50:	f004 fab4 	bl	8011fbc <iprintf>
 800da54:	e005      	b.n	800da62 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	61da      	str	r2, [r3, #28]
}
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	080150c0 	.word	0x080150c0
 800da6c:	080153f4 	.word	0x080153f4
 800da70:	08015114 	.word	0x08015114

0800da74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d107      	bne.n	800da92 <udp_remove+0x1e>
 800da82:	4b19      	ldr	r3, [pc, #100]	; (800dae8 <udp_remove+0x74>)
 800da84:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800da88:	4918      	ldr	r1, [pc, #96]	; (800daec <udp_remove+0x78>)
 800da8a:	4819      	ldr	r0, [pc, #100]	; (800daf0 <udp_remove+0x7c>)
 800da8c:	f004 fa96 	bl	8011fbc <iprintf>
 800da90:	e026      	b.n	800dae0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da92:	4b18      	ldr	r3, [pc, #96]	; (800daf4 <udp_remove+0x80>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d105      	bne.n	800daa8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da9c:	4b15      	ldr	r3, [pc, #84]	; (800daf4 <udp_remove+0x80>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	4a14      	ldr	r2, [pc, #80]	; (800daf4 <udp_remove+0x80>)
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	e017      	b.n	800dad8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800daa8:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <udp_remove+0x80>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e010      	b.n	800dad2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d009      	beq.n	800dacc <udp_remove+0x58>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d104      	bne.n	800dacc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	60da      	str	r2, [r3, #12]
        break;
 800daca:	e005      	b.n	800dad8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1eb      	bne.n	800dab0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	2000      	movs	r0, #0
 800dadc:	f7f8 f942 	bl	8005d64 <memp_free>
}
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	080150c0 	.word	0x080150c0
 800daec:	0801540c 	.word	0x0801540c
 800daf0:	08015114 	.word	0x08015114
 800daf4:	20006888 	.word	0x20006888

0800daf8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dafe:	2000      	movs	r0, #0
 800db00:	f7f8 f8e4 	bl	8005ccc <memp_malloc>
 800db04:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d007      	beq.n	800db1c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800db0c:	2220      	movs	r2, #32
 800db0e:	2100      	movs	r1, #0
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f004 fa4b 	bl	8011fac <memset>
    pcb->ttl = UDP_TTL;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	22ff      	movs	r2, #255	; 0xff
 800db1a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800db1c:	687b      	ldr	r3, [r7, #4]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d01e      	beq.n	800db76 <udp_netif_ip_addr_changed+0x4e>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01a      	beq.n	800db76 <udp_netif_ip_addr_changed+0x4e>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d017      	beq.n	800db76 <udp_netif_ip_addr_changed+0x4e>
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d013      	beq.n	800db76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db4e:	4b0d      	ldr	r3, [pc, #52]	; (800db84 <udp_netif_ip_addr_changed+0x5c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	e00c      	b.n	800db70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d103      	bne.n	800db6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1ef      	bne.n	800db56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800db76:	bf00      	nop
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	20006888 	.word	0x20006888

0800db88 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800db8c:	4b20      	ldr	r3, [pc, #128]	; (800dc10 <dhcp_inc_pcb_refcount+0x88>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d133      	bne.n	800dbfc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800db94:	4b1f      	ldr	r3, [pc, #124]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <dhcp_inc_pcb_refcount+0x20>
 800db9c:	4b1e      	ldr	r3, [pc, #120]	; (800dc18 <dhcp_inc_pcb_refcount+0x90>)
 800db9e:	22e5      	movs	r2, #229	; 0xe5
 800dba0:	491e      	ldr	r1, [pc, #120]	; (800dc1c <dhcp_inc_pcb_refcount+0x94>)
 800dba2:	481f      	ldr	r0, [pc, #124]	; (800dc20 <dhcp_inc_pcb_refcount+0x98>)
 800dba4:	f004 fa0a 	bl	8011fbc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800dba8:	f7ff ffa6 	bl	800daf8 <udp_new>
 800dbac:	4603      	mov	r3, r0
 800dbae:	4a19      	ldr	r2, [pc, #100]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbb0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800dbb2:	4b18      	ldr	r3, [pc, #96]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d102      	bne.n	800dbc0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800dbba:	f04f 33ff 	mov.w	r3, #4294967295
 800dbbe:	e024      	b.n	800dc0a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800dbc0:	4b14      	ldr	r3, [pc, #80]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	7a5a      	ldrb	r2, [r3, #9]
 800dbc6:	4b13      	ldr	r3, [pc, #76]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0220 	orr.w	r2, r2, #32
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800dbd2:	4b10      	ldr	r3, [pc, #64]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2244      	movs	r2, #68	; 0x44
 800dbd8:	4912      	ldr	r1, [pc, #72]	; (800dc24 <dhcp_inc_pcb_refcount+0x9c>)
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fe34 	bl	800d848 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800dbe0:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2243      	movs	r2, #67	; 0x43
 800dbe6:	490f      	ldr	r1, [pc, #60]	; (800dc24 <dhcp_inc_pcb_refcount+0x9c>)
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7ff feb5 	bl	800d958 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <dhcp_inc_pcb_refcount+0x8c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	490c      	ldr	r1, [pc, #48]	; (800dc28 <dhcp_inc_pcb_refcount+0xa0>)
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7ff ff1c 	bl	800da34 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800dbfc:	4b04      	ldr	r3, [pc, #16]	; (800dc10 <dhcp_inc_pcb_refcount+0x88>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	4b02      	ldr	r3, [pc, #8]	; (800dc10 <dhcp_inc_pcb_refcount+0x88>)
 800dc06:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	200068b8 	.word	0x200068b8
 800dc14:	200068b4 	.word	0x200068b4
 800dc18:	08015424 	.word	0x08015424
 800dc1c:	0801545c 	.word	0x0801545c
 800dc20:	08015484 	.word	0x08015484
 800dc24:	08015f80 	.word	0x08015f80
 800dc28:	0800f449 	.word	0x0800f449

0800dc2c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800dc30:	4b0e      	ldr	r3, [pc, #56]	; (800dc6c <dhcp_dec_pcb_refcount+0x40>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d105      	bne.n	800dc44 <dhcp_dec_pcb_refcount+0x18>
 800dc38:	4b0d      	ldr	r3, [pc, #52]	; (800dc70 <dhcp_dec_pcb_refcount+0x44>)
 800dc3a:	22ff      	movs	r2, #255	; 0xff
 800dc3c:	490d      	ldr	r1, [pc, #52]	; (800dc74 <dhcp_dec_pcb_refcount+0x48>)
 800dc3e:	480e      	ldr	r0, [pc, #56]	; (800dc78 <dhcp_dec_pcb_refcount+0x4c>)
 800dc40:	f004 f9bc 	bl	8011fbc <iprintf>
  dhcp_pcb_refcount--;
 800dc44:	4b09      	ldr	r3, [pc, #36]	; (800dc6c <dhcp_dec_pcb_refcount+0x40>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <dhcp_dec_pcb_refcount+0x40>)
 800dc4e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800dc50:	4b06      	ldr	r3, [pc, #24]	; (800dc6c <dhcp_dec_pcb_refcount+0x40>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d107      	bne.n	800dc68 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800dc58:	4b08      	ldr	r3, [pc, #32]	; (800dc7c <dhcp_dec_pcb_refcount+0x50>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7ff ff09 	bl	800da74 <udp_remove>
    dhcp_pcb = NULL;
 800dc62:	4b06      	ldr	r3, [pc, #24]	; (800dc7c <dhcp_dec_pcb_refcount+0x50>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
  }
}
 800dc68:	bf00      	nop
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	200068b8 	.word	0x200068b8
 800dc70:	08015424 	.word	0x08015424
 800dc74:	080154ac 	.word	0x080154ac
 800dc78:	08015484 	.word	0x08015484
 800dc7c:	200068b4 	.word	0x200068b4

0800dc80 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800dc8e:	210c      	movs	r1, #12
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f001 f81b 	bl	800eccc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800dc96:	4b06      	ldr	r3, [pc, #24]	; (800dcb0 <dhcp_handle_nak+0x30>)
 800dc98:	4a05      	ldr	r2, [pc, #20]	; (800dcb0 <dhcp_handle_nak+0x30>)
 800dc9a:	4905      	ldr	r1, [pc, #20]	; (800dcb0 <dhcp_handle_nak+0x30>)
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7f8 fa03 	bl	80060a8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fc0e 	bl	800e4c4 <dhcp_discover>
}
 800dca8:	bf00      	nop
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	08015f80 	.word	0x08015f80

0800dcb4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800dcc2:	2108      	movs	r1, #8
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f001 f801 	bl	800eccc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	331c      	adds	r3, #28
 800dcce:	2200      	movs	r2, #0
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f002 fb02 	bl	80102dc <etharp_query>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	799b      	ldrb	r3, [r3, #6]
 800dce0:	2bff      	cmp	r3, #255	; 0xff
 800dce2:	d005      	beq.n	800dcf0 <dhcp_check+0x3c>
    dhcp->tries++;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	799b      	ldrb	r3, [r3, #6]
 800dce8:	3301      	adds	r3, #1
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800dcf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800dcf4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dcf6:	893b      	ldrh	r3, [r7, #8]
 800dcf8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dcfc:	4a06      	ldr	r2, [pc, #24]	; (800dd18 <dhcp_check+0x64>)
 800dcfe:	fb82 1203 	smull	r1, r2, r2, r3
 800dd02:	1152      	asrs	r2, r2, #5
 800dd04:	17db      	asrs	r3, r3, #31
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	10624dd3 	.word	0x10624dd3

0800dd1c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800dd2c:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <dhcp_handle_offer+0x44>)
 800dd2e:	789b      	ldrb	r3, [r3, #2]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d011      	beq.n	800dd58 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800dd3a:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <dhcp_handle_offer+0x48>)
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f7 fb83 	bl	800544a <lwip_htonl>
 800dd44:	4602      	mov	r2, r0
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	691a      	ldr	r2, [r3, #16]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f808 	bl	800dd68 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	200068ac 	.word	0x200068ac
 800dd64:	2000688c 	.word	0x2000688c

0800dd68 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800dd68:	b5b0      	push	{r4, r5, r7, lr}
 800dd6a:	b08a      	sub	sp, #40	; 0x28
 800dd6c:	af02      	add	r7, sp, #8
 800dd6e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <dhcp_select+0x22>
 800dd76:	4b71      	ldr	r3, [pc, #452]	; (800df3c <dhcp_select+0x1d4>)
 800dd78:	f240 1277 	movw	r2, #375	; 0x177
 800dd7c:	4970      	ldr	r1, [pc, #448]	; (800df40 <dhcp_select+0x1d8>)
 800dd7e:	4871      	ldr	r0, [pc, #452]	; (800df44 <dhcp_select+0x1dc>)
 800dd80:	f004 f91c 	bl	8011fbc <iprintf>
 800dd84:	f06f 030f 	mvn.w	r3, #15
 800dd88:	e0d3      	b.n	800df32 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d109      	bne.n	800ddaa <dhcp_select+0x42>
 800dd96:	4b69      	ldr	r3, [pc, #420]	; (800df3c <dhcp_select+0x1d4>)
 800dd98:	f240 1279 	movw	r2, #377	; 0x179
 800dd9c:	496a      	ldr	r1, [pc, #424]	; (800df48 <dhcp_select+0x1e0>)
 800dd9e:	4869      	ldr	r0, [pc, #420]	; (800df44 <dhcp_select+0x1dc>)
 800dda0:	f004 f90c 	bl	8011fbc <iprintf>
 800dda4:	f06f 0305 	mvn.w	r3, #5
 800dda8:	e0c3      	b.n	800df32 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ddaa:	2101      	movs	r1, #1
 800ddac:	69b8      	ldr	r0, [r7, #24]
 800ddae:	f000 ff8d 	bl	800eccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ddb2:	f107 030c 	add.w	r3, r7, #12
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	69b9      	ldr	r1, [r7, #24]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f001 fc12 	bl	800f5e4 <dhcp_create_msg>
 800ddc0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 8085 	beq.w	800ded4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ddd0:	89b8      	ldrh	r0, [r7, #12]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ddd8:	2302      	movs	r3, #2
 800ddda:	2239      	movs	r2, #57	; 0x39
 800dddc:	f000 ff90 	bl	800ed00 <dhcp_option>
 800dde0:	4603      	mov	r3, r0
 800dde2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800dde4:	89b8      	ldrh	r0, [r7, #12]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	f000 ffdf 	bl	800edb4 <dhcp_option_short>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ddfa:	89b8      	ldrh	r0, [r7, #12]
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de02:	2304      	movs	r3, #4
 800de04:	2232      	movs	r2, #50	; 0x32
 800de06:	f000 ff7b 	bl	800ed00 <dhcp_option>
 800de0a:	4603      	mov	r3, r0
 800de0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800de0e:	89bc      	ldrh	r4, [r7, #12]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7f7 fb15 	bl	800544a <lwip_htonl>
 800de20:	4603      	mov	r3, r0
 800de22:	461a      	mov	r2, r3
 800de24:	4629      	mov	r1, r5
 800de26:	4620      	mov	r0, r4
 800de28:	f000 fff6 	bl	800ee18 <dhcp_option_long>
 800de2c:	4603      	mov	r3, r0
 800de2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800de30:	89b8      	ldrh	r0, [r7, #12]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de38:	2304      	movs	r3, #4
 800de3a:	2236      	movs	r2, #54	; 0x36
 800de3c:	f000 ff60 	bl	800ed00 <dhcp_option>
 800de40:	4603      	mov	r3, r0
 800de42:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800de44:	89bc      	ldrh	r4, [r7, #12]
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	4618      	mov	r0, r3
 800de52:	f7f7 fafa 	bl	800544a <lwip_htonl>
 800de56:	4603      	mov	r3, r0
 800de58:	461a      	mov	r2, r3
 800de5a:	4629      	mov	r1, r5
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 ffdb 	bl	800ee18 <dhcp_option_long>
 800de62:	4603      	mov	r3, r0
 800de64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800de66:	89b8      	ldrh	r0, [r7, #12]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de6e:	2303      	movs	r3, #3
 800de70:	2237      	movs	r2, #55	; 0x37
 800de72:	f000 ff45 	bl	800ed00 <dhcp_option>
 800de76:	4603      	mov	r3, r0
 800de78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de7a:	2300      	movs	r3, #0
 800de7c:	77bb      	strb	r3, [r7, #30]
 800de7e:	e00e      	b.n	800de9e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800de80:	89b8      	ldrh	r0, [r7, #12]
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de88:	7fbb      	ldrb	r3, [r7, #30]
 800de8a:	4a30      	ldr	r2, [pc, #192]	; (800df4c <dhcp_select+0x1e4>)
 800de8c:	5cd3      	ldrb	r3, [r2, r3]
 800de8e:	461a      	mov	r2, r3
 800de90:	f000 ff6a 	bl	800ed68 <dhcp_option_byte>
 800de94:	4603      	mov	r3, r0
 800de96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de98:	7fbb      	ldrb	r3, [r7, #30]
 800de9a:	3301      	adds	r3, #1
 800de9c:	77bb      	strb	r3, [r7, #30]
 800de9e:	7fbb      	ldrb	r3, [r7, #30]
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d9ed      	bls.n	800de80 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dea4:	89b8      	ldrh	r0, [r7, #12]
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	33f0      	adds	r3, #240	; 0xf0
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	4619      	mov	r1, r3
 800deae:	f001 fc6f 	bl	800f790 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800deb2:	4b27      	ldr	r3, [pc, #156]	; (800df50 <dhcp_select+0x1e8>)
 800deb4:	6818      	ldr	r0, [r3, #0]
 800deb6:	4b27      	ldr	r3, [pc, #156]	; (800df54 <dhcp_select+0x1ec>)
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2343      	movs	r3, #67	; 0x43
 800dec0:	4a25      	ldr	r2, [pc, #148]	; (800df58 <dhcp_select+0x1f0>)
 800dec2:	6979      	ldr	r1, [r7, #20]
 800dec4:	f7ff fbda 	bl	800d67c <udp_sendto_if_src>
 800dec8:	4603      	mov	r3, r0
 800deca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800decc:	6978      	ldr	r0, [r7, #20]
 800dece:	f7f8 fd63 	bl	8006998 <pbuf_free>
 800ded2:	e001      	b.n	800ded8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ded4:	23ff      	movs	r3, #255	; 0xff
 800ded6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	799b      	ldrb	r3, [r3, #6]
 800dedc:	2bff      	cmp	r3, #255	; 0xff
 800dede:	d005      	beq.n	800deec <dhcp_select+0x184>
    dhcp->tries++;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	799b      	ldrb	r3, [r3, #6]
 800dee4:	3301      	adds	r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	799b      	ldrb	r3, [r3, #6]
 800def0:	2b05      	cmp	r3, #5
 800def2:	d80d      	bhi.n	800df10 <dhcp_select+0x1a8>
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	799b      	ldrb	r3, [r3, #6]
 800def8:	461a      	mov	r2, r3
 800defa:	2301      	movs	r3, #1
 800defc:	4093      	lsls	r3, r2
 800defe:	b29b      	uxth	r3, r3
 800df00:	461a      	mov	r2, r3
 800df02:	0152      	lsls	r2, r2, #5
 800df04:	1ad2      	subs	r2, r2, r3
 800df06:	0092      	lsls	r2, r2, #2
 800df08:	4413      	add	r3, r2
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	e001      	b.n	800df14 <dhcp_select+0x1ac>
 800df10:	f64e 2360 	movw	r3, #60000	; 0xea60
 800df14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800df16:	89fb      	ldrh	r3, [r7, #14]
 800df18:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800df1c:	4a0f      	ldr	r2, [pc, #60]	; (800df5c <dhcp_select+0x1f4>)
 800df1e:	fb82 1203 	smull	r1, r2, r2, r3
 800df22:	1152      	asrs	r2, r2, #5
 800df24:	17db      	asrs	r3, r3, #31
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	b29a      	uxth	r2, r3
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800df2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df32:	4618      	mov	r0, r3
 800df34:	3720      	adds	r7, #32
 800df36:	46bd      	mov	sp, r7
 800df38:	bdb0      	pop	{r4, r5, r7, pc}
 800df3a:	bf00      	nop
 800df3c:	08015424 	.word	0x08015424
 800df40:	080154d0 	.word	0x080154d0
 800df44:	08015484 	.word	0x08015484
 800df48:	080154ec 	.word	0x080154ec
 800df4c:	20000014 	.word	0x20000014
 800df50:	200068b4 	.word	0x200068b4
 800df54:	08015f80 	.word	0x08015f80
 800df58:	08015f84 	.word	0x08015f84
 800df5c:	10624dd3 	.word	0x10624dd3

0800df60 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800df66:	4b27      	ldr	r3, [pc, #156]	; (800e004 <dhcp_coarse_tmr+0xa4>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	607b      	str	r3, [r7, #4]
 800df6c:	e042      	b.n	800dff4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d039      	beq.n	800dfee <dhcp_coarse_tmr+0x8e>
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	795b      	ldrb	r3, [r3, #5]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d035      	beq.n	800dfee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	8a9b      	ldrh	r3, [r3, #20]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d012      	beq.n	800dfb0 <dhcp_coarse_tmr+0x50>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	8a5b      	ldrh	r3, [r3, #18]
 800df8e:	3301      	adds	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	825a      	strh	r2, [r3, #18]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	8a5a      	ldrh	r2, [r3, #18]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	8a9b      	ldrh	r3, [r3, #20]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d106      	bne.n	800dfb0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fdf8 	bl	800eb98 <dhcp_release_and_stop>
        dhcp_start(netif);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f96b 	bl	800e284 <dhcp_start>
 800dfae:	e01e      	b.n	800dfee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	8a1b      	ldrh	r3, [r3, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00b      	beq.n	800dfd0 <dhcp_coarse_tmr+0x70>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	8a1b      	ldrh	r3, [r3, #16]
 800dfbc:	1e5a      	subs	r2, r3, #1
 800dfbe:	b291      	uxth	r1, r2
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	8211      	strh	r1, [r2, #16]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d103      	bne.n	800dfd0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f8c7 	bl	800e15c <dhcp_t2_timeout>
 800dfce:	e00e      	b.n	800dfee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	89db      	ldrh	r3, [r3, #14]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00a      	beq.n	800dfee <dhcp_coarse_tmr+0x8e>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	89db      	ldrh	r3, [r3, #14]
 800dfdc:	1e5a      	subs	r2, r3, #1
 800dfde:	b291      	uxth	r1, r2
 800dfe0:	683a      	ldr	r2, [r7, #0]
 800dfe2:	81d1      	strh	r1, [r2, #14]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d102      	bne.n	800dfee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f888 	bl	800e0fe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	607b      	str	r3, [r7, #4]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1b9      	bne.n	800df6e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800dffa:	bf00      	nop
 800dffc:	bf00      	nop
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20006820 	.word	0x20006820

0800e008 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e00e:	4b16      	ldr	r3, [pc, #88]	; (800e068 <dhcp_fine_tmr+0x60>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	607b      	str	r3, [r7, #4]
 800e014:	e020      	b.n	800e058 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d017      	beq.n	800e052 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	891b      	ldrh	r3, [r3, #8]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d906      	bls.n	800e038 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	891b      	ldrh	r3, [r3, #8]
 800e02e:	3b01      	subs	r3, #1
 800e030:	b29a      	uxth	r2, r3
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	811a      	strh	r2, [r3, #8]
 800e036:	e00c      	b.n	800e052 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	891b      	ldrh	r3, [r3, #8]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d108      	bne.n	800e052 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	891b      	ldrh	r3, [r3, #8]
 800e044:	3b01      	subs	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f80d 	bl	800e06c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1db      	bne.n	800e016 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	20006820 	.word	0x20006820

0800e06c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	795b      	ldrb	r3, [r3, #5]
 800e07e:	2b0c      	cmp	r3, #12
 800e080:	d003      	beq.n	800e08a <dhcp_timeout+0x1e>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	795b      	ldrb	r3, [r3, #5]
 800e086:	2b06      	cmp	r3, #6
 800e088:	d103      	bne.n	800e092 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fa1a 	bl	800e4c4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e090:	e031      	b.n	800e0f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	795b      	ldrb	r3, [r3, #5]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d10e      	bne.n	800e0b8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	799b      	ldrb	r3, [r3, #6]
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d803      	bhi.n	800e0aa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff fe60 	bl	800dd68 <dhcp_select>
}
 800e0a8:	e025      	b.n	800e0f6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fd74 	bl	800eb98 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f8e7 	bl	800e284 <dhcp_start>
}
 800e0b6:	e01e      	b.n	800e0f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	795b      	ldrb	r3, [r3, #5]
 800e0bc:	2b08      	cmp	r3, #8
 800e0be:	d10b      	bne.n	800e0d8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	799b      	ldrb	r3, [r3, #6]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d803      	bhi.n	800e0d0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff fdf3 	bl	800dcb4 <dhcp_check>
}
 800e0ce:	e012      	b.n	800e0f6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fa99 	bl	800e608 <dhcp_bind>
}
 800e0d6:	e00e      	b.n	800e0f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	795b      	ldrb	r3, [r3, #5]
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d10a      	bne.n	800e0f6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	799b      	ldrb	r3, [r3, #6]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d803      	bhi.n	800e0f0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fc9f 	bl	800ea2c <dhcp_reboot>
}
 800e0ee:	e002      	b.n	800e0f6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f9e7 	bl	800e4c4 <dhcp_discover>
}
 800e0f6:	bf00      	nop
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	795b      	ldrb	r3, [r3, #5]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d007      	beq.n	800e124 <dhcp_t1_timeout+0x26>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	795b      	ldrb	r3, [r3, #5]
 800e118:	2b0a      	cmp	r3, #10
 800e11a:	d003      	beq.n	800e124 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e120:	2b05      	cmp	r3, #5
 800e122:	d117      	bne.n	800e154 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fb49 	bl	800e7bc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	899b      	ldrh	r3, [r3, #12]
 800e12e:	461a      	mov	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	8a5b      	ldrh	r3, [r3, #18]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	2b01      	cmp	r3, #1
 800e138:	dd0c      	ble.n	800e154 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	899b      	ldrh	r3, [r3, #12]
 800e13e:	461a      	mov	r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	8a5b      	ldrh	r3, [r3, #18]
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	da00      	bge.n	800e14c <dhcp_t1_timeout+0x4e>
 800e14a:	3301      	adds	r3, #1
 800e14c:	105b      	asrs	r3, r3, #1
 800e14e:	b29a      	uxth	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e154:	bf00      	nop
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	795b      	ldrb	r3, [r3, #5]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d00b      	beq.n	800e18a <dhcp_t2_timeout+0x2e>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	795b      	ldrb	r3, [r3, #5]
 800e176:	2b0a      	cmp	r3, #10
 800e178:	d007      	beq.n	800e18a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e17e:	2b05      	cmp	r3, #5
 800e180:	d003      	beq.n	800e18a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	795b      	ldrb	r3, [r3, #5]
 800e186:	2b04      	cmp	r3, #4
 800e188:	d117      	bne.n	800e1ba <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fbb2 	bl	800e8f4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	8a9b      	ldrh	r3, [r3, #20]
 800e194:	461a      	mov	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8a5b      	ldrh	r3, [r3, #18]
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	dd0c      	ble.n	800e1ba <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	8a9b      	ldrh	r3, [r3, #20]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	8a5b      	ldrh	r3, [r3, #18]
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	da00      	bge.n	800e1b2 <dhcp_t2_timeout+0x56>
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	105b      	asrs	r3, r3, #1
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e1ba:	bf00      	nop
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
	...

0800e1c4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e1e0:	4b26      	ldr	r3, [pc, #152]	; (800e27c <dhcp_handle_ack+0xb8>)
 800e1e2:	78db      	ldrb	r3, [r3, #3]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d003      	beq.n	800e1f0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e1e8:	4b25      	ldr	r3, [pc, #148]	; (800e280 <dhcp_handle_ack+0xbc>)
 800e1ea:	68da      	ldr	r2, [r3, #12]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e1f0:	4b22      	ldr	r3, [pc, #136]	; (800e27c <dhcp_handle_ack+0xb8>)
 800e1f2:	791b      	ldrb	r3, [r3, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d004      	beq.n	800e202 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e1f8:	4b21      	ldr	r3, [pc, #132]	; (800e280 <dhcp_handle_ack+0xbc>)
 800e1fa:	691a      	ldr	r2, [r3, #16]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	62da      	str	r2, [r3, #44]	; 0x2c
 800e200:	e004      	b.n	800e20c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e206:	085a      	lsrs	r2, r3, #1
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e20c:	4b1b      	ldr	r3, [pc, #108]	; (800e27c <dhcp_handle_ack+0xb8>)
 800e20e:	795b      	ldrb	r3, [r3, #5]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e214:	4b1a      	ldr	r3, [pc, #104]	; (800e280 <dhcp_handle_ack+0xbc>)
 800e216:	695a      	ldr	r2, [r3, #20]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	631a      	str	r2, [r3, #48]	; 0x30
 800e21c:	e007      	b.n	800e22e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e222:	4613      	mov	r3, r2
 800e224:	00db      	lsls	r3, r3, #3
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	08da      	lsrs	r2, r3, #3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	691a      	ldr	r2, [r3, #16]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e236:	4b11      	ldr	r3, [pc, #68]	; (800e27c <dhcp_handle_ack+0xb8>)
 800e238:	799b      	ldrb	r3, [r3, #6]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e23e:	4b10      	ldr	r3, [pc, #64]	; (800e280 <dhcp_handle_ack+0xbc>)
 800e240:	699b      	ldr	r3, [r3, #24]
 800e242:	4618      	mov	r0, r3
 800e244:	f7f7 f901 	bl	800544a <lwip_htonl>
 800e248:	4602      	mov	r2, r0
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2201      	movs	r2, #1
 800e252:	71da      	strb	r2, [r3, #7]
 800e254:	e002      	b.n	800e25c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e25c:	4b07      	ldr	r3, [pc, #28]	; (800e27c <dhcp_handle_ack+0xb8>)
 800e25e:	79db      	ldrb	r3, [r3, #7]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d007      	beq.n	800e274 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e264:	4b06      	ldr	r3, [pc, #24]	; (800e280 <dhcp_handle_ack+0xbc>)
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f7 f8ee 	bl	800544a <lwip_htonl>
 800e26e:	4602      	mov	r2, r0
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e274:	bf00      	nop
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	200068ac 	.word	0x200068ac
 800e280:	2000688c 	.word	0x2000688c

0800e284 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <dhcp_start+0x22>
 800e292:	4b37      	ldr	r3, [pc, #220]	; (800e370 <dhcp_start+0xec>)
 800e294:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e298:	4936      	ldr	r1, [pc, #216]	; (800e374 <dhcp_start+0xf0>)
 800e29a:	4837      	ldr	r0, [pc, #220]	; (800e378 <dhcp_start+0xf4>)
 800e29c:	f003 fe8e 	bl	8011fbc <iprintf>
 800e2a0:	f06f 030f 	mvn.w	r3, #15
 800e2a4:	e060      	b.n	800e368 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d109      	bne.n	800e2c8 <dhcp_start+0x44>
 800e2b4:	4b2e      	ldr	r3, [pc, #184]	; (800e370 <dhcp_start+0xec>)
 800e2b6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e2ba:	4930      	ldr	r1, [pc, #192]	; (800e37c <dhcp_start+0xf8>)
 800e2bc:	482e      	ldr	r0, [pc, #184]	; (800e378 <dhcp_start+0xf4>)
 800e2be:	f003 fe7d 	bl	8011fbc <iprintf>
 800e2c2:	f06f 030f 	mvn.w	r3, #15
 800e2c6:	e04f      	b.n	800e368 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2d2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e2d6:	d202      	bcs.n	800e2de <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2dc:	e044      	b.n	800e368 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10d      	bne.n	800e300 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e2e4:	2034      	movs	r0, #52	; 0x34
 800e2e6:	f7f7 fb83 	bl	80059f0 <mem_malloc>
 800e2ea:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d102      	bne.n	800e2f8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f6:	e037      	b.n	800e368 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	625a      	str	r2, [r3, #36]	; 0x24
 800e2fe:	e005      	b.n	800e30c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	791b      	ldrb	r3, [r3, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e308:	f7ff fc90 	bl	800dc2c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e30c:	2234      	movs	r2, #52	; 0x34
 800e30e:	2100      	movs	r1, #0
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f003 fe4b 	bl	8011fac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e316:	f7ff fc37 	bl	800db88 <dhcp_inc_pcb_refcount>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <dhcp_start+0xa2>
    return ERR_MEM;
 800e320:	f04f 33ff 	mov.w	r3, #4294967295
 800e324:	e020      	b.n	800e368 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2201      	movs	r2, #1
 800e32a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e332:	f003 0304 	and.w	r3, r3, #4
 800e336:	2b00      	cmp	r3, #0
 800e338:	d105      	bne.n	800e346 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800e33a:	2102      	movs	r1, #2
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 fcc5 	bl	800eccc <dhcp_set_state>
    return ERR_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	e010      	b.n	800e368 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f8bc 	bl	800e4c4 <dhcp_discover>
 800e34c:	4603      	mov	r3, r0
 800e34e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800e350:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d005      	beq.n	800e364 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fc1d 	bl	800eb98 <dhcp_release_and_stop>
    return ERR_MEM;
 800e35e:	f04f 33ff 	mov.w	r3, #4294967295
 800e362:	e001      	b.n	800e368 <dhcp_start+0xe4>
  }
  return result;
 800e364:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	08015424 	.word	0x08015424
 800e374:	08015508 	.word	0x08015508
 800e378:	08015484 	.word	0x08015484
 800e37c:	0801554c 	.word	0x0801554c

0800e380 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d107      	bne.n	800e3a0 <dhcp_arp_reply+0x20>
 800e390:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <dhcp_arp_reply+0x4c>)
 800e392:	f240 328b 	movw	r2, #907	; 0x38b
 800e396:	490e      	ldr	r1, [pc, #56]	; (800e3d0 <dhcp_arp_reply+0x50>)
 800e398:	480e      	ldr	r0, [pc, #56]	; (800e3d4 <dhcp_arp_reply+0x54>)
 800e39a:	f003 fe0f 	bl	8011fbc <iprintf>
 800e39e:	e012      	b.n	800e3c6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00c      	beq.n	800e3c6 <dhcp_arp_reply+0x46>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	795b      	ldrb	r3, [r3, #5]
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d108      	bne.n	800e3c6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d102      	bne.n	800e3c6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 f809 	bl	800e3d8 <dhcp_decline>
    }
  }
}
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	08015424 	.word	0x08015424
 800e3d0:	08015508 	.word	0x08015508
 800e3d4:	08015484 	.word	0x08015484

0800e3d8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800e3d8:	b5b0      	push	{r4, r5, r7, lr}
 800e3da:	b08a      	sub	sp, #40	; 0x28
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e3e6:	210c      	movs	r1, #12
 800e3e8:	69b8      	ldr	r0, [r7, #24]
 800e3ea:	f000 fc6f 	bl	800eccc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800e3ee:	f107 030c 	add.w	r3, r7, #12
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	69b9      	ldr	r1, [r7, #24]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 f8f4 	bl	800f5e4 <dhcp_create_msg>
 800e3fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d035      	beq.n	800e470 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e40a:	89b8      	ldrh	r0, [r7, #12]
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e412:	2304      	movs	r3, #4
 800e414:	2232      	movs	r2, #50	; 0x32
 800e416:	f000 fc73 	bl	800ed00 <dhcp_option>
 800e41a:	4603      	mov	r3, r0
 800e41c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e41e:	89bc      	ldrh	r4, [r7, #12]
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f7 f80d 	bl	800544a <lwip_htonl>
 800e430:	4603      	mov	r3, r0
 800e432:	461a      	mov	r2, r3
 800e434:	4629      	mov	r1, r5
 800e436:	4620      	mov	r0, r4
 800e438:	f000 fcee 	bl	800ee18 <dhcp_option_long>
 800e43c:	4603      	mov	r3, r0
 800e43e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e440:	89b8      	ldrh	r0, [r7, #12]
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	33f0      	adds	r3, #240	; 0xf0
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	4619      	mov	r1, r3
 800e44a:	f001 f9a1 	bl	800f790 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e44e:	4b19      	ldr	r3, [pc, #100]	; (800e4b4 <dhcp_decline+0xdc>)
 800e450:	6818      	ldr	r0, [r3, #0]
 800e452:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <dhcp_decline+0xe0>)
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	2343      	movs	r3, #67	; 0x43
 800e45c:	4a17      	ldr	r2, [pc, #92]	; (800e4bc <dhcp_decline+0xe4>)
 800e45e:	6979      	ldr	r1, [r7, #20]
 800e460:	f7ff f90c 	bl	800d67c <udp_sendto_if_src>
 800e464:	4603      	mov	r3, r0
 800e466:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e468:	6978      	ldr	r0, [r7, #20]
 800e46a:	f7f8 fa95 	bl	8006998 <pbuf_free>
 800e46e:	e001      	b.n	800e474 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e470:	23ff      	movs	r3, #255	; 0xff
 800e472:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	799b      	ldrb	r3, [r3, #6]
 800e478:	2bff      	cmp	r3, #255	; 0xff
 800e47a:	d005      	beq.n	800e488 <dhcp_decline+0xb0>
    dhcp->tries++;
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	799b      	ldrb	r3, [r3, #6]
 800e480:	3301      	adds	r3, #1
 800e482:	b2da      	uxtb	r2, r3
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800e488:	f242 7310 	movw	r3, #10000	; 0x2710
 800e48c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e48e:	89fb      	ldrh	r3, [r7, #14]
 800e490:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e494:	4a0a      	ldr	r2, [pc, #40]	; (800e4c0 <dhcp_decline+0xe8>)
 800e496:	fb82 1203 	smull	r1, r2, r2, r3
 800e49a:	1152      	asrs	r2, r2, #5
 800e49c:	17db      	asrs	r3, r3, #31
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e4a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3720      	adds	r7, #32
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	200068b4 	.word	0x200068b4
 800e4b8:	08015f80 	.word	0x08015f80
 800e4bc:	08015f84 	.word	0x08015f84
 800e4c0:	10624dd3 	.word	0x10624dd3

0800e4c4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b08a      	sub	sp, #40	; 0x28
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e4dc:	2106      	movs	r1, #6
 800e4de:	69b8      	ldr	r0, [r7, #24]
 800e4e0:	f000 fbf4 	bl	800eccc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e4e4:	f107 0308 	add.w	r3, r7, #8
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	69b9      	ldr	r1, [r7, #24]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f001 f879 	bl	800f5e4 <dhcp_create_msg>
 800e4f2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d04b      	beq.n	800e592 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e500:	8938      	ldrh	r0, [r7, #8]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e508:	2302      	movs	r3, #2
 800e50a:	2239      	movs	r2, #57	; 0x39
 800e50c:	f000 fbf8 	bl	800ed00 <dhcp_option>
 800e510:	4603      	mov	r3, r0
 800e512:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e514:	8938      	ldrh	r0, [r7, #8]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e520:	461a      	mov	r2, r3
 800e522:	f000 fc47 	bl	800edb4 <dhcp_option_short>
 800e526:	4603      	mov	r3, r0
 800e528:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e52a:	8938      	ldrh	r0, [r7, #8]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e532:	2303      	movs	r3, #3
 800e534:	2237      	movs	r2, #55	; 0x37
 800e536:	f000 fbe3 	bl	800ed00 <dhcp_option>
 800e53a:	4603      	mov	r3, r0
 800e53c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e53e:	2300      	movs	r3, #0
 800e540:	77fb      	strb	r3, [r7, #31]
 800e542:	e00e      	b.n	800e562 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e544:	8938      	ldrh	r0, [r7, #8]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e54c:	7ffb      	ldrb	r3, [r7, #31]
 800e54e:	4a29      	ldr	r2, [pc, #164]	; (800e5f4 <dhcp_discover+0x130>)
 800e550:	5cd3      	ldrb	r3, [r2, r3]
 800e552:	461a      	mov	r2, r3
 800e554:	f000 fc08 	bl	800ed68 <dhcp_option_byte>
 800e558:	4603      	mov	r3, r0
 800e55a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e55c:	7ffb      	ldrb	r3, [r7, #31]
 800e55e:	3301      	adds	r3, #1
 800e560:	77fb      	strb	r3, [r7, #31]
 800e562:	7ffb      	ldrb	r3, [r7, #31]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d9ed      	bls.n	800e544 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e568:	8938      	ldrh	r0, [r7, #8]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	33f0      	adds	r3, #240	; 0xf0
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	4619      	mov	r1, r3
 800e572:	f001 f90d 	bl	800f790 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e576:	4b20      	ldr	r3, [pc, #128]	; (800e5f8 <dhcp_discover+0x134>)
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	4b20      	ldr	r3, [pc, #128]	; (800e5fc <dhcp_discover+0x138>)
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	2343      	movs	r3, #67	; 0x43
 800e584:	4a1e      	ldr	r2, [pc, #120]	; (800e600 <dhcp_discover+0x13c>)
 800e586:	6939      	ldr	r1, [r7, #16]
 800e588:	f7ff f878 	bl	800d67c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800e58c:	6938      	ldr	r0, [r7, #16]
 800e58e:	f7f8 fa03 	bl	8006998 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	799b      	ldrb	r3, [r3, #6]
 800e596:	2bff      	cmp	r3, #255	; 0xff
 800e598:	d005      	beq.n	800e5a6 <dhcp_discover+0xe2>
    dhcp->tries++;
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	799b      	ldrb	r3, [r3, #6]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	799b      	ldrb	r3, [r3, #6]
 800e5aa:	2b05      	cmp	r3, #5
 800e5ac:	d80d      	bhi.n	800e5ca <dhcp_discover+0x106>
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	799b      	ldrb	r3, [r3, #6]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	4093      	lsls	r3, r2
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	0152      	lsls	r2, r2, #5
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	0092      	lsls	r2, r2, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	e001      	b.n	800e5ce <dhcp_discover+0x10a>
 800e5ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e5ce:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e5d0:	897b      	ldrh	r3, [r7, #10]
 800e5d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e5d6:	4a0b      	ldr	r2, [pc, #44]	; (800e604 <dhcp_discover+0x140>)
 800e5d8:	fb82 1203 	smull	r1, r2, r2, r3
 800e5dc:	1152      	asrs	r2, r2, #5
 800e5de:	17db      	asrs	r3, r3, #31
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3720      	adds	r7, #32
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20000014 	.word	0x20000014
 800e5f8:	200068b4 	.word	0x200068b4
 800e5fc:	08015f80 	.word	0x08015f80
 800e600:	08015f84 	.word	0x08015f84
 800e604:	10624dd3 	.word	0x10624dd3

0800e608 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d107      	bne.n	800e626 <dhcp_bind+0x1e>
 800e616:	4b64      	ldr	r3, [pc, #400]	; (800e7a8 <dhcp_bind+0x1a0>)
 800e618:	f240 4215 	movw	r2, #1045	; 0x415
 800e61c:	4963      	ldr	r1, [pc, #396]	; (800e7ac <dhcp_bind+0x1a4>)
 800e61e:	4864      	ldr	r0, [pc, #400]	; (800e7b0 <dhcp_bind+0x1a8>)
 800e620:	f003 fccc 	bl	8011fbc <iprintf>
 800e624:	e0bc      	b.n	800e7a0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d107      	bne.n	800e642 <dhcp_bind+0x3a>
 800e632:	4b5d      	ldr	r3, [pc, #372]	; (800e7a8 <dhcp_bind+0x1a0>)
 800e634:	f240 4217 	movw	r2, #1047	; 0x417
 800e638:	495e      	ldr	r1, [pc, #376]	; (800e7b4 <dhcp_bind+0x1ac>)
 800e63a:	485d      	ldr	r0, [pc, #372]	; (800e7b0 <dhcp_bind+0x1a8>)
 800e63c:	f003 fcbe 	bl	8011fbc <iprintf>
 800e640:	e0ae      	b.n	800e7a0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	2200      	movs	r2, #0
 800e646:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e650:	d019      	beq.n	800e686 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e656:	331e      	adds	r3, #30
 800e658:	4a57      	ldr	r2, [pc, #348]	; (800e7b8 <dhcp_bind+0x1b0>)
 800e65a:	fba2 2303 	umull	r2, r3, r2, r3
 800e65e:	095b      	lsrs	r3, r3, #5
 800e660:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e668:	d302      	bcc.n	800e670 <dhcp_bind+0x68>
      timeout = 0xffff;
 800e66a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e66e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	b29a      	uxth	r2, r3
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	8a9b      	ldrh	r3, [r3, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d102      	bne.n	800e686 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	2201      	movs	r2, #1
 800e684:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d01d      	beq.n	800e6cc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	331e      	adds	r3, #30
 800e696:	4a48      	ldr	r2, [pc, #288]	; (800e7b8 <dhcp_bind+0x1b0>)
 800e698:	fba2 2303 	umull	r2, r3, r2, r3
 800e69c:	095b      	lsrs	r3, r3, #5
 800e69e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a6:	d302      	bcc.n	800e6ae <dhcp_bind+0xa6>
      timeout = 0xffff;
 800e6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6ac:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	895b      	ldrh	r3, [r3, #10]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	895a      	ldrh	r2, [r3, #10]
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d4:	d01d      	beq.n	800e712 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6da:	331e      	adds	r3, #30
 800e6dc:	4a36      	ldr	r2, [pc, #216]	; (800e7b8 <dhcp_bind+0x1b0>)
 800e6de:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e2:	095b      	lsrs	r3, r3, #5
 800e6e4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6ec:	d302      	bcc.n	800e6f4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800e6ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6f2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	899b      	ldrh	r3, [r3, #12]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	2201      	movs	r2, #1
 800e708:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	899a      	ldrh	r2, [r3, #12]
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	895a      	ldrh	r2, [r3, #10]
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	899b      	ldrh	r3, [r3, #12]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d306      	bcc.n	800e72c <dhcp_bind+0x124>
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	899b      	ldrh	r3, [r3, #12]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	2200      	movs	r2, #0
 800e72a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	79db      	ldrb	r3, [r3, #7]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d003      	beq.n	800e73c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	613b      	str	r3, [r7, #16]
 800e73a:	e014      	b.n	800e766 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	331c      	adds	r3, #28
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800e744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	db02      	blt.n	800e752 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e74c:	23ff      	movs	r3, #255	; 0xff
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	e009      	b.n	800e766 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800e752:	7dfb      	ldrb	r3, [r7, #23]
 800e754:	2bbf      	cmp	r3, #191	; 0xbf
 800e756:	d903      	bls.n	800e760 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e758:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e75c:	613b      	str	r3, [r7, #16]
 800e75e:	e002      	b.n	800e766 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e764:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d108      	bne.n	800e784 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	69da      	ldr	r2, [r3, #28]
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	4013      	ands	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e782:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e784:	210a      	movs	r1, #10
 800e786:	69b8      	ldr	r0, [r7, #24]
 800e788:	f000 faa0 	bl	800eccc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	f103 011c 	add.w	r1, r3, #28
 800e792:	f107 030c 	add.w	r3, r7, #12
 800e796:	f107 0210 	add.w	r2, r7, #16
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7f7 fc84 	bl	80060a8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800e7a0:	3720      	adds	r7, #32
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	08015424 	.word	0x08015424
 800e7ac:	08015584 	.word	0x08015584
 800e7b0:	08015484 	.word	0x08015484
 800e7b4:	080155a0 	.word	0x080155a0
 800e7b8:	88888889 	.word	0x88888889

0800e7bc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08a      	sub	sp, #40	; 0x28
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e7ca:	2105      	movs	r1, #5
 800e7cc:	69b8      	ldr	r0, [r7, #24]
 800e7ce:	f000 fa7d 	bl	800eccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e7d2:	f107 030c 	add.w	r3, r7, #12
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	69b9      	ldr	r1, [r7, #24]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 ff02 	bl	800f5e4 <dhcp_create_msg>
 800e7e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d04e      	beq.n	800e886 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e7ee:	89b8      	ldrh	r0, [r7, #12]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	2239      	movs	r2, #57	; 0x39
 800e7fa:	f000 fa81 	bl	800ed00 <dhcp_option>
 800e7fe:	4603      	mov	r3, r0
 800e800:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e802:	89b8      	ldrh	r0, [r7, #12]
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e80e:	461a      	mov	r2, r3
 800e810:	f000 fad0 	bl	800edb4 <dhcp_option_short>
 800e814:	4603      	mov	r3, r0
 800e816:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e818:	89b8      	ldrh	r0, [r7, #12]
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e820:	2303      	movs	r3, #3
 800e822:	2237      	movs	r2, #55	; 0x37
 800e824:	f000 fa6c 	bl	800ed00 <dhcp_option>
 800e828:	4603      	mov	r3, r0
 800e82a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e82c:	2300      	movs	r3, #0
 800e82e:	77bb      	strb	r3, [r7, #30]
 800e830:	e00e      	b.n	800e850 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e832:	89b8      	ldrh	r0, [r7, #12]
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e83a:	7fbb      	ldrb	r3, [r7, #30]
 800e83c:	4a2a      	ldr	r2, [pc, #168]	; (800e8e8 <dhcp_renew+0x12c>)
 800e83e:	5cd3      	ldrb	r3, [r2, r3]
 800e840:	461a      	mov	r2, r3
 800e842:	f000 fa91 	bl	800ed68 <dhcp_option_byte>
 800e846:	4603      	mov	r3, r0
 800e848:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e84a:	7fbb      	ldrb	r3, [r7, #30]
 800e84c:	3301      	adds	r3, #1
 800e84e:	77bb      	strb	r3, [r7, #30]
 800e850:	7fbb      	ldrb	r3, [r7, #30]
 800e852:	2b02      	cmp	r3, #2
 800e854:	d9ed      	bls.n	800e832 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e856:	89b8      	ldrh	r0, [r7, #12]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	33f0      	adds	r3, #240	; 0xf0
 800e85c:	697a      	ldr	r2, [r7, #20]
 800e85e:	4619      	mov	r1, r3
 800e860:	f000 ff96 	bl	800f790 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e864:	4b21      	ldr	r3, [pc, #132]	; (800e8ec <dhcp_renew+0x130>)
 800e866:	6818      	ldr	r0, [r3, #0]
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	f103 0218 	add.w	r2, r3, #24
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	2343      	movs	r3, #67	; 0x43
 800e874:	6979      	ldr	r1, [r7, #20]
 800e876:	f7fe fe8d 	bl	800d594 <udp_sendto_if>
 800e87a:	4603      	mov	r3, r0
 800e87c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e87e:	6978      	ldr	r0, [r7, #20]
 800e880:	f7f8 f88a 	bl	8006998 <pbuf_free>
 800e884:	e001      	b.n	800e88a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e886:	23ff      	movs	r3, #255	; 0xff
 800e888:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	799b      	ldrb	r3, [r3, #6]
 800e88e:	2bff      	cmp	r3, #255	; 0xff
 800e890:	d005      	beq.n	800e89e <dhcp_renew+0xe2>
    dhcp->tries++;
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	799b      	ldrb	r3, [r3, #6]
 800e896:	3301      	adds	r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	799b      	ldrb	r3, [r3, #6]
 800e8a2:	2b09      	cmp	r3, #9
 800e8a4:	d80a      	bhi.n	800e8bc <dhcp_renew+0x100>
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	799b      	ldrb	r3, [r3, #6]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	0152      	lsls	r2, r2, #5
 800e8b0:	1ad2      	subs	r2, r2, r3
 800e8b2:	0092      	lsls	r2, r2, #2
 800e8b4:	4413      	add	r3, r2
 800e8b6:	011b      	lsls	r3, r3, #4
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	e001      	b.n	800e8c0 <dhcp_renew+0x104>
 800e8bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e8c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e8c2:	89fb      	ldrh	r3, [r7, #14]
 800e8c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e8c8:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <dhcp_renew+0x134>)
 800e8ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e8ce:	1152      	asrs	r2, r2, #5
 800e8d0:	17db      	asrs	r3, r3, #31
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e8da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3720      	adds	r7, #32
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000014 	.word	0x20000014
 800e8ec:	200068b4 	.word	0x200068b4
 800e8f0:	10624dd3 	.word	0x10624dd3

0800e8f4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08a      	sub	sp, #40	; 0x28
 800e8f8:	af02      	add	r7, sp, #8
 800e8fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e900:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e902:	2104      	movs	r1, #4
 800e904:	69b8      	ldr	r0, [r7, #24]
 800e906:	f000 f9e1 	bl	800eccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	2203      	movs	r2, #3
 800e910:	69b9      	ldr	r1, [r7, #24]
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 fe66 	bl	800f5e4 <dhcp_create_msg>
 800e918:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d04c      	beq.n	800e9ba <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e926:	89b8      	ldrh	r0, [r7, #12]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e92e:	2302      	movs	r3, #2
 800e930:	2239      	movs	r2, #57	; 0x39
 800e932:	f000 f9e5 	bl	800ed00 <dhcp_option>
 800e936:	4603      	mov	r3, r0
 800e938:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e93a:	89b8      	ldrh	r0, [r7, #12]
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e946:	461a      	mov	r2, r3
 800e948:	f000 fa34 	bl	800edb4 <dhcp_option_short>
 800e94c:	4603      	mov	r3, r0
 800e94e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e950:	89b8      	ldrh	r0, [r7, #12]
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e958:	2303      	movs	r3, #3
 800e95a:	2237      	movs	r2, #55	; 0x37
 800e95c:	f000 f9d0 	bl	800ed00 <dhcp_option>
 800e960:	4603      	mov	r3, r0
 800e962:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e964:	2300      	movs	r3, #0
 800e966:	77bb      	strb	r3, [r7, #30]
 800e968:	e00e      	b.n	800e988 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e96a:	89b8      	ldrh	r0, [r7, #12]
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e972:	7fbb      	ldrb	r3, [r7, #30]
 800e974:	4a29      	ldr	r2, [pc, #164]	; (800ea1c <dhcp_rebind+0x128>)
 800e976:	5cd3      	ldrb	r3, [r2, r3]
 800e978:	461a      	mov	r2, r3
 800e97a:	f000 f9f5 	bl	800ed68 <dhcp_option_byte>
 800e97e:	4603      	mov	r3, r0
 800e980:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e982:	7fbb      	ldrb	r3, [r7, #30]
 800e984:	3301      	adds	r3, #1
 800e986:	77bb      	strb	r3, [r7, #30]
 800e988:	7fbb      	ldrb	r3, [r7, #30]
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d9ed      	bls.n	800e96a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e98e:	89b8      	ldrh	r0, [r7, #12]
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	33f0      	adds	r3, #240	; 0xf0
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	4619      	mov	r1, r3
 800e998:	f000 fefa 	bl	800f790 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e99c:	4b20      	ldr	r3, [pc, #128]	; (800ea20 <dhcp_rebind+0x12c>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	2343      	movs	r3, #67	; 0x43
 800e9a6:	4a1f      	ldr	r2, [pc, #124]	; (800ea24 <dhcp_rebind+0x130>)
 800e9a8:	6979      	ldr	r1, [r7, #20]
 800e9aa:	f7fe fdf3 	bl	800d594 <udp_sendto_if>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e9b2:	6978      	ldr	r0, [r7, #20]
 800e9b4:	f7f7 fff0 	bl	8006998 <pbuf_free>
 800e9b8:	e001      	b.n	800e9be <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e9ba:	23ff      	movs	r3, #255	; 0xff
 800e9bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	799b      	ldrb	r3, [r3, #6]
 800e9c2:	2bff      	cmp	r3, #255	; 0xff
 800e9c4:	d005      	beq.n	800e9d2 <dhcp_rebind+0xde>
    dhcp->tries++;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	799b      	ldrb	r3, [r3, #6]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	799b      	ldrb	r3, [r3, #6]
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	d80a      	bhi.n	800e9f0 <dhcp_rebind+0xfc>
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	799b      	ldrb	r3, [r3, #6]
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	0152      	lsls	r2, r2, #5
 800e9e4:	1ad2      	subs	r2, r2, r3
 800e9e6:	0092      	lsls	r2, r2, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	e001      	b.n	800e9f4 <dhcp_rebind+0x100>
 800e9f0:	f242 7310 	movw	r3, #10000	; 0x2710
 800e9f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e9f6:	89fb      	ldrh	r3, [r7, #14]
 800e9f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e9fc:	4a0a      	ldr	r2, [pc, #40]	; (800ea28 <dhcp_rebind+0x134>)
 800e9fe:	fb82 1203 	smull	r1, r2, r2, r3
 800ea02:	1152      	asrs	r2, r2, #5
 800ea04:	17db      	asrs	r3, r3, #31
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ea0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3720      	adds	r7, #32
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20000014 	.word	0x20000014
 800ea20:	200068b4 	.word	0x200068b4
 800ea24:	08015f84 	.word	0x08015f84
 800ea28:	10624dd3 	.word	0x10624dd3

0800ea2c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800ea2c:	b5b0      	push	{r4, r5, r7, lr}
 800ea2e:	b08a      	sub	sp, #40	; 0x28
 800ea30:	af02      	add	r7, sp, #8
 800ea32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea38:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800ea3a:	2103      	movs	r1, #3
 800ea3c:	69b8      	ldr	r0, [r7, #24]
 800ea3e:	f000 f945 	bl	800eccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ea42:	f107 030c 	add.w	r3, r7, #12
 800ea46:	2203      	movs	r2, #3
 800ea48:	69b9      	ldr	r1, [r7, #24]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fdca 	bl	800f5e4 <dhcp_create_msg>
 800ea50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d066      	beq.n	800eb26 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ea5e:	89b8      	ldrh	r0, [r7, #12]
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea66:	2302      	movs	r3, #2
 800ea68:	2239      	movs	r2, #57	; 0x39
 800ea6a:	f000 f949 	bl	800ed00 <dhcp_option>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800ea72:	89b8      	ldrh	r0, [r7, #12]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	33f0      	adds	r3, #240	; 0xf0
 800ea78:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f000 f999 	bl	800edb4 <dhcp_option_short>
 800ea82:	4603      	mov	r3, r0
 800ea84:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ea86:	89b8      	ldrh	r0, [r7, #12]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea8e:	2304      	movs	r3, #4
 800ea90:	2232      	movs	r2, #50	; 0x32
 800ea92:	f000 f935 	bl	800ed00 <dhcp_option>
 800ea96:	4603      	mov	r3, r0
 800ea98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ea9a:	89bc      	ldrh	r4, [r7, #12]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f6 fccf 	bl	800544a <lwip_htonl>
 800eaac:	4603      	mov	r3, r0
 800eaae:	461a      	mov	r2, r3
 800eab0:	4629      	mov	r1, r5
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 f9b0 	bl	800ee18 <dhcp_option_long>
 800eab8:	4603      	mov	r3, r0
 800eaba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800eabc:	89b8      	ldrh	r0, [r7, #12]
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eac4:	2303      	movs	r3, #3
 800eac6:	2237      	movs	r2, #55	; 0x37
 800eac8:	f000 f91a 	bl	800ed00 <dhcp_option>
 800eacc:	4603      	mov	r3, r0
 800eace:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ead0:	2300      	movs	r3, #0
 800ead2:	77bb      	strb	r3, [r7, #30]
 800ead4:	e00e      	b.n	800eaf4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ead6:	89b8      	ldrh	r0, [r7, #12]
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eade:	7fbb      	ldrb	r3, [r7, #30]
 800eae0:	4a29      	ldr	r2, [pc, #164]	; (800eb88 <dhcp_reboot+0x15c>)
 800eae2:	5cd3      	ldrb	r3, [r2, r3]
 800eae4:	461a      	mov	r2, r3
 800eae6:	f000 f93f 	bl	800ed68 <dhcp_option_byte>
 800eaea:	4603      	mov	r3, r0
 800eaec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eaee:	7fbb      	ldrb	r3, [r7, #30]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	77bb      	strb	r3, [r7, #30]
 800eaf4:	7fbb      	ldrb	r3, [r7, #30]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d9ed      	bls.n	800ead6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eafa:	89b8      	ldrh	r0, [r7, #12]
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	33f0      	adds	r3, #240	; 0xf0
 800eb00:	697a      	ldr	r2, [r7, #20]
 800eb02:	4619      	mov	r1, r3
 800eb04:	f000 fe44 	bl	800f790 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800eb08:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <dhcp_reboot+0x160>)
 800eb0a:	6818      	ldr	r0, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	2343      	movs	r3, #67	; 0x43
 800eb12:	4a1f      	ldr	r2, [pc, #124]	; (800eb90 <dhcp_reboot+0x164>)
 800eb14:	6979      	ldr	r1, [r7, #20]
 800eb16:	f7fe fd3d 	bl	800d594 <udp_sendto_if>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800eb1e:	6978      	ldr	r0, [r7, #20]
 800eb20:	f7f7 ff3a 	bl	8006998 <pbuf_free>
 800eb24:	e001      	b.n	800eb2a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800eb26:	23ff      	movs	r3, #255	; 0xff
 800eb28:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	799b      	ldrb	r3, [r3, #6]
 800eb2e:	2bff      	cmp	r3, #255	; 0xff
 800eb30:	d005      	beq.n	800eb3e <dhcp_reboot+0x112>
    dhcp->tries++;
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	799b      	ldrb	r3, [r3, #6]
 800eb36:	3301      	adds	r3, #1
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	799b      	ldrb	r3, [r3, #6]
 800eb42:	2b09      	cmp	r3, #9
 800eb44:	d80a      	bhi.n	800eb5c <dhcp_reboot+0x130>
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	799b      	ldrb	r3, [r3, #6]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	0152      	lsls	r2, r2, #5
 800eb50:	1ad2      	subs	r2, r2, r3
 800eb52:	0092      	lsls	r2, r2, #2
 800eb54:	4413      	add	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	e001      	b.n	800eb60 <dhcp_reboot+0x134>
 800eb5c:	f242 7310 	movw	r3, #10000	; 0x2710
 800eb60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb62:	89fb      	ldrh	r3, [r7, #14]
 800eb64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb68:	4a0a      	ldr	r2, [pc, #40]	; (800eb94 <dhcp_reboot+0x168>)
 800eb6a:	fb82 1203 	smull	r1, r2, r2, r3
 800eb6e:	1152      	asrs	r2, r2, #5
 800eb70:	17db      	asrs	r3, r3, #31
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eb7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bdb0      	pop	{r4, r5, r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000014 	.word	0x20000014
 800eb8c:	200068b4 	.word	0x200068b4
 800eb90:	08015f84 	.word	0x08015f84
 800eb94:	10624dd3 	.word	0x10624dd3

0800eb98 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800eb98:	b5b0      	push	{r4, r5, r7, lr}
 800eb9a:	b08a      	sub	sp, #40	; 0x28
 800eb9c:	af02      	add	r7, sp, #8
 800eb9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f000 8084 	beq.w	800ecb6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	795b      	ldrb	r3, [r3, #5]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f000 8081 	beq.w	800ecba <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	631a      	str	r2, [r3, #48]	; 0x30
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	829a      	strh	r2, [r3, #20]
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	8a9a      	ldrh	r2, [r3, #20]
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	825a      	strh	r2, [r3, #18]
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	8a5a      	ldrh	r2, [r3, #18]
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	821a      	strh	r2, [r3, #16]
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	8a1a      	ldrh	r2, [r3, #16]
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 fdee 	bl	800f7ec <dhcp_supplied_address>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d03b      	beq.n	800ec8e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800ec16:	f107 030e 	add.w	r3, r7, #14
 800ec1a:	2207      	movs	r2, #7
 800ec1c:	69f9      	ldr	r1, [r7, #28]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fce0 	bl	800f5e4 <dhcp_create_msg>
 800ec24:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d030      	beq.n	800ec8e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ec32:	89f8      	ldrh	r0, [r7, #14]
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec3a:	2304      	movs	r3, #4
 800ec3c:	2236      	movs	r2, #54	; 0x36
 800ec3e:	f000 f85f 	bl	800ed00 <dhcp_option>
 800ec42:	4603      	mov	r3, r0
 800ec44:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800ec46:	89fc      	ldrh	r4, [r7, #14]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f6 fbfa 	bl	800544a <lwip_htonl>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f000 f8db 	bl	800ee18 <dhcp_option_long>
 800ec62:	4603      	mov	r3, r0
 800ec64:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec66:	89f8      	ldrh	r0, [r7, #14]
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	33f0      	adds	r3, #240	; 0xf0
 800ec6c:	69ba      	ldr	r2, [r7, #24]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	f000 fd8e 	bl	800f790 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ec74:	4b13      	ldr	r3, [pc, #76]	; (800ecc4 <dhcp_release_and_stop+0x12c>)
 800ec76:	6818      	ldr	r0, [r3, #0]
 800ec78:	f107 0210 	add.w	r2, r7, #16
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	2343      	movs	r3, #67	; 0x43
 800ec82:	69b9      	ldr	r1, [r7, #24]
 800ec84:	f7fe fc86 	bl	800d594 <udp_sendto_if>
      pbuf_free(p_out);
 800ec88:	69b8      	ldr	r0, [r7, #24]
 800ec8a:	f7f7 fe85 	bl	8006998 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ec8e:	4b0e      	ldr	r3, [pc, #56]	; (800ecc8 <dhcp_release_and_stop+0x130>)
 800ec90:	4a0d      	ldr	r2, [pc, #52]	; (800ecc8 <dhcp_release_and_stop+0x130>)
 800ec92:	490d      	ldr	r1, [pc, #52]	; (800ecc8 <dhcp_release_and_stop+0x130>)
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7f7 fa07 	bl	80060a8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	f000 f815 	bl	800eccc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	791b      	ldrb	r3, [r3, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d008      	beq.n	800ecbc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ecaa:	f7fe ffbf 	bl	800dc2c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	711a      	strb	r2, [r3, #4]
 800ecb4:	e002      	b.n	800ecbc <dhcp_release_and_stop+0x124>
    return;
 800ecb6:	bf00      	nop
 800ecb8:	e000      	b.n	800ecbc <dhcp_release_and_stop+0x124>
    return;
 800ecba:	bf00      	nop
  }
}
 800ecbc:	3720      	adds	r7, #32
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	200068b4 	.word	0x200068b4
 800ecc8:	08015f80 	.word	0x08015f80

0800eccc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	795b      	ldrb	r3, [r3, #5]
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d008      	beq.n	800ecf4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	78fa      	ldrb	r2, [r7, #3]
 800ece6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	811a      	strh	r2, [r3, #8]
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6039      	str	r1, [r7, #0]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	80fb      	strh	r3, [r7, #6]
 800ed10:	460b      	mov	r3, r1
 800ed12:	717b      	strb	r3, [r7, #5]
 800ed14:	4613      	mov	r3, r2
 800ed16:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ed18:	88fa      	ldrh	r2, [r7, #6]
 800ed1a:	793b      	ldrb	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	3302      	adds	r3, #2
 800ed20:	2b44      	cmp	r3, #68	; 0x44
 800ed22:	d906      	bls.n	800ed32 <dhcp_option+0x32>
 800ed24:	4b0d      	ldr	r3, [pc, #52]	; (800ed5c <dhcp_option+0x5c>)
 800ed26:	f240 529a 	movw	r2, #1434	; 0x59a
 800ed2a:	490d      	ldr	r1, [pc, #52]	; (800ed60 <dhcp_option+0x60>)
 800ed2c:	480d      	ldr	r0, [pc, #52]	; (800ed64 <dhcp_option+0x64>)
 800ed2e:	f003 f945 	bl	8011fbc <iprintf>
  options[options_out_len++] = option_type;
 800ed32:	88fb      	ldrh	r3, [r7, #6]
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	80fa      	strh	r2, [r7, #6]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	797a      	ldrb	r2, [r7, #5]
 800ed40:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800ed42:	88fb      	ldrh	r3, [r7, #6]
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	80fa      	strh	r2, [r7, #6]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	793a      	ldrb	r2, [r7, #4]
 800ed50:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ed52:	88fb      	ldrh	r3, [r7, #6]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	08015424 	.word	0x08015424
 800ed60:	080155b8 	.word	0x080155b8
 800ed64:	08015484 	.word	0x08015484

0800ed68 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	6039      	str	r1, [r7, #0]
 800ed72:	80fb      	strh	r3, [r7, #6]
 800ed74:	4613      	mov	r3, r2
 800ed76:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800ed78:	88fb      	ldrh	r3, [r7, #6]
 800ed7a:	2b43      	cmp	r3, #67	; 0x43
 800ed7c:	d906      	bls.n	800ed8c <dhcp_option_byte+0x24>
 800ed7e:	4b0a      	ldr	r3, [pc, #40]	; (800eda8 <dhcp_option_byte+0x40>)
 800ed80:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800ed84:	4909      	ldr	r1, [pc, #36]	; (800edac <dhcp_option_byte+0x44>)
 800ed86:	480a      	ldr	r0, [pc, #40]	; (800edb0 <dhcp_option_byte+0x48>)
 800ed88:	f003 f918 	bl	8011fbc <iprintf>
  options[options_out_len++] = value;
 800ed8c:	88fb      	ldrh	r3, [r7, #6]
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	80fa      	strh	r2, [r7, #6]
 800ed92:	461a      	mov	r2, r3
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	4413      	add	r3, r2
 800ed98:	797a      	ldrb	r2, [r7, #5]
 800ed9a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ed9c:	88fb      	ldrh	r3, [r7, #6]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	08015424 	.word	0x08015424
 800edac:	080155fc 	.word	0x080155fc
 800edb0:	08015484 	.word	0x08015484

0800edb4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	80fb      	strh	r3, [r7, #6]
 800edc0:	4613      	mov	r3, r2
 800edc2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800edc4:	88fb      	ldrh	r3, [r7, #6]
 800edc6:	3302      	adds	r3, #2
 800edc8:	2b44      	cmp	r3, #68	; 0x44
 800edca:	d906      	bls.n	800edda <dhcp_option_short+0x26>
 800edcc:	4b0f      	ldr	r3, [pc, #60]	; (800ee0c <dhcp_option_short+0x58>)
 800edce:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800edd2:	490f      	ldr	r1, [pc, #60]	; (800ee10 <dhcp_option_short+0x5c>)
 800edd4:	480f      	ldr	r0, [pc, #60]	; (800ee14 <dhcp_option_short+0x60>)
 800edd6:	f003 f8f1 	bl	8011fbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800edda:	88bb      	ldrh	r3, [r7, #4]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	b29a      	uxth	r2, r3
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	1c59      	adds	r1, r3, #1
 800ede4:	80f9      	strh	r1, [r7, #6]
 800ede6:	4619      	mov	r1, r3
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	440b      	add	r3, r1
 800edec:	b2d2      	uxtb	r2, r2
 800edee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800edf0:	88fb      	ldrh	r3, [r7, #6]
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	80fa      	strh	r2, [r7, #6]
 800edf6:	461a      	mov	r2, r3
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	4413      	add	r3, r2
 800edfc:	88ba      	ldrh	r2, [r7, #4]
 800edfe:	b2d2      	uxtb	r2, r2
 800ee00:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ee02:	88fb      	ldrh	r3, [r7, #6]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	08015424 	.word	0x08015424
 800ee10:	08015634 	.word	0x08015634
 800ee14:	08015484 	.word	0x08015484

0800ee18 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800ee26:	89fb      	ldrh	r3, [r7, #14]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	2b44      	cmp	r3, #68	; 0x44
 800ee2c:	d906      	bls.n	800ee3c <dhcp_option_long+0x24>
 800ee2e:	4b19      	ldr	r3, [pc, #100]	; (800ee94 <dhcp_option_long+0x7c>)
 800ee30:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800ee34:	4918      	ldr	r1, [pc, #96]	; (800ee98 <dhcp_option_long+0x80>)
 800ee36:	4819      	ldr	r0, [pc, #100]	; (800ee9c <dhcp_option_long+0x84>)
 800ee38:	f003 f8c0 	bl	8011fbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	0e1a      	lsrs	r2, r3, #24
 800ee40:	89fb      	ldrh	r3, [r7, #14]
 800ee42:	1c59      	adds	r1, r3, #1
 800ee44:	81f9      	strh	r1, [r7, #14]
 800ee46:	4619      	mov	r1, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	440b      	add	r3, r1
 800ee4c:	b2d2      	uxtb	r2, r2
 800ee4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	0c1a      	lsrs	r2, r3, #16
 800ee54:	89fb      	ldrh	r3, [r7, #14]
 800ee56:	1c59      	adds	r1, r3, #1
 800ee58:	81f9      	strh	r1, [r7, #14]
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	440b      	add	r3, r1
 800ee60:	b2d2      	uxtb	r2, r2
 800ee62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	0a1a      	lsrs	r2, r3, #8
 800ee68:	89fb      	ldrh	r3, [r7, #14]
 800ee6a:	1c59      	adds	r1, r3, #1
 800ee6c:	81f9      	strh	r1, [r7, #14]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	440b      	add	r3, r1
 800ee74:	b2d2      	uxtb	r2, r2
 800ee76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ee78:	89fb      	ldrh	r3, [r7, #14]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	81fa      	strh	r2, [r7, #14]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	4413      	add	r3, r2
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	b2d2      	uxtb	r2, r2
 800ee88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ee8a:	89fb      	ldrh	r3, [r7, #14]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	08015424 	.word	0x08015424
 800ee98:	08015670 	.word	0x08015670
 800ee9c:	08015484 	.word	0x08015484

0800eea0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b090      	sub	sp, #64	; 0x40
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800eeb2:	2208      	movs	r2, #8
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	48b5      	ldr	r0, [pc, #724]	; (800f18c <dhcp_parse_reply+0x2ec>)
 800eeb8:	f003 f878 	bl	8011fac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	895b      	ldrh	r3, [r3, #10]
 800eec0:	2b2b      	cmp	r3, #43	; 0x2b
 800eec2:	d802      	bhi.n	800eeca <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800eec4:	f06f 0301 	mvn.w	r3, #1
 800eec8:	e2a7      	b.n	800f41a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800eed0:	23f0      	movs	r3, #240	; 0xf0
 800eed2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	891b      	ldrh	r3, [r3, #8]
 800eed8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800eede:	e00c      	b.n	800eefa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800eee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee2:	895b      	ldrh	r3, [r3, #10]
 800eee4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	895b      	ldrh	r3, [r3, #10]
 800eeee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d004      	beq.n	800ef0a <dhcp_parse_reply+0x6a>
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	895b      	ldrh	r3, [r3, #10]
 800ef04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d2ea      	bcs.n	800eee0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800ef10:	f06f 0301 	mvn.w	r3, #1
 800ef14:	e281      	b.n	800f41a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800ef16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef18:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800ef1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ef1c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ef24:	e239      	b.n	800f39a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800ef26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef2a:	4413      	add	r3, r2
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800ef36:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800ef3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef3e:	3302      	adds	r3, #2
 800ef40:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800ef42:	8bfa      	ldrh	r2, [r7, #30]
 800ef44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d202      	bcs.n	800ef50 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800ef4a:	f06f 0301 	mvn.w	r3, #1
 800ef4e:	e264      	b.n	800f41a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800ef50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef52:	3301      	adds	r3, #1
 800ef54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef56:	8952      	ldrh	r2, [r2, #10]
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	da07      	bge.n	800ef6c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800ef5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef5e:	3301      	adds	r3, #1
 800ef60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef62:	4413      	add	r3, r2
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef6a:	e00b      	b.n	800ef84 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d004      	beq.n	800ef7e <dhcp_parse_reply+0xde>
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	e000      	b.n	800ef80 <dhcp_parse_reply+0xe0>
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800ef84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800ef8c:	7dfb      	ldrb	r3, [r7, #23]
 800ef8e:	2b3b      	cmp	r3, #59	; 0x3b
 800ef90:	f200 812c 	bhi.w	800f1ec <dhcp_parse_reply+0x34c>
 800ef94:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <dhcp_parse_reply+0xfc>)
 800ef96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9a:	bf00      	nop
 800ef9c:	0800f08d 	.word	0x0800f08d
 800efa0:	0800f09d 	.word	0x0800f09d
 800efa4:	0800f1ed 	.word	0x0800f1ed
 800efa8:	0800f0bf 	.word	0x0800f0bf
 800efac:	0800f1ed 	.word	0x0800f1ed
 800efb0:	0800f1ed 	.word	0x0800f1ed
 800efb4:	0800f1ed 	.word	0x0800f1ed
 800efb8:	0800f1ed 	.word	0x0800f1ed
 800efbc:	0800f1ed 	.word	0x0800f1ed
 800efc0:	0800f1ed 	.word	0x0800f1ed
 800efc4:	0800f1ed 	.word	0x0800f1ed
 800efc8:	0800f1ed 	.word	0x0800f1ed
 800efcc:	0800f1ed 	.word	0x0800f1ed
 800efd0:	0800f1ed 	.word	0x0800f1ed
 800efd4:	0800f1ed 	.word	0x0800f1ed
 800efd8:	0800f1ed 	.word	0x0800f1ed
 800efdc:	0800f1ed 	.word	0x0800f1ed
 800efe0:	0800f1ed 	.word	0x0800f1ed
 800efe4:	0800f1ed 	.word	0x0800f1ed
 800efe8:	0800f1ed 	.word	0x0800f1ed
 800efec:	0800f1ed 	.word	0x0800f1ed
 800eff0:	0800f1ed 	.word	0x0800f1ed
 800eff4:	0800f1ed 	.word	0x0800f1ed
 800eff8:	0800f1ed 	.word	0x0800f1ed
 800effc:	0800f1ed 	.word	0x0800f1ed
 800f000:	0800f1ed 	.word	0x0800f1ed
 800f004:	0800f1ed 	.word	0x0800f1ed
 800f008:	0800f1ed 	.word	0x0800f1ed
 800f00c:	0800f1ed 	.word	0x0800f1ed
 800f010:	0800f1ed 	.word	0x0800f1ed
 800f014:	0800f1ed 	.word	0x0800f1ed
 800f018:	0800f1ed 	.word	0x0800f1ed
 800f01c:	0800f1ed 	.word	0x0800f1ed
 800f020:	0800f1ed 	.word	0x0800f1ed
 800f024:	0800f1ed 	.word	0x0800f1ed
 800f028:	0800f1ed 	.word	0x0800f1ed
 800f02c:	0800f1ed 	.word	0x0800f1ed
 800f030:	0800f1ed 	.word	0x0800f1ed
 800f034:	0800f1ed 	.word	0x0800f1ed
 800f038:	0800f1ed 	.word	0x0800f1ed
 800f03c:	0800f1ed 	.word	0x0800f1ed
 800f040:	0800f1ed 	.word	0x0800f1ed
 800f044:	0800f1ed 	.word	0x0800f1ed
 800f048:	0800f1ed 	.word	0x0800f1ed
 800f04c:	0800f1ed 	.word	0x0800f1ed
 800f050:	0800f1ed 	.word	0x0800f1ed
 800f054:	0800f1ed 	.word	0x0800f1ed
 800f058:	0800f1ed 	.word	0x0800f1ed
 800f05c:	0800f1ed 	.word	0x0800f1ed
 800f060:	0800f1ed 	.word	0x0800f1ed
 800f064:	0800f1ed 	.word	0x0800f1ed
 800f068:	0800f0eb 	.word	0x0800f0eb
 800f06c:	0800f10d 	.word	0x0800f10d
 800f070:	0800f149 	.word	0x0800f149
 800f074:	0800f16b 	.word	0x0800f16b
 800f078:	0800f1ed 	.word	0x0800f1ed
 800f07c:	0800f1ed 	.word	0x0800f1ed
 800f080:	0800f1ed 	.word	0x0800f1ed
 800f084:	0800f1a9 	.word	0x0800f1a9
 800f088:	0800f1cb 	.word	0x0800f1cb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f09a:	e0ab      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0a0:	2b04      	cmp	r3, #4
 800f0a2:	d009      	beq.n	800f0b8 <dhcp_parse_reply+0x218>
 800f0a4:	4b3a      	ldr	r3, [pc, #232]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f0a6:	f240 622e 	movw	r2, #1582	; 0x62e
 800f0aa:	493a      	ldr	r1, [pc, #232]	; (800f194 <dhcp_parse_reply+0x2f4>)
 800f0ac:	483a      	ldr	r0, [pc, #232]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f0ae:	f002 ff85 	bl	8011fbc <iprintf>
 800f0b2:	f06f 0305 	mvn.w	r3, #5
 800f0b6:	e1b0      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f0b8:	2306      	movs	r3, #6
 800f0ba:	623b      	str	r3, [r7, #32]
        break;
 800f0bc:	e09a      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f0be:	2304      	movs	r3, #4
 800f0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f0c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d209      	bcs.n	800f0e4 <dhcp_parse_reply+0x244>
 800f0d0:	4b2f      	ldr	r3, [pc, #188]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f0d2:	f240 6233 	movw	r2, #1587	; 0x633
 800f0d6:	4931      	ldr	r1, [pc, #196]	; (800f19c <dhcp_parse_reply+0x2fc>)
 800f0d8:	482f      	ldr	r0, [pc, #188]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f0da:	f002 ff6f 	bl	8011fbc <iprintf>
 800f0de:	f06f 0305 	mvn.w	r3, #5
 800f0e2:	e19a      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f0e4:	2307      	movs	r3, #7
 800f0e6:	623b      	str	r3, [r7, #32]
        break;
 800f0e8:	e084      	b.n	800f1f4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ee:	2b04      	cmp	r3, #4
 800f0f0:	d009      	beq.n	800f106 <dhcp_parse_reply+0x266>
 800f0f2:	4b27      	ldr	r3, [pc, #156]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f0f4:	f240 6241 	movw	r2, #1601	; 0x641
 800f0f8:	4926      	ldr	r1, [pc, #152]	; (800f194 <dhcp_parse_reply+0x2f4>)
 800f0fa:	4827      	ldr	r0, [pc, #156]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f0fc:	f002 ff5e 	bl	8011fbc <iprintf>
 800f100:	f06f 0305 	mvn.w	r3, #5
 800f104:	e189      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f106:	2303      	movs	r3, #3
 800f108:	623b      	str	r3, [r7, #32]
        break;
 800f10a:	e073      	b.n	800f1f4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f110:	2b01      	cmp	r3, #1
 800f112:	d009      	beq.n	800f128 <dhcp_parse_reply+0x288>
 800f114:	4b1e      	ldr	r3, [pc, #120]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f116:	f240 624f 	movw	r2, #1615	; 0x64f
 800f11a:	4921      	ldr	r1, [pc, #132]	; (800f1a0 <dhcp_parse_reply+0x300>)
 800f11c:	481e      	ldr	r0, [pc, #120]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f11e:	f002 ff4d 	bl	8011fbc <iprintf>
 800f122:	f06f 0305 	mvn.w	r3, #5
 800f126:	e178      	b.n	800f41a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f12a:	2bf0      	cmp	r3, #240	; 0xf0
 800f12c:	d009      	beq.n	800f142 <dhcp_parse_reply+0x2a2>
 800f12e:	4b18      	ldr	r3, [pc, #96]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f130:	f240 6251 	movw	r2, #1617	; 0x651
 800f134:	491b      	ldr	r1, [pc, #108]	; (800f1a4 <dhcp_parse_reply+0x304>)
 800f136:	4818      	ldr	r0, [pc, #96]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f138:	f002 ff40 	bl	8011fbc <iprintf>
 800f13c:	f06f 0305 	mvn.w	r3, #5
 800f140:	e16b      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f142:	2300      	movs	r3, #0
 800f144:	623b      	str	r3, [r7, #32]
        break;
 800f146:	e055      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d009      	beq.n	800f164 <dhcp_parse_reply+0x2c4>
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f152:	f240 6255 	movw	r2, #1621	; 0x655
 800f156:	4912      	ldr	r1, [pc, #72]	; (800f1a0 <dhcp_parse_reply+0x300>)
 800f158:	480f      	ldr	r0, [pc, #60]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f15a:	f002 ff2f 	bl	8011fbc <iprintf>
 800f15e:	f06f 0305 	mvn.w	r3, #5
 800f162:	e15a      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f164:	2301      	movs	r3, #1
 800f166:	623b      	str	r3, [r7, #32]
        break;
 800f168:	e044      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f16a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f16e:	2b04      	cmp	r3, #4
 800f170:	d009      	beq.n	800f186 <dhcp_parse_reply+0x2e6>
 800f172:	4b07      	ldr	r3, [pc, #28]	; (800f190 <dhcp_parse_reply+0x2f0>)
 800f174:	f240 6259 	movw	r2, #1625	; 0x659
 800f178:	4906      	ldr	r1, [pc, #24]	; (800f194 <dhcp_parse_reply+0x2f4>)
 800f17a:	4807      	ldr	r0, [pc, #28]	; (800f198 <dhcp_parse_reply+0x2f8>)
 800f17c:	f002 ff1e 	bl	8011fbc <iprintf>
 800f180:	f06f 0305 	mvn.w	r3, #5
 800f184:	e149      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f186:	2302      	movs	r3, #2
 800f188:	623b      	str	r3, [r7, #32]
        break;
 800f18a:	e033      	b.n	800f1f4 <dhcp_parse_reply+0x354>
 800f18c:	200068ac 	.word	0x200068ac
 800f190:	08015424 	.word	0x08015424
 800f194:	080156ac 	.word	0x080156ac
 800f198:	08015484 	.word	0x08015484
 800f19c:	080156b8 	.word	0x080156b8
 800f1a0:	080156cc 	.word	0x080156cc
 800f1a4:	080156d8 	.word	0x080156d8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	d009      	beq.n	800f1c4 <dhcp_parse_reply+0x324>
 800f1b0:	4b9c      	ldr	r3, [pc, #624]	; (800f424 <dhcp_parse_reply+0x584>)
 800f1b2:	f240 625d 	movw	r2, #1629	; 0x65d
 800f1b6:	499c      	ldr	r1, [pc, #624]	; (800f428 <dhcp_parse_reply+0x588>)
 800f1b8:	489c      	ldr	r0, [pc, #624]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f1ba:	f002 feff 	bl	8011fbc <iprintf>
 800f1be:	f06f 0305 	mvn.w	r3, #5
 800f1c2:	e12a      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f1c4:	2304      	movs	r3, #4
 800f1c6:	623b      	str	r3, [r7, #32]
        break;
 800f1c8:	e014      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ce:	2b04      	cmp	r3, #4
 800f1d0:	d009      	beq.n	800f1e6 <dhcp_parse_reply+0x346>
 800f1d2:	4b94      	ldr	r3, [pc, #592]	; (800f424 <dhcp_parse_reply+0x584>)
 800f1d4:	f240 6261 	movw	r2, #1633	; 0x661
 800f1d8:	4993      	ldr	r1, [pc, #588]	; (800f428 <dhcp_parse_reply+0x588>)
 800f1da:	4894      	ldr	r0, [pc, #592]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f1dc:	f002 feee 	bl	8011fbc <iprintf>
 800f1e0:	f06f 0305 	mvn.w	r3, #5
 800f1e4:	e119      	b.n	800f41a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f1e6:	2305      	movs	r3, #5
 800f1e8:	623b      	str	r3, [r7, #32]
        break;
 800f1ea:	e003      	b.n	800f1f4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f1f2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f1f4:	7dfb      	ldrb	r3, [r7, #23]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d103      	bne.n	800f202 <dhcp_parse_reply+0x362>
      offset++;
 800f1fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f200:	e0a1      	b.n	800f346 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f202:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f208:	4413      	add	r3, r2
 800f20a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f20e:	4293      	cmp	r3, r2
 800f210:	dd02      	ble.n	800f218 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800f212:	f06f 0301 	mvn.w	r3, #1
 800f216:	e100      	b.n	800f41a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800f218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f220:	4413      	add	r3, r2
 800f222:	b29b      	uxth	r3, r3
 800f224:	3302      	adds	r3, #2
 800f226:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f000 808a 	beq.w	800f346 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	db02      	blt.n	800f242 <dhcp_parse_reply+0x3a2>
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	2b07      	cmp	r3, #7
 800f240:	dd06      	ble.n	800f250 <dhcp_parse_reply+0x3b0>
 800f242:	4b78      	ldr	r3, [pc, #480]	; (800f424 <dhcp_parse_reply+0x584>)
 800f244:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f248:	4979      	ldr	r1, [pc, #484]	; (800f430 <dhcp_parse_reply+0x590>)
 800f24a:	4878      	ldr	r0, [pc, #480]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f24c:	f002 feb6 	bl	8011fbc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f250:	4a78      	ldr	r2, [pc, #480]	; (800f434 <dhcp_parse_reply+0x594>)
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d174      	bne.n	800f346 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800f25c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f260:	2b04      	cmp	r3, #4
 800f262:	bf28      	it	cs
 800f264:	2304      	movcs	r3, #4
 800f266:	b2db      	uxtb	r3, r3
 800f268:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f26a:	8bfb      	ldrh	r3, [r7, #30]
 800f26c:	8aba      	ldrh	r2, [r7, #20]
 800f26e:	f107 0108 	add.w	r1, r7, #8
 800f272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f274:	f7f7 fd8a 	bl	8006d8c <pbuf_copy_partial>
 800f278:	4603      	mov	r3, r0
 800f27a:	461a      	mov	r2, r3
 800f27c:	8abb      	ldrh	r3, [r7, #20]
 800f27e:	4293      	cmp	r3, r2
 800f280:	d002      	beq.n	800f288 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800f282:	f06f 0301 	mvn.w	r3, #1
 800f286:	e0c8      	b.n	800f41a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800f288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f28c:	2b04      	cmp	r3, #4
 800f28e:	d933      	bls.n	800f2f8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f294:	f003 0303 	and.w	r3, r3, #3
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d009      	beq.n	800f2b2 <dhcp_parse_reply+0x412>
 800f29e:	4b61      	ldr	r3, [pc, #388]	; (800f424 <dhcp_parse_reply+0x584>)
 800f2a0:	f240 6281 	movw	r2, #1665	; 0x681
 800f2a4:	4964      	ldr	r1, [pc, #400]	; (800f438 <dhcp_parse_reply+0x598>)
 800f2a6:	4861      	ldr	r0, [pc, #388]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f2a8:	f002 fe88 	bl	8011fbc <iprintf>
 800f2ac:	f06f 0305 	mvn.w	r3, #5
 800f2b0:	e0b3      	b.n	800f41a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800f2b2:	4a60      	ldr	r2, [pc, #384]	; (800f434 <dhcp_parse_reply+0x594>)
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f6 f8c3 	bl	800544a <lwip_htonl>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	495d      	ldr	r1, [pc, #372]	; (800f43c <dhcp_parse_reply+0x59c>)
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f2ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2d2:	3b04      	subs	r3, #4
 800f2d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800f2d8:	8bfb      	ldrh	r3, [r7, #30]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800f2de:	8a7a      	ldrh	r2, [r7, #18]
 800f2e0:	8bfb      	ldrh	r3, [r7, #30]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d202      	bcs.n	800f2ec <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800f2e6:	f06f 0301 	mvn.w	r3, #1
 800f2ea:	e096      	b.n	800f41a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800f2ec:	8a7b      	ldrh	r3, [r7, #18]
 800f2ee:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800f2f6:	e79e      	b.n	800f236 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800f2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d106      	bne.n	800f30e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	4618      	mov	r0, r3
 800f304:	f7f6 f8a1 	bl	800544a <lwip_htonl>
 800f308:	4603      	mov	r3, r0
 800f30a:	60bb      	str	r3, [r7, #8]
 800f30c:	e011      	b.n	800f332 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f312:	2b01      	cmp	r3, #1
 800f314:	d009      	beq.n	800f32a <dhcp_parse_reply+0x48a>
 800f316:	4b43      	ldr	r3, [pc, #268]	; (800f424 <dhcp_parse_reply+0x584>)
 800f318:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800f31c:	4948      	ldr	r1, [pc, #288]	; (800f440 <dhcp_parse_reply+0x5a0>)
 800f31e:	4843      	ldr	r0, [pc, #268]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f320:	f002 fe4c 	bl	8011fbc <iprintf>
 800f324:	f06f 0305 	mvn.w	r3, #5
 800f328:	e077      	b.n	800f41a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800f32a:	f107 0308 	add.w	r3, r7, #8
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800f332:	4a40      	ldr	r2, [pc, #256]	; (800f434 <dhcp_parse_reply+0x594>)
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	4413      	add	r3, r2
 800f338:	2201      	movs	r2, #1
 800f33a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	493f      	ldr	r1, [pc, #252]	; (800f43c <dhcp_parse_reply+0x59c>)
 800f340:	6a3b      	ldr	r3, [r7, #32]
 800f342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f348:	895b      	ldrh	r3, [r3, #10]
 800f34a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d324      	bcc.n	800f39a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	895b      	ldrh	r3, [r3, #10]
 800f354:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	895b      	ldrh	r3, [r3, #10]
 800f35e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800f364:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f366:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f368:	429a      	cmp	r2, r3
 800f36a:	d213      	bcs.n	800f394 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	2b00      	cmp	r3, #0
 800f376:	d109      	bne.n	800f38c <dhcp_parse_reply+0x4ec>
 800f378:	4b2a      	ldr	r3, [pc, #168]	; (800f424 <dhcp_parse_reply+0x584>)
 800f37a:	f240 629d 	movw	r2, #1693	; 0x69d
 800f37e:	4931      	ldr	r1, [pc, #196]	; (800f444 <dhcp_parse_reply+0x5a4>)
 800f380:	482a      	ldr	r0, [pc, #168]	; (800f42c <dhcp_parse_reply+0x58c>)
 800f382:	f002 fe1b 	bl	8011fbc <iprintf>
 800f386:	f06f 0305 	mvn.w	r3, #5
 800f38a:	e046      	b.n	800f41a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f392:	e002      	b.n	800f39a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800f394:	f06f 0301 	mvn.w	r3, #1
 800f398:	e03f      	b.n	800f41a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00a      	beq.n	800f3b6 <dhcp_parse_reply+0x516>
 800f3a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f3a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d206      	bcs.n	800f3b6 <dhcp_parse_reply+0x516>
 800f3a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3ac:	4413      	add	r3, r2
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	2bff      	cmp	r3, #255	; 0xff
 800f3b2:	f47f adb8 	bne.w	800ef26 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800f3b6:	4b1f      	ldr	r3, [pc, #124]	; (800f434 <dhcp_parse_reply+0x594>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d018      	beq.n	800f3f0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f3be:	4b1f      	ldr	r3, [pc, #124]	; (800f43c <dhcp_parse_reply+0x59c>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f3c4:	4b1b      	ldr	r3, [pc, #108]	; (800f434 <dhcp_parse_reply+0x594>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d102      	bne.n	800f3d6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3d4:	e00c      	b.n	800f3f0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d102      	bne.n	800f3e2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3e0:	e006      	b.n	800f3f0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d103      	bne.n	800f3f0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d006      	beq.n	800f404 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800f3fa:	236c      	movs	r3, #108	; 0x6c
 800f3fc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800f3fe:	23ec      	movs	r3, #236	; 0xec
 800f400:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800f402:	e56a      	b.n	800eeda <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800f404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f406:	2b00      	cmp	r3, #0
 800f408:	d006      	beq.n	800f418 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800f40e:	232c      	movs	r3, #44	; 0x2c
 800f410:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800f412:	236c      	movs	r3, #108	; 0x6c
 800f414:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800f416:	e560      	b.n	800eeda <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3740      	adds	r7, #64	; 0x40
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	08015424 	.word	0x08015424
 800f428:	080156ac 	.word	0x080156ac
 800f42c:	08015484 	.word	0x08015484
 800f430:	080156f0 	.word	0x080156f0
 800f434:	200068ac 	.word	0x200068ac
 800f438:	08015704 	.word	0x08015704
 800f43c:	2000688c 	.word	0x2000688c
 800f440:	0801571c 	.word	0x0801571c
 800f444:	08015730 	.word	0x08015730

0800f448 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b08a      	sub	sp, #40	; 0x28
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
 800f454:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800f456:	4b60      	ldr	r3, [pc, #384]	; (800f5d8 <dhcp_recv+0x190>)
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f460:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f000 809d 	beq.w	800f5aa <dhcp_recv+0x162>
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	791b      	ldrb	r3, [r3, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 8098 	beq.w	800f5aa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	895b      	ldrh	r3, [r3, #10]
 800f47e:	2b2b      	cmp	r3, #43	; 0x2b
 800f480:	f240 8095 	bls.w	800f5ae <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b02      	cmp	r3, #2
 800f48a:	f040 8092 	bne.w	800f5b2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f48e:	2300      	movs	r3, #0
 800f490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f494:	e012      	b.n	800f4bc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800f496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f49a:	6a3a      	ldr	r2, [r7, #32]
 800f49c:	4413      	add	r3, r2
 800f49e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4a6:	69b9      	ldr	r1, [r7, #24]
 800f4a8:	440b      	add	r3, r1
 800f4aa:	7f1b      	ldrb	r3, [r3, #28]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	f040 8082 	bne.w	800f5b6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f4b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f4bc:	6a3b      	ldr	r3, [r7, #32]
 800f4be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f4c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d203      	bcs.n	800f4d2 <dhcp_recv+0x8a>
 800f4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4ce:	2b05      	cmp	r3, #5
 800f4d0:	d9e1      	bls.n	800f496 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f5 ffb7 	bl	800544a <lwip_htonl>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d169      	bne.n	800f5ba <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800f4e6:	69f9      	ldr	r1, [r7, #28]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff fcd9 	bl	800eea0 <dhcp_parse_reply>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d164      	bne.n	800f5be <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f4f4:	4b39      	ldr	r3, [pc, #228]	; (800f5dc <dhcp_recv+0x194>)
 800f4f6:	785b      	ldrb	r3, [r3, #1]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d062      	beq.n	800f5c2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f502:	4b37      	ldr	r3, [pc, #220]	; (800f5e0 <dhcp_recv+0x198>)
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800f508:	7cfb      	ldrb	r3, [r7, #19]
 800f50a:	2b05      	cmp	r3, #5
 800f50c:	d12a      	bne.n	800f564 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	795b      	ldrb	r3, [r3, #5]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d112      	bne.n	800f53c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800f516:	6979      	ldr	r1, [r7, #20]
 800f518:	6a38      	ldr	r0, [r7, #32]
 800f51a:	f7fe fe53 	bl	800e1c4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f51e:	6a3b      	ldr	r3, [r7, #32]
 800f520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f524:	f003 0308 	and.w	r3, r3, #8
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d003      	beq.n	800f534 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800f52c:	6a38      	ldr	r0, [r7, #32]
 800f52e:	f7fe fbc1 	bl	800dcb4 <dhcp_check>
 800f532:	e049      	b.n	800f5c8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800f534:	6a38      	ldr	r0, [r7, #32]
 800f536:	f7ff f867 	bl	800e608 <dhcp_bind>
 800f53a:	e045      	b.n	800f5c8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	795b      	ldrb	r3, [r3, #5]
 800f540:	2b03      	cmp	r3, #3
 800f542:	d007      	beq.n	800f554 <dhcp_recv+0x10c>
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	795b      	ldrb	r3, [r3, #5]
 800f548:	2b04      	cmp	r3, #4
 800f54a:	d003      	beq.n	800f554 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f550:	2b05      	cmp	r3, #5
 800f552:	d139      	bne.n	800f5c8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800f554:	6979      	ldr	r1, [r7, #20]
 800f556:	6a38      	ldr	r0, [r7, #32]
 800f558:	f7fe fe34 	bl	800e1c4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f55c:	6a38      	ldr	r0, [r7, #32]
 800f55e:	f7ff f853 	bl	800e608 <dhcp_bind>
 800f562:	e031      	b.n	800f5c8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800f564:	7cfb      	ldrb	r3, [r7, #19]
 800f566:	2b06      	cmp	r3, #6
 800f568:	d113      	bne.n	800f592 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d00b      	beq.n	800f58a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	795b      	ldrb	r3, [r3, #5]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d007      	beq.n	800f58a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d003      	beq.n	800f58a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	795b      	ldrb	r3, [r3, #5]
 800f586:	2b05      	cmp	r3, #5
 800f588:	d103      	bne.n	800f592 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800f58a:	6a38      	ldr	r0, [r7, #32]
 800f58c:	f7fe fb78 	bl	800dc80 <dhcp_handle_nak>
 800f590:	e01a      	b.n	800f5c8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f592:	7cfb      	ldrb	r3, [r7, #19]
 800f594:	2b02      	cmp	r3, #2
 800f596:	d116      	bne.n	800f5c6 <dhcp_recv+0x17e>
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	795b      	ldrb	r3, [r3, #5]
 800f59c:	2b06      	cmp	r3, #6
 800f59e:	d112      	bne.n	800f5c6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800f5a0:	6979      	ldr	r1, [r7, #20]
 800f5a2:	6a38      	ldr	r0, [r7, #32]
 800f5a4:	f7fe fbba 	bl	800dd1c <dhcp_handle_offer>
 800f5a8:	e00e      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5aa:	bf00      	nop
 800f5ac:	e00c      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5ae:	bf00      	nop
 800f5b0:	e00a      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5b2:	bf00      	nop
 800f5b4:	e008      	b.n	800f5c8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800f5b6:	bf00      	nop
 800f5b8:	e006      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5ba:	bf00      	nop
 800f5bc:	e004      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5be:	bf00      	nop
 800f5c0:	e002      	b.n	800f5c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f5c2:	bf00      	nop
 800f5c4:	e000      	b.n	800f5c8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800f5c6:	bf00      	nop
  pbuf_free(p);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7f7 f9e5 	bl	8006998 <pbuf_free>
}
 800f5ce:	bf00      	nop
 800f5d0:	3728      	adds	r7, #40	; 0x28
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	2000329c 	.word	0x2000329c
 800f5dc:	200068ac 	.word	0x200068ac
 800f5e0:	2000688c 	.word	0x2000688c

0800f5e4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b088      	sub	sp, #32
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	603b      	str	r3, [r7, #0]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d108      	bne.n	800f60c <dhcp_create_msg+0x28>
 800f5fa:	4b5f      	ldr	r3, [pc, #380]	; (800f778 <dhcp_create_msg+0x194>)
 800f5fc:	f240 7269 	movw	r2, #1897	; 0x769
 800f600:	495e      	ldr	r1, [pc, #376]	; (800f77c <dhcp_create_msg+0x198>)
 800f602:	485f      	ldr	r0, [pc, #380]	; (800f780 <dhcp_create_msg+0x19c>)
 800f604:	f002 fcda 	bl	8011fbc <iprintf>
 800f608:	2300      	movs	r3, #0
 800f60a:	e0b1      	b.n	800f770 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d108      	bne.n	800f624 <dhcp_create_msg+0x40>
 800f612:	4b59      	ldr	r3, [pc, #356]	; (800f778 <dhcp_create_msg+0x194>)
 800f614:	f240 726a 	movw	r2, #1898	; 0x76a
 800f618:	495a      	ldr	r1, [pc, #360]	; (800f784 <dhcp_create_msg+0x1a0>)
 800f61a:	4859      	ldr	r0, [pc, #356]	; (800f780 <dhcp_create_msg+0x19c>)
 800f61c:	f002 fcce 	bl	8011fbc <iprintf>
 800f620:	2300      	movs	r3, #0
 800f622:	e0a5      	b.n	800f770 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800f624:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f628:	f44f 719a 	mov.w	r1, #308	; 0x134
 800f62c:	2036      	movs	r0, #54	; 0x36
 800f62e:	f7f6 fecf 	bl	80063d0 <pbuf_alloc>
 800f632:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	e098      	b.n	800f770 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	895b      	ldrh	r3, [r3, #10]
 800f642:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800f646:	d206      	bcs.n	800f656 <dhcp_create_msg+0x72>
 800f648:	4b4b      	ldr	r3, [pc, #300]	; (800f778 <dhcp_create_msg+0x194>)
 800f64a:	f240 7271 	movw	r2, #1905	; 0x771
 800f64e:	494e      	ldr	r1, [pc, #312]	; (800f788 <dhcp_create_msg+0x1a4>)
 800f650:	484b      	ldr	r0, [pc, #300]	; (800f780 <dhcp_create_msg+0x19c>)
 800f652:	f002 fcb3 	bl	8011fbc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800f656:	79fb      	ldrb	r3, [r7, #7]
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d103      	bne.n	800f664 <dhcp_create_msg+0x80>
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	795b      	ldrb	r3, [r3, #5]
 800f660:	2b03      	cmp	r3, #3
 800f662:	d10d      	bne.n	800f680 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	799b      	ldrb	r3, [r3, #6]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d105      	bne.n	800f678 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800f66c:	f002 fcbe 	bl	8011fec <rand>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
 800f674:	4b45      	ldr	r3, [pc, #276]	; (800f78c <dhcp_create_msg+0x1a8>)
 800f676:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800f678:	4b44      	ldr	r3, [pc, #272]	; (800f78c <dhcp_create_msg+0x1a8>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800f686:	f44f 729a 	mov.w	r2, #308	; 0x134
 800f68a:	2100      	movs	r1, #0
 800f68c:	6978      	ldr	r0, [r7, #20]
 800f68e:	f002 fc8d 	bl	8011fac <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	2201      	movs	r2, #1
 800f696:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	2201      	movs	r2, #1
 800f69c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7f5 fecc 	bl	800544a <lwip_htonl>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	2b08      	cmp	r3, #8
 800f6bc:	d010      	beq.n	800f6e0 <dhcp_create_msg+0xfc>
 800f6be:	79fb      	ldrb	r3, [r7, #7]
 800f6c0:	2b04      	cmp	r3, #4
 800f6c2:	d00d      	beq.n	800f6e0 <dhcp_create_msg+0xfc>
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	2b07      	cmp	r3, #7
 800f6c8:	d00a      	beq.n	800f6e0 <dhcp_create_msg+0xfc>
 800f6ca:	79fb      	ldrb	r3, [r7, #7]
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d10c      	bne.n	800f6ea <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800f6d4:	2b05      	cmp	r3, #5
 800f6d6:	d003      	beq.n	800f6e0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	795b      	ldrb	r3, [r3, #5]
 800f6dc:	2b04      	cmp	r3, #4
 800f6de:	d104      	bne.n	800f6ea <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	83fb      	strh	r3, [r7, #30]
 800f6ee:	e00c      	b.n	800f70a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800f6f0:	8bfa      	ldrh	r2, [r7, #30]
 800f6f2:	8bfb      	ldrh	r3, [r7, #30]
 800f6f4:	68f9      	ldr	r1, [r7, #12]
 800f6f6:	440a      	add	r2, r1
 800f6f8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	4413      	add	r3, r2
 800f700:	460a      	mov	r2, r1
 800f702:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f704:	8bfb      	ldrh	r3, [r7, #30]
 800f706:	3301      	adds	r3, #1
 800f708:	83fb      	strh	r3, [r7, #30]
 800f70a:	8bfb      	ldrh	r3, [r7, #30]
 800f70c:	2b05      	cmp	r3, #5
 800f70e:	d9ef      	bls.n	800f6f0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	2200      	movs	r2, #0
 800f714:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f718:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800f71c:	2200      	movs	r2, #0
 800f71e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800f722:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800f726:	2200      	movs	r2, #0
 800f728:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800f72c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800f730:	2200      	movs	r2, #0
 800f732:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f736:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f740:	2301      	movs	r3, #1
 800f742:	2235      	movs	r2, #53	; 0x35
 800f744:	2000      	movs	r0, #0
 800f746:	f7ff fadb 	bl	800ed00 <dhcp_option>
 800f74a:	4603      	mov	r3, r0
 800f74c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f754:	79fa      	ldrb	r2, [r7, #7]
 800f756:	8a7b      	ldrh	r3, [r7, #18]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7ff fb05 	bl	800ed68 <dhcp_option_byte>
 800f75e:	4603      	mov	r3, r0
 800f760:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	8a7a      	ldrh	r2, [r7, #18]
 800f76c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800f76e:	69bb      	ldr	r3, [r7, #24]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3720      	adds	r7, #32
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	08015424 	.word	0x08015424
 800f77c:	08015744 	.word	0x08015744
 800f780:	08015484 	.word	0x08015484
 800f784:	08015764 	.word	0x08015764
 800f788:	08015784 	.word	0x08015784
 800f78c:	200068bc 	.word	0x200068bc

0800f790 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	4603      	mov	r3, r0
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800f79e:	89fb      	ldrh	r3, [r7, #14]
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	81fa      	strh	r2, [r7, #14]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	22ff      	movs	r2, #255	; 0xff
 800f7ac:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f7ae:	e007      	b.n	800f7c0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800f7b0:	89fb      	ldrh	r3, [r7, #14]
 800f7b2:	1c5a      	adds	r2, r3, #1
 800f7b4:	81fa      	strh	r2, [r7, #14]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	2200      	movs	r2, #0
 800f7be:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f7c0:	89fb      	ldrh	r3, [r7, #14]
 800f7c2:	2b43      	cmp	r3, #67	; 0x43
 800f7c4:	d904      	bls.n	800f7d0 <dhcp_option_trailer+0x40>
 800f7c6:	89fb      	ldrh	r3, [r7, #14]
 800f7c8:	f003 0303 	and.w	r3, r3, #3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <dhcp_option_trailer+0x46>
 800f7d0:	89fb      	ldrh	r3, [r7, #14]
 800f7d2:	2b43      	cmp	r3, #67	; 0x43
 800f7d4:	d9ec      	bls.n	800f7b0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800f7d6:	89fb      	ldrh	r3, [r7, #14]
 800f7d8:	33f0      	adds	r3, #240	; 0xf0
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7f6 ff54 	bl	800668c <pbuf_realloc>
}
 800f7e4:	bf00      	nop
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d017      	beq.n	800f82a <dhcp_supplied_address+0x3e>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d013      	beq.n	800f82a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f806:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	795b      	ldrb	r3, [r3, #5]
 800f80c:	2b0a      	cmp	r3, #10
 800f80e:	d007      	beq.n	800f820 <dhcp_supplied_address+0x34>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	795b      	ldrb	r3, [r3, #5]
 800f814:	2b05      	cmp	r3, #5
 800f816:	d003      	beq.n	800f820 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f81c:	2b04      	cmp	r3, #4
 800f81e:	d101      	bne.n	800f824 <dhcp_supplied_address+0x38>
 800f820:	2301      	movs	r3, #1
 800f822:	e000      	b.n	800f826 <dhcp_supplied_address+0x3a>
 800f824:	2300      	movs	r3, #0
 800f826:	b2db      	uxtb	r3, r3
 800f828:	e000      	b.n	800f82c <dhcp_supplied_address+0x40>
  }
  return 0;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f840:	4915      	ldr	r1, [pc, #84]	; (800f898 <etharp_free_entry+0x60>)
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	4613      	mov	r3, r2
 800f846:	005b      	lsls	r3, r3, #1
 800f848:	4413      	add	r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	440b      	add	r3, r1
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d013      	beq.n	800f87c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f854:	4910      	ldr	r1, [pc, #64]	; (800f898 <etharp_free_entry+0x60>)
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	4613      	mov	r3, r2
 800f85a:	005b      	lsls	r3, r3, #1
 800f85c:	4413      	add	r3, r2
 800f85e:	00db      	lsls	r3, r3, #3
 800f860:	440b      	add	r3, r1
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	f7f7 f897 	bl	8006998 <pbuf_free>
    arp_table[i].q = NULL;
 800f86a:	490b      	ldr	r1, [pc, #44]	; (800f898 <etharp_free_entry+0x60>)
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	4613      	mov	r3, r2
 800f870:	005b      	lsls	r3, r3, #1
 800f872:	4413      	add	r3, r2
 800f874:	00db      	lsls	r3, r3, #3
 800f876:	440b      	add	r3, r1
 800f878:	2200      	movs	r2, #0
 800f87a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f87c:	4906      	ldr	r1, [pc, #24]	; (800f898 <etharp_free_entry+0x60>)
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	4613      	mov	r3, r2
 800f882:	005b      	lsls	r3, r3, #1
 800f884:	4413      	add	r3, r2
 800f886:	00db      	lsls	r3, r3, #3
 800f888:	440b      	add	r3, r1
 800f88a:	3314      	adds	r3, #20
 800f88c:	2200      	movs	r2, #0
 800f88e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	200068c0 	.word	0x200068c0

0800f89c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	607b      	str	r3, [r7, #4]
 800f8a6:	e096      	b.n	800f9d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f8a8:	494f      	ldr	r1, [pc, #316]	; (800f9e8 <etharp_tmr+0x14c>)
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	440b      	add	r3, r1
 800f8b6:	3314      	adds	r3, #20
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 8086 	beq.w	800f9d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f8c4:	4948      	ldr	r1, [pc, #288]	; (800f9e8 <etharp_tmr+0x14c>)
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	4413      	add	r3, r2
 800f8ce:	00db      	lsls	r3, r3, #3
 800f8d0:	440b      	add	r3, r1
 800f8d2:	3312      	adds	r3, #18
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	b298      	uxth	r0, r3
 800f8da:	4943      	ldr	r1, [pc, #268]	; (800f9e8 <etharp_tmr+0x14c>)
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	4413      	add	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	440b      	add	r3, r1
 800f8e8:	3312      	adds	r3, #18
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f8ee:	493e      	ldr	r1, [pc, #248]	; (800f9e8 <etharp_tmr+0x14c>)
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	4413      	add	r3, r2
 800f8f8:	00db      	lsls	r3, r3, #3
 800f8fa:	440b      	add	r3, r1
 800f8fc:	3312      	adds	r3, #18
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f904:	d215      	bcs.n	800f932 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f906:	4938      	ldr	r1, [pc, #224]	; (800f9e8 <etharp_tmr+0x14c>)
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	4613      	mov	r3, r2
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	4413      	add	r3, r2
 800f910:	00db      	lsls	r3, r3, #3
 800f912:	440b      	add	r3, r1
 800f914:	3314      	adds	r3, #20
 800f916:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d10e      	bne.n	800f93a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f91c:	4932      	ldr	r1, [pc, #200]	; (800f9e8 <etharp_tmr+0x14c>)
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	4613      	mov	r3, r2
 800f922:	005b      	lsls	r3, r3, #1
 800f924:	4413      	add	r3, r2
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	440b      	add	r3, r1
 800f92a:	3312      	adds	r3, #18
 800f92c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d903      	bls.n	800f93a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff ff80 	bl	800f838 <etharp_free_entry>
 800f938:	e04a      	b.n	800f9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f93a:	492b      	ldr	r1, [pc, #172]	; (800f9e8 <etharp_tmr+0x14c>)
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	4613      	mov	r3, r2
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	440b      	add	r3, r1
 800f948:	3314      	adds	r3, #20
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d10a      	bne.n	800f966 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f950:	4925      	ldr	r1, [pc, #148]	; (800f9e8 <etharp_tmr+0x14c>)
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	4613      	mov	r3, r2
 800f956:	005b      	lsls	r3, r3, #1
 800f958:	4413      	add	r3, r2
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	440b      	add	r3, r1
 800f95e:	3314      	adds	r3, #20
 800f960:	2204      	movs	r2, #4
 800f962:	701a      	strb	r2, [r3, #0]
 800f964:	e034      	b.n	800f9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f966:	4920      	ldr	r1, [pc, #128]	; (800f9e8 <etharp_tmr+0x14c>)
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	4613      	mov	r3, r2
 800f96c:	005b      	lsls	r3, r3, #1
 800f96e:	4413      	add	r3, r2
 800f970:	00db      	lsls	r3, r3, #3
 800f972:	440b      	add	r3, r1
 800f974:	3314      	adds	r3, #20
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d10a      	bne.n	800f992 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f97c:	491a      	ldr	r1, [pc, #104]	; (800f9e8 <etharp_tmr+0x14c>)
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	4613      	mov	r3, r2
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	3314      	adds	r3, #20
 800f98c:	2202      	movs	r2, #2
 800f98e:	701a      	strb	r2, [r3, #0]
 800f990:	e01e      	b.n	800f9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f992:	4915      	ldr	r1, [pc, #84]	; (800f9e8 <etharp_tmr+0x14c>)
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	4613      	mov	r3, r2
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	4413      	add	r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	3314      	adds	r3, #20
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d113      	bne.n	800f9d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f9a8:	490f      	ldr	r1, [pc, #60]	; (800f9e8 <etharp_tmr+0x14c>)
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	005b      	lsls	r3, r3, #1
 800f9b0:	4413      	add	r3, r2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	440b      	add	r3, r1
 800f9b6:	3308      	adds	r3, #8
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	4413      	add	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4a08      	ldr	r2, [pc, #32]	; (800f9e8 <etharp_tmr+0x14c>)
 800f9c6:	4413      	add	r3, r2
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f000 fe72 	bl	80106b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	607b      	str	r3, [r7, #4]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b09      	cmp	r3, #9
 800f9da:	f77f af65 	ble.w	800f8a8 <etharp_tmr+0xc>
      }
    }
  }
}
 800f9de:	bf00      	nop
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	200068c0 	.word	0x200068c0

0800f9ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b08a      	sub	sp, #40	; 0x28
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	607a      	str	r2, [r7, #4]
 800f9f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f9fa:	230a      	movs	r3, #10
 800f9fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f9fe:	230a      	movs	r3, #10
 800fa00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fa02:	230a      	movs	r3, #10
 800fa04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fa0a:	230a      	movs	r3, #10
 800fa0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	83bb      	strh	r3, [r7, #28]
 800fa12:	2300      	movs	r3, #0
 800fa14:	837b      	strh	r3, [r7, #26]
 800fa16:	2300      	movs	r3, #0
 800fa18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	843b      	strh	r3, [r7, #32]
 800fa1e:	e0ae      	b.n	800fb7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fa20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa24:	49a6      	ldr	r1, [pc, #664]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fa26:	4613      	mov	r3, r2
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	440b      	add	r3, r1
 800fa30:	3314      	adds	r3, #20
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fa36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fa3a:	2b0a      	cmp	r3, #10
 800fa3c:	d105      	bne.n	800fa4a <etharp_find_entry+0x5e>
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d102      	bne.n	800fa4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fa44:	8c3b      	ldrh	r3, [r7, #32]
 800fa46:	847b      	strh	r3, [r7, #34]	; 0x22
 800fa48:	e095      	b.n	800fb76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 8092 	beq.w	800fb76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d009      	beq.n	800fa6c <etharp_find_entry+0x80>
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d806      	bhi.n	800fa6c <etharp_find_entry+0x80>
 800fa5e:	4b99      	ldr	r3, [pc, #612]	; (800fcc4 <etharp_find_entry+0x2d8>)
 800fa60:	f240 1223 	movw	r2, #291	; 0x123
 800fa64:	4998      	ldr	r1, [pc, #608]	; (800fcc8 <etharp_find_entry+0x2dc>)
 800fa66:	4899      	ldr	r0, [pc, #612]	; (800fccc <etharp_find_entry+0x2e0>)
 800fa68:	f002 faa8 	bl	8011fbc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d020      	beq.n	800fab4 <etharp_find_entry+0xc8>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6819      	ldr	r1, [r3, #0]
 800fa76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa7a:	4891      	ldr	r0, [pc, #580]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	005b      	lsls	r3, r3, #1
 800fa80:	4413      	add	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	4403      	add	r3, r0
 800fa86:	3304      	adds	r3, #4
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4299      	cmp	r1, r3
 800fa8c:	d112      	bne.n	800fab4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00c      	beq.n	800faae <etharp_find_entry+0xc2>
 800fa94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa98:	4989      	ldr	r1, [pc, #548]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	4413      	add	r3, r2
 800faa0:	00db      	lsls	r3, r3, #3
 800faa2:	440b      	add	r3, r1
 800faa4:	3308      	adds	r3, #8
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d102      	bne.n	800fab4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800faae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fab2:	e100      	b.n	800fcb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d140      	bne.n	800fb3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800faba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fabe:	4980      	ldr	r1, [pc, #512]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fac0:	4613      	mov	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	440b      	add	r3, r1
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d01a      	beq.n	800fb06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fad4:	497a      	ldr	r1, [pc, #488]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	3312      	adds	r3, #18
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	8bba      	ldrh	r2, [r7, #28]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d845      	bhi.n	800fb76 <etharp_find_entry+0x18a>
            old_queue = i;
 800faea:	8c3b      	ldrh	r3, [r7, #32]
 800faec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800faee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800faf2:	4973      	ldr	r1, [pc, #460]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800faf4:	4613      	mov	r3, r2
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	4413      	add	r3, r2
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	440b      	add	r3, r1
 800fafe:	3312      	adds	r3, #18
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	83bb      	strh	r3, [r7, #28]
 800fb04:	e037      	b.n	800fb76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fb06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb0a:	496d      	ldr	r1, [pc, #436]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	4413      	add	r3, r2
 800fb12:	00db      	lsls	r3, r3, #3
 800fb14:	440b      	add	r3, r1
 800fb16:	3312      	adds	r3, #18
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	8b7a      	ldrh	r2, [r7, #26]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d82a      	bhi.n	800fb76 <etharp_find_entry+0x18a>
            old_pending = i;
 800fb20:	8c3b      	ldrh	r3, [r7, #32]
 800fb22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fb24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb28:	4965      	ldr	r1, [pc, #404]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	005b      	lsls	r3, r3, #1
 800fb2e:	4413      	add	r3, r2
 800fb30:	00db      	lsls	r3, r3, #3
 800fb32:	440b      	add	r3, r1
 800fb34:	3312      	adds	r3, #18
 800fb36:	881b      	ldrh	r3, [r3, #0]
 800fb38:	837b      	strh	r3, [r7, #26]
 800fb3a:	e01c      	b.n	800fb76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fb3c:	7dfb      	ldrb	r3, [r7, #23]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d919      	bls.n	800fb76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fb42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb46:	495e      	ldr	r1, [pc, #376]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fb48:	4613      	mov	r3, r2
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	4413      	add	r3, r2
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	440b      	add	r3, r1
 800fb52:	3312      	adds	r3, #18
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	8b3a      	ldrh	r2, [r7, #24]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d80c      	bhi.n	800fb76 <etharp_find_entry+0x18a>
            old_stable = i;
 800fb5c:	8c3b      	ldrh	r3, [r7, #32]
 800fb5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fb60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb64:	4956      	ldr	r1, [pc, #344]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fb66:	4613      	mov	r3, r2
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	4413      	add	r3, r2
 800fb6c:	00db      	lsls	r3, r3, #3
 800fb6e:	440b      	add	r3, r1
 800fb70:	3312      	adds	r3, #18
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb76:	8c3b      	ldrh	r3, [r7, #32]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	843b      	strh	r3, [r7, #32]
 800fb7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	f77f af4c 	ble.w	800fa20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fb88:	7afb      	ldrb	r3, [r7, #11]
 800fb8a:	f003 0302 	and.w	r3, r3, #2
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d108      	bne.n	800fba4 <etharp_find_entry+0x1b8>
 800fb92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fb96:	2b0a      	cmp	r3, #10
 800fb98:	d107      	bne.n	800fbaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fb9a:	7afb      	ldrb	r3, [r7, #11]
 800fb9c:	f003 0301 	and.w	r3, r3, #1
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d102      	bne.n	800fbaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fba4:	f04f 33ff 	mov.w	r3, #4294967295
 800fba8:	e085      	b.n	800fcb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fbaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fbae:	2b09      	cmp	r3, #9
 800fbb0:	dc02      	bgt.n	800fbb8 <etharp_find_entry+0x1cc>
    i = empty;
 800fbb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbb4:	843b      	strh	r3, [r7, #32]
 800fbb6:	e039      	b.n	800fc2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fbb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fbbc:	2b09      	cmp	r3, #9
 800fbbe:	dc14      	bgt.n	800fbea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbc2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fbc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbc8:	493d      	ldr	r1, [pc, #244]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fbca:	4613      	mov	r3, r2
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	4413      	add	r3, r2
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	440b      	add	r3, r1
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d018      	beq.n	800fc0c <etharp_find_entry+0x220>
 800fbda:	4b3a      	ldr	r3, [pc, #232]	; (800fcc4 <etharp_find_entry+0x2d8>)
 800fbdc:	f240 126d 	movw	r2, #365	; 0x16d
 800fbe0:	493b      	ldr	r1, [pc, #236]	; (800fcd0 <etharp_find_entry+0x2e4>)
 800fbe2:	483a      	ldr	r0, [pc, #232]	; (800fccc <etharp_find_entry+0x2e0>)
 800fbe4:	f002 f9ea 	bl	8011fbc <iprintf>
 800fbe8:	e010      	b.n	800fc0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fbea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbee:	2b09      	cmp	r3, #9
 800fbf0:	dc02      	bgt.n	800fbf8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fbf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbf4:	843b      	strh	r3, [r7, #32]
 800fbf6:	e009      	b.n	800fc0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fbf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	dc02      	bgt.n	800fc06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fc00:	8bfb      	ldrh	r3, [r7, #30]
 800fc02:	843b      	strh	r3, [r7, #32]
 800fc04:	e002      	b.n	800fc0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fc06:	f04f 33ff 	mov.w	r3, #4294967295
 800fc0a:	e054      	b.n	800fcb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc10:	2b09      	cmp	r3, #9
 800fc12:	dd06      	ble.n	800fc22 <etharp_find_entry+0x236>
 800fc14:	4b2b      	ldr	r3, [pc, #172]	; (800fcc4 <etharp_find_entry+0x2d8>)
 800fc16:	f240 127f 	movw	r2, #383	; 0x17f
 800fc1a:	492e      	ldr	r1, [pc, #184]	; (800fcd4 <etharp_find_entry+0x2e8>)
 800fc1c:	482b      	ldr	r0, [pc, #172]	; (800fccc <etharp_find_entry+0x2e0>)
 800fc1e:	f002 f9cd 	bl	8011fbc <iprintf>
    etharp_free_entry(i);
 800fc22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff fe06 	bl	800f838 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc30:	2b09      	cmp	r3, #9
 800fc32:	dd06      	ble.n	800fc42 <etharp_find_entry+0x256>
 800fc34:	4b23      	ldr	r3, [pc, #140]	; (800fcc4 <etharp_find_entry+0x2d8>)
 800fc36:	f240 1283 	movw	r2, #387	; 0x183
 800fc3a:	4926      	ldr	r1, [pc, #152]	; (800fcd4 <etharp_find_entry+0x2e8>)
 800fc3c:	4823      	ldr	r0, [pc, #140]	; (800fccc <etharp_find_entry+0x2e0>)
 800fc3e:	f002 f9bd 	bl	8011fbc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fc42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc46:	491e      	ldr	r1, [pc, #120]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fc48:	4613      	mov	r3, r2
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	4413      	add	r3, r2
 800fc4e:	00db      	lsls	r3, r3, #3
 800fc50:	440b      	add	r3, r1
 800fc52:	3314      	adds	r3, #20
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d006      	beq.n	800fc68 <etharp_find_entry+0x27c>
 800fc5a:	4b1a      	ldr	r3, [pc, #104]	; (800fcc4 <etharp_find_entry+0x2d8>)
 800fc5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fc60:	491d      	ldr	r1, [pc, #116]	; (800fcd8 <etharp_find_entry+0x2ec>)
 800fc62:	481a      	ldr	r0, [pc, #104]	; (800fccc <etharp_find_entry+0x2e0>)
 800fc64:	f002 f9aa 	bl	8011fbc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00b      	beq.n	800fc86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fc6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6819      	ldr	r1, [r3, #0]
 800fc76:	4812      	ldr	r0, [pc, #72]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fc78:	4613      	mov	r3, r2
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	4413      	add	r3, r2
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	4403      	add	r3, r0
 800fc82:	3304      	adds	r3, #4
 800fc84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fc86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc8a:	490d      	ldr	r1, [pc, #52]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	4413      	add	r3, r2
 800fc92:	00db      	lsls	r3, r3, #3
 800fc94:	440b      	add	r3, r1
 800fc96:	3312      	adds	r3, #18
 800fc98:	2200      	movs	r2, #0
 800fc9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fc9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fca0:	4907      	ldr	r1, [pc, #28]	; (800fcc0 <etharp_find_entry+0x2d4>)
 800fca2:	4613      	mov	r3, r2
 800fca4:	005b      	lsls	r3, r3, #1
 800fca6:	4413      	add	r3, r2
 800fca8:	00db      	lsls	r3, r3, #3
 800fcaa:	440b      	add	r3, r1
 800fcac:	3308      	adds	r3, #8
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fcb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3728      	adds	r7, #40	; 0x28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200068c0 	.word	0x200068c0
 800fcc4:	080157c4 	.word	0x080157c4
 800fcc8:	080157fc 	.word	0x080157fc
 800fccc:	0801583c 	.word	0x0801583c
 800fcd0:	08015864 	.word	0x08015864
 800fcd4:	0801587c 	.word	0x0801587c
 800fcd8:	08015890 	.word	0x08015890

0800fcdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b088      	sub	sp, #32
 800fce0:	af02      	add	r7, sp, #8
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
 800fce8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcf0:	2b06      	cmp	r3, #6
 800fcf2:	d006      	beq.n	800fd02 <etharp_update_arp_entry+0x26>
 800fcf4:	4b48      	ldr	r3, [pc, #288]	; (800fe18 <etharp_update_arp_entry+0x13c>)
 800fcf6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fcfa:	4948      	ldr	r1, [pc, #288]	; (800fe1c <etharp_update_arp_entry+0x140>)
 800fcfc:	4848      	ldr	r0, [pc, #288]	; (800fe20 <etharp_update_arp_entry+0x144>)
 800fcfe:	f002 f95d 	bl	8011fbc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d012      	beq.n	800fd2e <etharp_update_arp_entry+0x52>
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00e      	beq.n	800fd2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68f9      	ldr	r1, [r7, #12]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f001 f920 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 800fd1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d105      	bne.n	800fd2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd2a:	2be0      	cmp	r3, #224	; 0xe0
 800fd2c:	d102      	bne.n	800fd34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fd2e:	f06f 030f 	mvn.w	r3, #15
 800fd32:	e06c      	b.n	800fe0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fd34:	78fb      	ldrb	r3, [r7, #3]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	4619      	mov	r1, r3
 800fd3a:	68b8      	ldr	r0, [r7, #8]
 800fd3c:	f7ff fe56 	bl	800f9ec <etharp_find_entry>
 800fd40:	4603      	mov	r3, r0
 800fd42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fd44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	da02      	bge.n	800fd52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fd4c:	8afb      	ldrh	r3, [r7, #22]
 800fd4e:	b25b      	sxtb	r3, r3
 800fd50:	e05d      	b.n	800fe0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fd52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd56:	4933      	ldr	r1, [pc, #204]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fd58:	4613      	mov	r3, r2
 800fd5a:	005b      	lsls	r3, r3, #1
 800fd5c:	4413      	add	r3, r2
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	440b      	add	r3, r1
 800fd62:	3314      	adds	r3, #20
 800fd64:	2202      	movs	r2, #2
 800fd66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fd68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd6c:	492d      	ldr	r1, [pc, #180]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fd6e:	4613      	mov	r3, r2
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	4413      	add	r3, r2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	440b      	add	r3, r1
 800fd78:	3308      	adds	r3, #8
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fd7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd82:	4613      	mov	r3, r2
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	4413      	add	r3, r2
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	4a25      	ldr	r2, [pc, #148]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fd8e:	4413      	add	r3, r2
 800fd90:	3304      	adds	r3, #4
 800fd92:	2206      	movs	r2, #6
 800fd94:	6879      	ldr	r1, [r7, #4]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f002 f8fa 	bl	8011f90 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fd9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fda0:	4920      	ldr	r1, [pc, #128]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fda2:	4613      	mov	r3, r2
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	4413      	add	r3, r2
 800fda8:	00db      	lsls	r3, r3, #3
 800fdaa:	440b      	add	r3, r1
 800fdac:	3312      	adds	r3, #18
 800fdae:	2200      	movs	r2, #0
 800fdb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fdb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdb6:	491b      	ldr	r1, [pc, #108]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fdb8:	4613      	mov	r3, r2
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	4413      	add	r3, r2
 800fdbe:	00db      	lsls	r3, r3, #3
 800fdc0:	440b      	add	r3, r1
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d021      	beq.n	800fe0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fdc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdcc:	4915      	ldr	r1, [pc, #84]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fdce:	4613      	mov	r3, r2
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	4413      	add	r3, r2
 800fdd4:	00db      	lsls	r3, r3, #3
 800fdd6:	440b      	add	r3, r1
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fde0:	4910      	ldr	r1, [pc, #64]	; (800fe24 <etharp_update_arp_entry+0x148>)
 800fde2:	4613      	mov	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	4413      	add	r3, r2
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	440b      	add	r3, r1
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800fdf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6939      	ldr	r1, [r7, #16]
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f002 f849 	bl	8011e98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fe06:	6938      	ldr	r0, [r7, #16]
 800fe08:	f7f6 fdc6 	bl	8006998 <pbuf_free>
  }
  return ERR_OK;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3718      	adds	r7, #24
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	080157c4 	.word	0x080157c4
 800fe1c:	080158bc 	.word	0x080158bc
 800fe20:	0801583c 	.word	0x0801583c
 800fe24:	200068c0 	.word	0x200068c0

0800fe28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe30:	2300      	movs	r3, #0
 800fe32:	60fb      	str	r3, [r7, #12]
 800fe34:	e01e      	b.n	800fe74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fe36:	4913      	ldr	r1, [pc, #76]	; (800fe84 <etharp_cleanup_netif+0x5c>)
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	4413      	add	r3, r2
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	440b      	add	r3, r1
 800fe44:	3314      	adds	r3, #20
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fe4a:	7afb      	ldrb	r3, [r7, #11]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00e      	beq.n	800fe6e <etharp_cleanup_netif+0x46>
 800fe50:	490c      	ldr	r1, [pc, #48]	; (800fe84 <etharp_cleanup_netif+0x5c>)
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	4613      	mov	r3, r2
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	4413      	add	r3, r2
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	440b      	add	r3, r1
 800fe5e:	3308      	adds	r3, #8
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d102      	bne.n	800fe6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f7ff fce5 	bl	800f838 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	3301      	adds	r3, #1
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b09      	cmp	r3, #9
 800fe78:	dddd      	ble.n	800fe36 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fe7a:	bf00      	nop
 800fe7c:	bf00      	nop
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	200068c0 	.word	0x200068c0

0800fe88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fe88:	b5b0      	push	{r4, r5, r7, lr}
 800fe8a:	b08a      	sub	sp, #40	; 0x28
 800fe8c:	af04      	add	r7, sp, #16
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d107      	bne.n	800fea8 <etharp_input+0x20>
 800fe98:	4b3f      	ldr	r3, [pc, #252]	; (800ff98 <etharp_input+0x110>)
 800fe9a:	f240 228a 	movw	r2, #650	; 0x28a
 800fe9e:	493f      	ldr	r1, [pc, #252]	; (800ff9c <etharp_input+0x114>)
 800fea0:	483f      	ldr	r0, [pc, #252]	; (800ffa0 <etharp_input+0x118>)
 800fea2:	f002 f88b 	bl	8011fbc <iprintf>
 800fea6:	e074      	b.n	800ff92 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feb8:	d10c      	bne.n	800fed4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800febe:	2b06      	cmp	r3, #6
 800fec0:	d108      	bne.n	800fed4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fec6:	2b04      	cmp	r3, #4
 800fec8:	d104      	bne.n	800fed4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	885b      	ldrh	r3, [r3, #2]
 800fece:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fed0:	2b08      	cmp	r3, #8
 800fed2:	d003      	beq.n	800fedc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7f6 fd5f 	bl	8006998 <pbuf_free>
    return;
 800feda:	e05a      	b.n	800ff92 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	330e      	adds	r3, #14
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	3318      	adds	r3, #24
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	3304      	adds	r3, #4
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d102      	bne.n	800fefc <etharp_input+0x74>
    for_us = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	75fb      	strb	r3, [r7, #23]
 800fefa:	e009      	b.n	800ff10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	3304      	adds	r3, #4
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	bf0c      	ite	eq
 800ff08:	2301      	moveq	r3, #1
 800ff0a:	2300      	movne	r3, #0
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	f103 0208 	add.w	r2, r3, #8
 800ff16:	7dfb      	ldrb	r3, [r7, #23]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <etharp_input+0x98>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <etharp_input+0x9a>
 800ff20:	2302      	movs	r3, #2
 800ff22:	f107 010c 	add.w	r1, r7, #12
 800ff26:	6838      	ldr	r0, [r7, #0]
 800ff28:	f7ff fed8 	bl	800fcdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	88db      	ldrh	r3, [r3, #6]
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff36:	d003      	beq.n	800ff40 <etharp_input+0xb8>
 800ff38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff3c:	d01e      	beq.n	800ff7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ff3e:	e025      	b.n	800ff8c <etharp_input+0x104>
      if (for_us) {
 800ff40:	7dfb      	ldrb	r3, [r7, #23]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d021      	beq.n	800ff8a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ff5c:	693a      	ldr	r2, [r7, #16]
 800ff5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ff60:	2102      	movs	r1, #2
 800ff62:	9103      	str	r1, [sp, #12]
 800ff64:	f107 010c 	add.w	r1, r7, #12
 800ff68:	9102      	str	r1, [sp, #8]
 800ff6a:	9201      	str	r2, [sp, #4]
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	462b      	mov	r3, r5
 800ff70:	4622      	mov	r2, r4
 800ff72:	4601      	mov	r1, r0
 800ff74:	6838      	ldr	r0, [r7, #0]
 800ff76:	f000 faef 	bl	8010558 <etharp_raw>
      break;
 800ff7a:	e006      	b.n	800ff8a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800ff7c:	f107 030c 	add.w	r3, r7, #12
 800ff80:	4619      	mov	r1, r3
 800ff82:	6838      	ldr	r0, [r7, #0]
 800ff84:	f7fe f9fc 	bl	800e380 <dhcp_arp_reply>
      break;
 800ff88:	e000      	b.n	800ff8c <etharp_input+0x104>
      break;
 800ff8a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7f6 fd03 	bl	8006998 <pbuf_free>
}
 800ff92:	3718      	adds	r7, #24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bdb0      	pop	{r4, r5, r7, pc}
 800ff98:	080157c4 	.word	0x080157c4
 800ff9c:	08015914 	.word	0x08015914
 800ffa0:	0801583c 	.word	0x0801583c

0800ffa4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	4613      	mov	r3, r2
 800ffb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ffb2:	79fa      	ldrb	r2, [r7, #7]
 800ffb4:	4944      	ldr	r1, [pc, #272]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 800ffb6:	4613      	mov	r3, r2
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	4413      	add	r3, r2
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	440b      	add	r3, r1
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d806      	bhi.n	800ffd6 <etharp_output_to_arp_index+0x32>
 800ffc8:	4b40      	ldr	r3, [pc, #256]	; (80100cc <etharp_output_to_arp_index+0x128>)
 800ffca:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ffce:	4940      	ldr	r1, [pc, #256]	; (80100d0 <etharp_output_to_arp_index+0x12c>)
 800ffd0:	4840      	ldr	r0, [pc, #256]	; (80100d4 <etharp_output_to_arp_index+0x130>)
 800ffd2:	f001 fff3 	bl	8011fbc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ffd6:	79fa      	ldrb	r2, [r7, #7]
 800ffd8:	493b      	ldr	r1, [pc, #236]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 800ffda:	4613      	mov	r3, r2
 800ffdc:	005b      	lsls	r3, r3, #1
 800ffde:	4413      	add	r3, r2
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3314      	adds	r3, #20
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	d153      	bne.n	8010094 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ffec:	79fa      	ldrb	r2, [r7, #7]
 800ffee:	4936      	ldr	r1, [pc, #216]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 800fff0:	4613      	mov	r3, r2
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	4413      	add	r3, r2
 800fff6:	00db      	lsls	r3, r3, #3
 800fff8:	440b      	add	r3, r1
 800fffa:	3312      	adds	r3, #18
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010002:	d919      	bls.n	8010038 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010004:	79fa      	ldrb	r2, [r7, #7]
 8010006:	4613      	mov	r3, r2
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	4413      	add	r3, r2
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	4a2e      	ldr	r2, [pc, #184]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 8010010:	4413      	add	r3, r2
 8010012:	3304      	adds	r3, #4
 8010014:	4619      	mov	r1, r3
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f000 fb4c 	bl	80106b4 <etharp_request>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d138      	bne.n	8010094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010022:	79fa      	ldrb	r2, [r7, #7]
 8010024:	4928      	ldr	r1, [pc, #160]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	440b      	add	r3, r1
 8010030:	3314      	adds	r3, #20
 8010032:	2203      	movs	r2, #3
 8010034:	701a      	strb	r2, [r3, #0]
 8010036:	e02d      	b.n	8010094 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010038:	79fa      	ldrb	r2, [r7, #7]
 801003a:	4923      	ldr	r1, [pc, #140]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 801003c:	4613      	mov	r3, r2
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	4413      	add	r3, r2
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	440b      	add	r3, r1
 8010046:	3312      	adds	r3, #18
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801004e:	d321      	bcc.n	8010094 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010050:	79fa      	ldrb	r2, [r7, #7]
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	00db      	lsls	r3, r3, #3
 801005a:	4a1b      	ldr	r2, [pc, #108]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 801005c:	4413      	add	r3, r2
 801005e:	1d19      	adds	r1, r3, #4
 8010060:	79fa      	ldrb	r2, [r7, #7]
 8010062:	4613      	mov	r3, r2
 8010064:	005b      	lsls	r3, r3, #1
 8010066:	4413      	add	r3, r2
 8010068:	00db      	lsls	r3, r3, #3
 801006a:	3308      	adds	r3, #8
 801006c:	4a16      	ldr	r2, [pc, #88]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 801006e:	4413      	add	r3, r2
 8010070:	3304      	adds	r3, #4
 8010072:	461a      	mov	r2, r3
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f000 fafb 	bl	8010670 <etharp_request_dst>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d109      	bne.n	8010094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010080:	79fa      	ldrb	r2, [r7, #7]
 8010082:	4911      	ldr	r1, [pc, #68]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 8010084:	4613      	mov	r3, r2
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	4413      	add	r3, r2
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	440b      	add	r3, r1
 801008e:	3314      	adds	r3, #20
 8010090:	2203      	movs	r2, #3
 8010092:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801009a:	79fa      	ldrb	r2, [r7, #7]
 801009c:	4613      	mov	r3, r2
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	4413      	add	r3, r2
 80100a2:	00db      	lsls	r3, r3, #3
 80100a4:	3308      	adds	r3, #8
 80100a6:	4a08      	ldr	r2, [pc, #32]	; (80100c8 <etharp_output_to_arp_index+0x124>)
 80100a8:	4413      	add	r3, r2
 80100aa:	3304      	adds	r3, #4
 80100ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100b0:	9200      	str	r2, [sp, #0]
 80100b2:	460a      	mov	r2, r1
 80100b4:	68b9      	ldr	r1, [r7, #8]
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f001 feee 	bl	8011e98 <ethernet_output>
 80100bc:	4603      	mov	r3, r0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	200068c0 	.word	0x200068c0
 80100cc:	080157c4 	.word	0x080157c4
 80100d0:	08015934 	.word	0x08015934
 80100d4:	0801583c 	.word	0x0801583c

080100d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af02      	add	r7, sp, #8
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d106      	bne.n	80100fc <etharp_output+0x24>
 80100ee:	4b73      	ldr	r3, [pc, #460]	; (80102bc <etharp_output+0x1e4>)
 80100f0:	f240 321e 	movw	r2, #798	; 0x31e
 80100f4:	4972      	ldr	r1, [pc, #456]	; (80102c0 <etharp_output+0x1e8>)
 80100f6:	4873      	ldr	r0, [pc, #460]	; (80102c4 <etharp_output+0x1ec>)
 80100f8:	f001 ff60 	bl	8011fbc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <etharp_output+0x38>
 8010102:	4b6e      	ldr	r3, [pc, #440]	; (80102bc <etharp_output+0x1e4>)
 8010104:	f240 321f 	movw	r2, #799	; 0x31f
 8010108:	496f      	ldr	r1, [pc, #444]	; (80102c8 <etharp_output+0x1f0>)
 801010a:	486e      	ldr	r0, [pc, #440]	; (80102c4 <etharp_output+0x1ec>)
 801010c:	f001 ff56 	bl	8011fbc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <etharp_output+0x4c>
 8010116:	4b69      	ldr	r3, [pc, #420]	; (80102bc <etharp_output+0x1e4>)
 8010118:	f44f 7248 	mov.w	r2, #800	; 0x320
 801011c:	496b      	ldr	r1, [pc, #428]	; (80102cc <etharp_output+0x1f4>)
 801011e:	4869      	ldr	r0, [pc, #420]	; (80102c4 <etharp_output+0x1ec>)
 8010120:	f001 ff4c 	bl	8011fbc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68f9      	ldr	r1, [r7, #12]
 801012a:	4618      	mov	r0, r3
 801012c:	f000 ff16 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d002      	beq.n	801013c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010136:	4b66      	ldr	r3, [pc, #408]	; (80102d0 <etharp_output+0x1f8>)
 8010138:	61fb      	str	r3, [r7, #28]
 801013a:	e0af      	b.n	801029c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010144:	2be0      	cmp	r3, #224	; 0xe0
 8010146:	d118      	bne.n	801017a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010148:	2301      	movs	r3, #1
 801014a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801014c:	2300      	movs	r3, #0
 801014e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010150:	235e      	movs	r3, #94	; 0x5e
 8010152:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	3301      	adds	r3, #1
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801015e:	b2db      	uxtb	r3, r3
 8010160:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	3302      	adds	r3, #2
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	3303      	adds	r3, #3
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010172:	f107 0310 	add.w	r3, r7, #16
 8010176:	61fb      	str	r3, [r7, #28]
 8010178:	e090      	b.n	801029c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3304      	adds	r3, #4
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	405a      	eors	r2, r3
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	3308      	adds	r3, #8
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4013      	ands	r3, r2
 801018e:	2b00      	cmp	r3, #0
 8010190:	d012      	beq.n	80101b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010198:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801019c:	4293      	cmp	r3, r2
 801019e:	d00b      	beq.n	80101b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	330c      	adds	r3, #12
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d003      	beq.n	80101b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	330c      	adds	r3, #12
 80101ae:	61bb      	str	r3, [r7, #24]
 80101b0:	e002      	b.n	80101b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80101b2:	f06f 0303 	mvn.w	r3, #3
 80101b6:	e07d      	b.n	80102b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80101b8:	4b46      	ldr	r3, [pc, #280]	; (80102d4 <etharp_output+0x1fc>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	4619      	mov	r1, r3
 80101be:	4a46      	ldr	r2, [pc, #280]	; (80102d8 <etharp_output+0x200>)
 80101c0:	460b      	mov	r3, r1
 80101c2:	005b      	lsls	r3, r3, #1
 80101c4:	440b      	add	r3, r1
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	4413      	add	r3, r2
 80101ca:	3314      	adds	r3, #20
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d925      	bls.n	801021e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80101d2:	4b40      	ldr	r3, [pc, #256]	; (80102d4 <etharp_output+0x1fc>)
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	4619      	mov	r1, r3
 80101d8:	4a3f      	ldr	r2, [pc, #252]	; (80102d8 <etharp_output+0x200>)
 80101da:	460b      	mov	r3, r1
 80101dc:	005b      	lsls	r3, r3, #1
 80101de:	440b      	add	r3, r1
 80101e0:	00db      	lsls	r3, r3, #3
 80101e2:	4413      	add	r3, r2
 80101e4:	3308      	adds	r3, #8
 80101e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d117      	bne.n	801021e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	4b38      	ldr	r3, [pc, #224]	; (80102d4 <etharp_output+0x1fc>)
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	4937      	ldr	r1, [pc, #220]	; (80102d8 <etharp_output+0x200>)
 80101fa:	4603      	mov	r3, r0
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4403      	add	r3, r0
 8010200:	00db      	lsls	r3, r3, #3
 8010202:	440b      	add	r3, r1
 8010204:	3304      	adds	r3, #4
 8010206:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010208:	429a      	cmp	r2, r3
 801020a:	d108      	bne.n	801021e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801020c:	4b31      	ldr	r3, [pc, #196]	; (80102d4 <etharp_output+0x1fc>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	68b9      	ldr	r1, [r7, #8]
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f7ff fec5 	bl	800ffa4 <etharp_output_to_arp_index>
 801021a:	4603      	mov	r3, r0
 801021c:	e04a      	b.n	80102b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801021e:	2300      	movs	r3, #0
 8010220:	75fb      	strb	r3, [r7, #23]
 8010222:	e031      	b.n	8010288 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010224:	7dfa      	ldrb	r2, [r7, #23]
 8010226:	492c      	ldr	r1, [pc, #176]	; (80102d8 <etharp_output+0x200>)
 8010228:	4613      	mov	r3, r2
 801022a:	005b      	lsls	r3, r3, #1
 801022c:	4413      	add	r3, r2
 801022e:	00db      	lsls	r3, r3, #3
 8010230:	440b      	add	r3, r1
 8010232:	3314      	adds	r3, #20
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	2b01      	cmp	r3, #1
 8010238:	d923      	bls.n	8010282 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801023a:	7dfa      	ldrb	r2, [r7, #23]
 801023c:	4926      	ldr	r1, [pc, #152]	; (80102d8 <etharp_output+0x200>)
 801023e:	4613      	mov	r3, r2
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	00db      	lsls	r3, r3, #3
 8010246:	440b      	add	r3, r1
 8010248:	3308      	adds	r3, #8
 801024a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	429a      	cmp	r2, r3
 8010250:	d117      	bne.n	8010282 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	6819      	ldr	r1, [r3, #0]
 8010256:	7dfa      	ldrb	r2, [r7, #23]
 8010258:	481f      	ldr	r0, [pc, #124]	; (80102d8 <etharp_output+0x200>)
 801025a:	4613      	mov	r3, r2
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	4413      	add	r3, r2
 8010260:	00db      	lsls	r3, r3, #3
 8010262:	4403      	add	r3, r0
 8010264:	3304      	adds	r3, #4
 8010266:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010268:	4299      	cmp	r1, r3
 801026a:	d10a      	bne.n	8010282 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801026c:	4a19      	ldr	r2, [pc, #100]	; (80102d4 <etharp_output+0x1fc>)
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	461a      	mov	r2, r3
 8010276:	68b9      	ldr	r1, [r7, #8]
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f7ff fe93 	bl	800ffa4 <etharp_output_to_arp_index>
 801027e:	4603      	mov	r3, r0
 8010280:	e018      	b.n	80102b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	3301      	adds	r3, #1
 8010286:	75fb      	strb	r3, [r7, #23]
 8010288:	7dfb      	ldrb	r3, [r7, #23]
 801028a:	2b09      	cmp	r3, #9
 801028c:	d9ca      	bls.n	8010224 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	69b9      	ldr	r1, [r7, #24]
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f000 f822 	bl	80102dc <etharp_query>
 8010298:	4603      	mov	r3, r0
 801029a:	e00b      	b.n	80102b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80102a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	68b9      	ldr	r1, [r7, #8]
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f001 fdf3 	bl	8011e98 <ethernet_output>
 80102b2:	4603      	mov	r3, r0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3720      	adds	r7, #32
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	080157c4 	.word	0x080157c4
 80102c0:	08015914 	.word	0x08015914
 80102c4:	0801583c 	.word	0x0801583c
 80102c8:	08015964 	.word	0x08015964
 80102cc:	08015904 	.word	0x08015904
 80102d0:	08015f88 	.word	0x08015f88
 80102d4:	200069b0 	.word	0x200069b0
 80102d8:	200068c0 	.word	0x200068c0

080102dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b08c      	sub	sp, #48	; 0x30
 80102e0:	af02      	add	r7, sp, #8
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	332a      	adds	r3, #42	; 0x2a
 80102ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80102ee:	23ff      	movs	r3, #255	; 0xff
 80102f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80102f4:	2300      	movs	r3, #0
 80102f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68f9      	ldr	r1, [r7, #12]
 80102fe:	4618      	mov	r0, r3
 8010300:	f000 fe2c 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d10c      	bne.n	8010324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010312:	2be0      	cmp	r3, #224	; 0xe0
 8010314:	d006      	beq.n	8010324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d003      	beq.n	8010324 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d102      	bne.n	801032a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010324:	f06f 030f 	mvn.w	r3, #15
 8010328:	e101      	b.n	801052e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	2101      	movs	r1, #1
 801032e:	68b8      	ldr	r0, [r7, #8]
 8010330:	f7ff fb5c 	bl	800f9ec <etharp_find_entry>
 8010334:	4603      	mov	r3, r0
 8010336:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801033c:	2b00      	cmp	r3, #0
 801033e:	da02      	bge.n	8010346 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010340:	8a7b      	ldrh	r3, [r7, #18]
 8010342:	b25b      	sxtb	r3, r3
 8010344:	e0f3      	b.n	801052e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010346:	8a7b      	ldrh	r3, [r7, #18]
 8010348:	2b7e      	cmp	r3, #126	; 0x7e
 801034a:	d906      	bls.n	801035a <etharp_query+0x7e>
 801034c:	4b7a      	ldr	r3, [pc, #488]	; (8010538 <etharp_query+0x25c>)
 801034e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010352:	497a      	ldr	r1, [pc, #488]	; (801053c <etharp_query+0x260>)
 8010354:	487a      	ldr	r0, [pc, #488]	; (8010540 <etharp_query+0x264>)
 8010356:	f001 fe31 	bl	8011fbc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801035a:	8a7b      	ldrh	r3, [r7, #18]
 801035c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801035e:	7c7a      	ldrb	r2, [r7, #17]
 8010360:	4978      	ldr	r1, [pc, #480]	; (8010544 <etharp_query+0x268>)
 8010362:	4613      	mov	r3, r2
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4413      	add	r3, r2
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	440b      	add	r3, r1
 801036c:	3314      	adds	r3, #20
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d115      	bne.n	80103a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8010374:	2301      	movs	r3, #1
 8010376:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010378:	7c7a      	ldrb	r2, [r7, #17]
 801037a:	4972      	ldr	r1, [pc, #456]	; (8010544 <etharp_query+0x268>)
 801037c:	4613      	mov	r3, r2
 801037e:	005b      	lsls	r3, r3, #1
 8010380:	4413      	add	r3, r2
 8010382:	00db      	lsls	r3, r3, #3
 8010384:	440b      	add	r3, r1
 8010386:	3314      	adds	r3, #20
 8010388:	2201      	movs	r2, #1
 801038a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801038c:	7c7a      	ldrb	r2, [r7, #17]
 801038e:	496d      	ldr	r1, [pc, #436]	; (8010544 <etharp_query+0x268>)
 8010390:	4613      	mov	r3, r2
 8010392:	005b      	lsls	r3, r3, #1
 8010394:	4413      	add	r3, r2
 8010396:	00db      	lsls	r3, r3, #3
 8010398:	440b      	add	r3, r1
 801039a:	3308      	adds	r3, #8
 801039c:	68fa      	ldr	r2, [r7, #12]
 801039e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80103a0:	7c7a      	ldrb	r2, [r7, #17]
 80103a2:	4968      	ldr	r1, [pc, #416]	; (8010544 <etharp_query+0x268>)
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	440b      	add	r3, r1
 80103ae:	3314      	adds	r3, #20
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d011      	beq.n	80103da <etharp_query+0xfe>
 80103b6:	7c7a      	ldrb	r2, [r7, #17]
 80103b8:	4962      	ldr	r1, [pc, #392]	; (8010544 <etharp_query+0x268>)
 80103ba:	4613      	mov	r3, r2
 80103bc:	005b      	lsls	r3, r3, #1
 80103be:	4413      	add	r3, r2
 80103c0:	00db      	lsls	r3, r3, #3
 80103c2:	440b      	add	r3, r1
 80103c4:	3314      	adds	r3, #20
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d806      	bhi.n	80103da <etharp_query+0xfe>
 80103cc:	4b5a      	ldr	r3, [pc, #360]	; (8010538 <etharp_query+0x25c>)
 80103ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80103d2:	495d      	ldr	r1, [pc, #372]	; (8010548 <etharp_query+0x26c>)
 80103d4:	485a      	ldr	r0, [pc, #360]	; (8010540 <etharp_query+0x264>)
 80103d6:	f001 fdf1 	bl	8011fbc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80103da:	6a3b      	ldr	r3, [r7, #32]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d102      	bne.n	80103e6 <etharp_query+0x10a>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d10c      	bne.n	8010400 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80103e6:	68b9      	ldr	r1, [r7, #8]
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f000 f963 	bl	80106b4 <etharp_request>
 80103ee:	4603      	mov	r3, r0
 80103f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d102      	bne.n	8010400 <etharp_query+0x124>
      return result;
 80103fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103fe:	e096      	b.n	801052e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <etharp_query+0x138>
 8010406:	4b4c      	ldr	r3, [pc, #304]	; (8010538 <etharp_query+0x25c>)
 8010408:	f240 32e1 	movw	r2, #993	; 0x3e1
 801040c:	494f      	ldr	r1, [pc, #316]	; (801054c <etharp_query+0x270>)
 801040e:	484c      	ldr	r0, [pc, #304]	; (8010540 <etharp_query+0x264>)
 8010410:	f001 fdd4 	bl	8011fbc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010414:	7c7a      	ldrb	r2, [r7, #17]
 8010416:	494b      	ldr	r1, [pc, #300]	; (8010544 <etharp_query+0x268>)
 8010418:	4613      	mov	r3, r2
 801041a:	005b      	lsls	r3, r3, #1
 801041c:	4413      	add	r3, r2
 801041e:	00db      	lsls	r3, r3, #3
 8010420:	440b      	add	r3, r1
 8010422:	3314      	adds	r3, #20
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d917      	bls.n	801045a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801042a:	4a49      	ldr	r2, [pc, #292]	; (8010550 <etharp_query+0x274>)
 801042c:	7c7b      	ldrb	r3, [r7, #17]
 801042e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010430:	7c7a      	ldrb	r2, [r7, #17]
 8010432:	4613      	mov	r3, r2
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	4413      	add	r3, r2
 8010438:	00db      	lsls	r3, r3, #3
 801043a:	3308      	adds	r3, #8
 801043c:	4a41      	ldr	r2, [pc, #260]	; (8010544 <etharp_query+0x268>)
 801043e:	4413      	add	r3, r2
 8010440:	3304      	adds	r3, #4
 8010442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010446:	9200      	str	r2, [sp, #0]
 8010448:	697a      	ldr	r2, [r7, #20]
 801044a:	6879      	ldr	r1, [r7, #4]
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f001 fd23 	bl	8011e98 <ethernet_output>
 8010452:	4603      	mov	r3, r0
 8010454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010458:	e067      	b.n	801052a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801045a:	7c7a      	ldrb	r2, [r7, #17]
 801045c:	4939      	ldr	r1, [pc, #228]	; (8010544 <etharp_query+0x268>)
 801045e:	4613      	mov	r3, r2
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4413      	add	r3, r2
 8010464:	00db      	lsls	r3, r3, #3
 8010466:	440b      	add	r3, r1
 8010468:	3314      	adds	r3, #20
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b01      	cmp	r3, #1
 801046e:	d15c      	bne.n	801052a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010478:	e01c      	b.n	80104b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	895a      	ldrh	r2, [r3, #10]
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	891b      	ldrh	r3, [r3, #8]
 8010482:	429a      	cmp	r2, r3
 8010484:	d10a      	bne.n	801049c <etharp_query+0x1c0>
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d006      	beq.n	801049c <etharp_query+0x1c0>
 801048e:	4b2a      	ldr	r3, [pc, #168]	; (8010538 <etharp_query+0x25c>)
 8010490:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010494:	492f      	ldr	r1, [pc, #188]	; (8010554 <etharp_query+0x278>)
 8010496:	482a      	ldr	r0, [pc, #168]	; (8010540 <etharp_query+0x264>)
 8010498:	f001 fd90 	bl	8011fbc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	7b1b      	ldrb	r3, [r3, #12]
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <etharp_query+0x1d2>
        copy_needed = 1;
 80104a8:	2301      	movs	r3, #1
 80104aa:	61bb      	str	r3, [r7, #24]
        break;
 80104ac:	e005      	b.n	80104ba <etharp_query+0x1de>
      }
      p = p->next;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1df      	bne.n	801047a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d007      	beq.n	80104d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80104c6:	200e      	movs	r0, #14
 80104c8:	f7f6 fcd2 	bl	8006e70 <pbuf_clone>
 80104cc:	61f8      	str	r0, [r7, #28]
 80104ce:	e004      	b.n	80104da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80104d4:	69f8      	ldr	r0, [r7, #28]
 80104d6:	f7f6 faff 	bl	8006ad8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d021      	beq.n	8010524 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80104e0:	7c7a      	ldrb	r2, [r7, #17]
 80104e2:	4918      	ldr	r1, [pc, #96]	; (8010544 <etharp_query+0x268>)
 80104e4:	4613      	mov	r3, r2
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	4413      	add	r3, r2
 80104ea:	00db      	lsls	r3, r3, #3
 80104ec:	440b      	add	r3, r1
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00a      	beq.n	801050a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80104f4:	7c7a      	ldrb	r2, [r7, #17]
 80104f6:	4913      	ldr	r1, [pc, #76]	; (8010544 <etharp_query+0x268>)
 80104f8:	4613      	mov	r3, r2
 80104fa:	005b      	lsls	r3, r3, #1
 80104fc:	4413      	add	r3, r2
 80104fe:	00db      	lsls	r3, r3, #3
 8010500:	440b      	add	r3, r1
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4618      	mov	r0, r3
 8010506:	f7f6 fa47 	bl	8006998 <pbuf_free>
      }
      arp_table[i].q = p;
 801050a:	7c7a      	ldrb	r2, [r7, #17]
 801050c:	490d      	ldr	r1, [pc, #52]	; (8010544 <etharp_query+0x268>)
 801050e:	4613      	mov	r3, r2
 8010510:	005b      	lsls	r3, r3, #1
 8010512:	4413      	add	r3, r2
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	440b      	add	r3, r1
 8010518:	69fa      	ldr	r2, [r7, #28]
 801051a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010522:	e002      	b.n	801052a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010524:	23ff      	movs	r3, #255	; 0xff
 8010526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801052a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801052e:	4618      	mov	r0, r3
 8010530:	3728      	adds	r7, #40	; 0x28
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	080157c4 	.word	0x080157c4
 801053c:	08015970 	.word	0x08015970
 8010540:	0801583c 	.word	0x0801583c
 8010544:	200068c0 	.word	0x200068c0
 8010548:	08015980 	.word	0x08015980
 801054c:	08015964 	.word	0x08015964
 8010550:	200069b0 	.word	0x200069b0
 8010554:	080159a8 	.word	0x080159a8

08010558 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08a      	sub	sp, #40	; 0x28
 801055c:	af02      	add	r7, sp, #8
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010566:	2300      	movs	r3, #0
 8010568:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d106      	bne.n	801057e <etharp_raw+0x26>
 8010570:	4b3a      	ldr	r3, [pc, #232]	; (801065c <etharp_raw+0x104>)
 8010572:	f240 4257 	movw	r2, #1111	; 0x457
 8010576:	493a      	ldr	r1, [pc, #232]	; (8010660 <etharp_raw+0x108>)
 8010578:	483a      	ldr	r0, [pc, #232]	; (8010664 <etharp_raw+0x10c>)
 801057a:	f001 fd1f 	bl	8011fbc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801057e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010582:	211c      	movs	r1, #28
 8010584:	200e      	movs	r0, #14
 8010586:	f7f5 ff23 	bl	80063d0 <pbuf_alloc>
 801058a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d102      	bne.n	8010598 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010592:	f04f 33ff 	mov.w	r3, #4294967295
 8010596:	e05d      	b.n	8010654 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	895b      	ldrh	r3, [r3, #10]
 801059c:	2b1b      	cmp	r3, #27
 801059e:	d806      	bhi.n	80105ae <etharp_raw+0x56>
 80105a0:	4b2e      	ldr	r3, [pc, #184]	; (801065c <etharp_raw+0x104>)
 80105a2:	f240 4262 	movw	r2, #1122	; 0x462
 80105a6:	4930      	ldr	r1, [pc, #192]	; (8010668 <etharp_raw+0x110>)
 80105a8:	482e      	ldr	r0, [pc, #184]	; (8010664 <etharp_raw+0x10c>)
 80105aa:	f001 fd07 	bl	8011fbc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80105b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f4 ff32 	bl	8005420 <lwip_htons>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105ca:	2b06      	cmp	r3, #6
 80105cc:	d006      	beq.n	80105dc <etharp_raw+0x84>
 80105ce:	4b23      	ldr	r3, [pc, #140]	; (801065c <etharp_raw+0x104>)
 80105d0:	f240 4269 	movw	r2, #1129	; 0x469
 80105d4:	4925      	ldr	r1, [pc, #148]	; (801066c <etharp_raw+0x114>)
 80105d6:	4823      	ldr	r0, [pc, #140]	; (8010664 <etharp_raw+0x10c>)
 80105d8:	f001 fcf0 	bl	8011fbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	3308      	adds	r3, #8
 80105e0:	2206      	movs	r2, #6
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f001 fcd3 	bl	8011f90 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	3312      	adds	r3, #18
 80105ee:	2206      	movs	r2, #6
 80105f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105f2:	4618      	mov	r0, r3
 80105f4:	f001 fccc 	bl	8011f90 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	330e      	adds	r3, #14
 80105fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105fe:	6812      	ldr	r2, [r2, #0]
 8010600:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	3318      	adds	r3, #24
 8010606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010608:	6812      	ldr	r2, [r2, #0]
 801060a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	2200      	movs	r2, #0
 8010610:	701a      	strb	r2, [r3, #0]
 8010612:	2200      	movs	r2, #0
 8010614:	f042 0201 	orr.w	r2, r2, #1
 8010618:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	2200      	movs	r2, #0
 801061e:	f042 0208 	orr.w	r2, r2, #8
 8010622:	709a      	strb	r2, [r3, #2]
 8010624:	2200      	movs	r2, #0
 8010626:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	2206      	movs	r2, #6
 801062c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	2204      	movs	r2, #4
 8010632:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010634:	f640 0306 	movw	r3, #2054	; 0x806
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68ba      	ldr	r2, [r7, #8]
 801063e:	69b9      	ldr	r1, [r7, #24]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f001 fc29 	bl	8011e98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010646:	69b8      	ldr	r0, [r7, #24]
 8010648:	f7f6 f9a6 	bl	8006998 <pbuf_free>
  p = NULL;
 801064c:	2300      	movs	r3, #0
 801064e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3720      	adds	r7, #32
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	080157c4 	.word	0x080157c4
 8010660:	08015914 	.word	0x08015914
 8010664:	0801583c 	.word	0x0801583c
 8010668:	080159c4 	.word	0x080159c4
 801066c:	080159f8 	.word	0x080159f8

08010670 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b088      	sub	sp, #32
 8010674:	af04      	add	r7, sp, #16
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801068c:	2201      	movs	r2, #1
 801068e:	9203      	str	r2, [sp, #12]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	9202      	str	r2, [sp, #8]
 8010694:	4a06      	ldr	r2, [pc, #24]	; (80106b0 <etharp_request_dst+0x40>)
 8010696:	9201      	str	r2, [sp, #4]
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4603      	mov	r3, r0
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	f7ff ff5a 	bl	8010558 <etharp_raw>
 80106a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	08015f90 	.word	0x08015f90

080106b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80106be:	4a05      	ldr	r2, [pc, #20]	; (80106d4 <etharp_request+0x20>)
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7ff ffd4 	bl	8010670 <etharp_request_dst>
 80106c8:	4603      	mov	r3, r0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	08015f88 	.word	0x08015f88

080106d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08e      	sub	sp, #56	; 0x38
 80106dc:	af04      	add	r7, sp, #16
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80106e2:	4b79      	ldr	r3, [pc, #484]	; (80108c8 <icmp_input+0x1f0>)
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f003 030f 	and.w	r3, r3, #15
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80106f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106fa:	2b13      	cmp	r3, #19
 80106fc:	f240 80cd 	bls.w	801089a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	895b      	ldrh	r3, [r3, #10]
 8010704:	2b03      	cmp	r3, #3
 8010706:	f240 80ca 	bls.w	801089e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010714:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010718:	2b00      	cmp	r3, #0
 801071a:	f000 80b7 	beq.w	801088c <icmp_input+0x1b4>
 801071e:	2b08      	cmp	r3, #8
 8010720:	f040 80b7 	bne.w	8010892 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010724:	4b69      	ldr	r3, [pc, #420]	; (80108cc <icmp_input+0x1f4>)
 8010726:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010728:	4b67      	ldr	r3, [pc, #412]	; (80108c8 <icmp_input+0x1f0>)
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010730:	2be0      	cmp	r3, #224	; 0xe0
 8010732:	f000 80bb 	beq.w	80108ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010736:	4b64      	ldr	r3, [pc, #400]	; (80108c8 <icmp_input+0x1f0>)
 8010738:	695b      	ldr	r3, [r3, #20]
 801073a:	4a63      	ldr	r2, [pc, #396]	; (80108c8 <icmp_input+0x1f0>)
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	4611      	mov	r1, r2
 8010740:	4618      	mov	r0, r3
 8010742:	f000 fc0b 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	f040 80b1 	bne.w	80108b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	891b      	ldrh	r3, [r3, #8]
 8010752:	2b07      	cmp	r3, #7
 8010754:	f240 80a5 	bls.w	80108a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801075a:	330e      	adds	r3, #14
 801075c:	4619      	mov	r1, r3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7f6 f884 	bl	800686c <pbuf_add_header>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d04b      	beq.n	8010802 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	891a      	ldrh	r2, [r3, #8]
 801076e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010770:	4413      	add	r3, r2
 8010772:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	891b      	ldrh	r3, [r3, #8]
 8010778:	8b7a      	ldrh	r2, [r7, #26]
 801077a:	429a      	cmp	r2, r3
 801077c:	f0c0 809a 	bcc.w	80108b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010780:	8b7b      	ldrh	r3, [r7, #26]
 8010782:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010786:	4619      	mov	r1, r3
 8010788:	200e      	movs	r0, #14
 801078a:	f7f5 fe21 	bl	80063d0 <pbuf_alloc>
 801078e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 8090 	beq.w	80108b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	895b      	ldrh	r3, [r3, #10]
 801079c:	461a      	mov	r2, r3
 801079e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107a0:	3308      	adds	r3, #8
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d203      	bcs.n	80107ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80107a6:	6978      	ldr	r0, [r7, #20]
 80107a8:	f7f6 f8f6 	bl	8006998 <pbuf_free>
          goto icmperr;
 80107ac:	e085      	b.n	80108ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107b6:	4618      	mov	r0, r3
 80107b8:	f001 fbea 	bl	8011f90 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80107bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107be:	4619      	mov	r1, r3
 80107c0:	6978      	ldr	r0, [r7, #20]
 80107c2:	f7f6 f863 	bl	800688c <pbuf_remove_header>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d009      	beq.n	80107e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80107cc:	4b40      	ldr	r3, [pc, #256]	; (80108d0 <icmp_input+0x1f8>)
 80107ce:	22b6      	movs	r2, #182	; 0xb6
 80107d0:	4940      	ldr	r1, [pc, #256]	; (80108d4 <icmp_input+0x1fc>)
 80107d2:	4841      	ldr	r0, [pc, #260]	; (80108d8 <icmp_input+0x200>)
 80107d4:	f001 fbf2 	bl	8011fbc <iprintf>
          pbuf_free(r);
 80107d8:	6978      	ldr	r0, [r7, #20]
 80107da:	f7f6 f8dd 	bl	8006998 <pbuf_free>
          goto icmperr;
 80107de:	e06c      	b.n	80108ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	6978      	ldr	r0, [r7, #20]
 80107e4:	f7f6 fa00 	bl	8006be8 <pbuf_copy>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d003      	beq.n	80107f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80107ee:	6978      	ldr	r0, [r7, #20]
 80107f0:	f7f6 f8d2 	bl	8006998 <pbuf_free>
          goto icmperr;
 80107f4:	e061      	b.n	80108ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7f6 f8ce 	bl	8006998 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	607b      	str	r3, [r7, #4]
 8010800:	e00f      	b.n	8010822 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010804:	330e      	adds	r3, #14
 8010806:	4619      	mov	r1, r3
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7f6 f83f 	bl	800688c <pbuf_remove_header>
 801080e:	4603      	mov	r3, r0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d006      	beq.n	8010822 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010814:	4b2e      	ldr	r3, [pc, #184]	; (80108d0 <icmp_input+0x1f8>)
 8010816:	22c7      	movs	r2, #199	; 0xc7
 8010818:	4930      	ldr	r1, [pc, #192]	; (80108dc <icmp_input+0x204>)
 801081a:	482f      	ldr	r0, [pc, #188]	; (80108d8 <icmp_input+0x200>)
 801081c:	f001 fbce 	bl	8011fbc <iprintf>
          goto icmperr;
 8010820:	e04b      	b.n	80108ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801082a:	4619      	mov	r1, r3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7f6 f81d 	bl	800686c <pbuf_add_header>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d12b      	bne.n	8010890 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010846:	4b20      	ldr	r3, [pc, #128]	; (80108c8 <icmp_input+0x1f0>)
 8010848:	691a      	ldr	r2, [r3, #16]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	2200      	movs	r2, #0
 8010852:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	2200      	movs	r2, #0
 8010858:	709a      	strb	r2, [r3, #2]
 801085a:	2200      	movs	r2, #0
 801085c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	22ff      	movs	r2, #255	; 0xff
 8010862:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2200      	movs	r2, #0
 8010868:	729a      	strb	r2, [r3, #10]
 801086a:	2200      	movs	r2, #0
 801086c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	9302      	str	r3, [sp, #8]
 8010872:	2301      	movs	r3, #1
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	2300      	movs	r3, #0
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	23ff      	movs	r3, #255	; 0xff
 801087c:	2200      	movs	r2, #0
 801087e:	69f9      	ldr	r1, [r7, #28]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fa93 	bl	8010dac <ip4_output_if>
 8010886:	4603      	mov	r3, r0
 8010888:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801088a:	e001      	b.n	8010890 <icmp_input+0x1b8>
      break;
 801088c:	bf00      	nop
 801088e:	e000      	b.n	8010892 <icmp_input+0x1ba>
      break;
 8010890:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7f6 f880 	bl	8006998 <pbuf_free>
  return;
 8010898:	e013      	b.n	80108c2 <icmp_input+0x1ea>
    goto lenerr;
 801089a:	bf00      	nop
 801089c:	e002      	b.n	80108a4 <icmp_input+0x1cc>
    goto lenerr;
 801089e:	bf00      	nop
 80108a0:	e000      	b.n	80108a4 <icmp_input+0x1cc>
        goto lenerr;
 80108a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7f6 f877 	bl	8006998 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108aa:	e00a      	b.n	80108c2 <icmp_input+0x1ea>
        goto icmperr;
 80108ac:	bf00      	nop
 80108ae:	e004      	b.n	80108ba <icmp_input+0x1e2>
        goto icmperr;
 80108b0:	bf00      	nop
 80108b2:	e002      	b.n	80108ba <icmp_input+0x1e2>
          goto icmperr;
 80108b4:	bf00      	nop
 80108b6:	e000      	b.n	80108ba <icmp_input+0x1e2>
          goto icmperr;
 80108b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f7f6 f86c 	bl	8006998 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80108c2:	3728      	adds	r7, #40	; 0x28
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	2000329c 	.word	0x2000329c
 80108cc:	200032b0 	.word	0x200032b0
 80108d0:	08015a3c 	.word	0x08015a3c
 80108d4:	08015a74 	.word	0x08015a74
 80108d8:	08015aac 	.word	0x08015aac
 80108dc:	08015ad4 	.word	0x08015ad4

080108e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	460b      	mov	r3, r1
 80108ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	461a      	mov	r2, r3
 80108f0:	2103      	movs	r1, #3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 f814 	bl	8010920 <icmp_send_response>
}
 80108f8:	bf00      	nop
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	460b      	mov	r3, r1
 801090a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	461a      	mov	r2, r3
 8010910:	210b      	movs	r1, #11
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f804 	bl	8010920 <icmp_send_response>
}
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b08c      	sub	sp, #48	; 0x30
 8010924:	af04      	add	r7, sp, #16
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	460b      	mov	r3, r1
 801092a:	70fb      	strb	r3, [r7, #3]
 801092c:	4613      	mov	r3, r2
 801092e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010930:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010934:	2124      	movs	r1, #36	; 0x24
 8010936:	2022      	movs	r0, #34	; 0x22
 8010938:	f7f5 fd4a 	bl	80063d0 <pbuf_alloc>
 801093c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d04c      	beq.n	80109de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	895b      	ldrh	r3, [r3, #10]
 8010948:	2b23      	cmp	r3, #35	; 0x23
 801094a:	d806      	bhi.n	801095a <icmp_send_response+0x3a>
 801094c:	4b26      	ldr	r3, [pc, #152]	; (80109e8 <icmp_send_response+0xc8>)
 801094e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010952:	4926      	ldr	r1, [pc, #152]	; (80109ec <icmp_send_response+0xcc>)
 8010954:	4826      	ldr	r0, [pc, #152]	; (80109f0 <icmp_send_response+0xd0>)
 8010956:	f001 fb31 	bl	8011fbc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	78fa      	ldrb	r2, [r7, #3]
 801096a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	78ba      	ldrb	r2, [r7, #2]
 8010970:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2200      	movs	r2, #0
 8010976:	711a      	strb	r2, [r3, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	2200      	movs	r2, #0
 8010980:	719a      	strb	r2, [r3, #6]
 8010982:	2200      	movs	r2, #0
 8010984:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f103 0008 	add.w	r0, r3, #8
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	221c      	movs	r2, #28
 8010994:	4619      	mov	r1, r3
 8010996:	f001 fafb 	bl	8011f90 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	68db      	ldr	r3, [r3, #12]
 801099e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80109a0:	f107 030c 	add.w	r3, r7, #12
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 f825 	bl	80109f4 <ip4_route>
 80109aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d011      	beq.n	80109d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	2200      	movs	r2, #0
 80109b6:	709a      	strb	r2, [r3, #2]
 80109b8:	2200      	movs	r2, #0
 80109ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80109bc:	f107 020c 	add.w	r2, r7, #12
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	9302      	str	r3, [sp, #8]
 80109c4:	2301      	movs	r3, #1
 80109c6:	9301      	str	r3, [sp, #4]
 80109c8:	2300      	movs	r3, #0
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	23ff      	movs	r3, #255	; 0xff
 80109ce:	2100      	movs	r1, #0
 80109d0:	69f8      	ldr	r0, [r7, #28]
 80109d2:	f000 f9eb 	bl	8010dac <ip4_output_if>
  }
  pbuf_free(q);
 80109d6:	69f8      	ldr	r0, [r7, #28]
 80109d8:	f7f5 ffde 	bl	8006998 <pbuf_free>
 80109dc:	e000      	b.n	80109e0 <icmp_send_response+0xc0>
    return;
 80109de:	bf00      	nop
}
 80109e0:	3720      	adds	r7, #32
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	08015a3c 	.word	0x08015a3c
 80109ec:	08015b08 	.word	0x08015b08
 80109f0:	08015aac 	.word	0x08015aac

080109f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b085      	sub	sp, #20
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80109fc:	4b33      	ldr	r3, [pc, #204]	; (8010acc <ip4_route+0xd8>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	60fb      	str	r3, [r7, #12]
 8010a02:	e036      	b.n	8010a72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a0a:	f003 0301 	and.w	r3, r3, #1
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d02b      	beq.n	8010a6c <ip4_route+0x78>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a1a:	089b      	lsrs	r3, r3, #2
 8010a1c:	f003 0301 	and.w	r3, r3, #1
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d022      	beq.n	8010a6c <ip4_route+0x78>
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3304      	adds	r3, #4
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d01d      	beq.n	8010a6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	3304      	adds	r3, #4
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	405a      	eors	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4013      	ands	r3, r2
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d101      	bne.n	8010a4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	e038      	b.n	8010abe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a52:	f003 0302 	and.w	r3, r3, #2
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d108      	bne.n	8010a6c <ip4_route+0x78>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	330c      	adds	r3, #12
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d101      	bne.n	8010a6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	e028      	b.n	8010abe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	60fb      	str	r3, [r7, #12]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d1c5      	bne.n	8010a04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010a78:	4b15      	ldr	r3, [pc, #84]	; (8010ad0 <ip4_route+0xdc>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d01a      	beq.n	8010ab6 <ip4_route+0xc2>
 8010a80:	4b13      	ldr	r3, [pc, #76]	; (8010ad0 <ip4_route+0xdc>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d012      	beq.n	8010ab6 <ip4_route+0xc2>
 8010a90:	4b0f      	ldr	r3, [pc, #60]	; (8010ad0 <ip4_route+0xdc>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00a      	beq.n	8010ab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010aa0:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <ip4_route+0xdc>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8010ab4:	d101      	bne.n	8010aba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e001      	b.n	8010abe <ip4_route+0xca>
  }

  return netif_default;
 8010aba:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <ip4_route+0xdc>)
 8010abc:	681b      	ldr	r3, [r3, #0]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	20006820 	.word	0x20006820
 8010ad0:	20006824 	.word	0x20006824

08010ad4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d016      	beq.n	8010b1a <ip4_input_accept+0x46>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	3304      	adds	r3, #4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d011      	beq.n	8010b1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010af6:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <ip4_input_accept+0x50>)
 8010af8:	695a      	ldr	r2, [r3, #20]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	3304      	adds	r3, #4
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d008      	beq.n	8010b16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010b04:	4b07      	ldr	r3, [pc, #28]	; (8010b24 <ip4_input_accept+0x50>)
 8010b06:	695b      	ldr	r3, [r3, #20]
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 fa26 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010b10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010b16:	2301      	movs	r3, #1
 8010b18:	e000      	b.n	8010b1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	2000329c 	.word	0x2000329c

08010b28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8010b32:	2301      	movs	r3, #1
 8010b34:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	091b      	lsrs	r3, r3, #4
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b04      	cmp	r3, #4
 8010b46:	d004      	beq.n	8010b52 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7f5 ff25 	bl	8006998 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e123      	b.n	8010d9a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	f003 030f 	and.w	r3, r3, #15
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	885b      	ldrh	r3, [r3, #2]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7f4 fc59 	bl	8005420 <lwip_htons>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	8a3a      	ldrh	r2, [r7, #16]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d204      	bcs.n	8010b86 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8010b7c:	8a3b      	ldrh	r3, [r7, #16]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7f5 fd83 	bl	800668c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	895b      	ldrh	r3, [r3, #10]
 8010b8a:	8a7a      	ldrh	r2, [r7, #18]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d807      	bhi.n	8010ba0 <ip4_input+0x78>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	891b      	ldrh	r3, [r3, #8]
 8010b94:	8a3a      	ldrh	r2, [r7, #16]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d802      	bhi.n	8010ba0 <ip4_input+0x78>
 8010b9a:	8a7b      	ldrh	r3, [r7, #18]
 8010b9c:	2b13      	cmp	r3, #19
 8010b9e:	d804      	bhi.n	8010baa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7f5 fef9 	bl	8006998 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e0f7      	b.n	8010d9a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	4a7d      	ldr	r2, [pc, #500]	; (8010da4 <ip4_input+0x27c>)
 8010bb0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	4a7b      	ldr	r2, [pc, #492]	; (8010da4 <ip4_input+0x27c>)
 8010bb8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010bba:	4b7a      	ldr	r3, [pc, #488]	; (8010da4 <ip4_input+0x27c>)
 8010bbc:	695b      	ldr	r3, [r3, #20]
 8010bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bc2:	2be0      	cmp	r3, #224	; 0xe0
 8010bc4:	d112      	bne.n	8010bec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010bcc:	f003 0301 	and.w	r3, r3, #1
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d007      	beq.n	8010be6 <ip4_input+0xbe>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	3304      	adds	r3, #4
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <ip4_input+0xbe>
      netif = inp;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	61bb      	str	r3, [r7, #24]
 8010be4:	e02a      	b.n	8010c3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	61bb      	str	r3, [r7, #24]
 8010bea:	e027      	b.n	8010c3c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010bec:	6838      	ldr	r0, [r7, #0]
 8010bee:	f7ff ff71 	bl	8010ad4 <ip4_input_accept>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <ip4_input+0xd6>
      netif = inp;
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	61bb      	str	r3, [r7, #24]
 8010bfc:	e01e      	b.n	8010c3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010c02:	4b68      	ldr	r3, [pc, #416]	; (8010da4 <ip4_input+0x27c>)
 8010c04:	695b      	ldr	r3, [r3, #20]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b7f      	cmp	r3, #127	; 0x7f
 8010c0a:	d017      	beq.n	8010c3c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010c0c:	4b66      	ldr	r3, [pc, #408]	; (8010da8 <ip4_input+0x280>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	61bb      	str	r3, [r7, #24]
 8010c12:	e00e      	b.n	8010c32 <ip4_input+0x10a>
          if (netif == inp) {
 8010c14:	69ba      	ldr	r2, [r7, #24]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d006      	beq.n	8010c2a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010c1c:	69b8      	ldr	r0, [r7, #24]
 8010c1e:	f7ff ff59 	bl	8010ad4 <ip4_input_accept>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d108      	bne.n	8010c3a <ip4_input+0x112>
 8010c28:	e000      	b.n	8010c2c <ip4_input+0x104>
            continue;
 8010c2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	61bb      	str	r3, [r7, #24]
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1ed      	bne.n	8010c14 <ip4_input+0xec>
 8010c38:	e000      	b.n	8010c3c <ip4_input+0x114>
            break;
 8010c3a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d111      	bne.n	8010c66 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	7a5b      	ldrb	r3, [r3, #9]
 8010c46:	2b11      	cmp	r3, #17
 8010c48:	d10d      	bne.n	8010c66 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010c4a:	8a7b      	ldrh	r3, [r7, #18]
 8010c4c:	69fa      	ldr	r2, [r7, #28]
 8010c4e:	4413      	add	r3, r2
 8010c50:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	885b      	ldrh	r3, [r3, #2]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8010c5c:	d103      	bne.n	8010c66 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d017      	beq.n	8010c9c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010c6c:	4b4d      	ldr	r3, [pc, #308]	; (8010da4 <ip4_input+0x27c>)
 8010c6e:	691b      	ldr	r3, [r3, #16]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d013      	beq.n	8010c9c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c74:	4b4b      	ldr	r3, [pc, #300]	; (8010da4 <ip4_input+0x27c>)
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	6839      	ldr	r1, [r7, #0]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 f96e 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d105      	bne.n	8010c92 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010c86:	4b47      	ldr	r3, [pc, #284]	; (8010da4 <ip4_input+0x27c>)
 8010c88:	691b      	ldr	r3, [r3, #16]
 8010c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c8e:	2be0      	cmp	r3, #224	; 0xe0
 8010c90:	d104      	bne.n	8010c9c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7f5 fe80 	bl	8006998 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e07e      	b.n	8010d9a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d104      	bne.n	8010cac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7f5 fe78 	bl	8006998 <pbuf_free>
    return ERR_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e076      	b.n	8010d9a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	88db      	ldrh	r3, [r3, #6]
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010cb8:	4013      	ands	r3, r2
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d00b      	beq.n	8010cd6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fd22 	bl	8011708 <ip4_reass>
 8010cc4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d101      	bne.n	8010cd0 <ip4_input+0x1a8>
      return ERR_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	e064      	b.n	8010d9a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010cd6:	4a33      	ldr	r2, [pc, #204]	; (8010da4 <ip4_input+0x27c>)
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010cdc:	4a31      	ldr	r2, [pc, #196]	; (8010da4 <ip4_input+0x27c>)
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010ce2:	4a30      	ldr	r2, [pc, #192]	; (8010da4 <ip4_input+0x27c>)
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	f003 030f 	and.w	r3, r3, #15
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	4b2a      	ldr	r3, [pc, #168]	; (8010da4 <ip4_input+0x27c>)
 8010cfa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010cfc:	8a7b      	ldrh	r3, [r7, #18]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f7f5 fdc3 	bl	800688c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	7a5b      	ldrb	r3, [r3, #9]
 8010d0a:	2b11      	cmp	r3, #17
 8010d0c:	d006      	beq.n	8010d1c <ip4_input+0x1f4>
 8010d0e:	2b11      	cmp	r3, #17
 8010d10:	dc13      	bgt.n	8010d3a <ip4_input+0x212>
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d00c      	beq.n	8010d30 <ip4_input+0x208>
 8010d16:	2b06      	cmp	r3, #6
 8010d18:	d005      	beq.n	8010d26 <ip4_input+0x1fe>
 8010d1a:	e00e      	b.n	8010d3a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7fc fb24 	bl	800d36c <udp_input>
        break;
 8010d24:	e026      	b.n	8010d74 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7f7 ff0d 	bl	8008b48 <tcp_input>
        break;
 8010d2e:	e021      	b.n	8010d74 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff fcd0 	bl	80106d8 <icmp_input>
        break;
 8010d38:	e01c      	b.n	8010d74 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d3a:	4b1a      	ldr	r3, [pc, #104]	; (8010da4 <ip4_input+0x27c>)
 8010d3c:	695b      	ldr	r3, [r3, #20]
 8010d3e:	69b9      	ldr	r1, [r7, #24]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f000 f90b 	bl	8010f5c <ip4_addr_isbroadcast_u32>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10f      	bne.n	8010d6c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010d4c:	4b15      	ldr	r3, [pc, #84]	; (8010da4 <ip4_input+0x27c>)
 8010d4e:	695b      	ldr	r3, [r3, #20]
 8010d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d54:	2be0      	cmp	r3, #224	; 0xe0
 8010d56:	d009      	beq.n	8010d6c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010d58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7f5 fe07 	bl	8006972 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010d64:	2102      	movs	r1, #2
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ff fdba 	bl	80108e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7f5 fe13 	bl	8006998 <pbuf_free>
        break;
 8010d72:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010d74:	4b0b      	ldr	r3, [pc, #44]	; (8010da4 <ip4_input+0x27c>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010d7a:	4b0a      	ldr	r3, [pc, #40]	; (8010da4 <ip4_input+0x27c>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010d80:	4b08      	ldr	r3, [pc, #32]	; (8010da4 <ip4_input+0x27c>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010d86:	4b07      	ldr	r3, [pc, #28]	; (8010da4 <ip4_input+0x27c>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010d8c:	4b05      	ldr	r3, [pc, #20]	; (8010da4 <ip4_input+0x27c>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010d92:	4b04      	ldr	r3, [pc, #16]	; (8010da4 <ip4_input+0x27c>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010d98:	2300      	movs	r3, #0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3720      	adds	r7, #32
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	2000329c 	.word	0x2000329c
 8010da8:	20006820 	.word	0x20006820

08010dac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b08a      	sub	sp, #40	; 0x28
 8010db0:	af04      	add	r7, sp, #16
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
 8010db8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d009      	beq.n	8010dd8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d003      	beq.n	8010dd2 <ip4_output_if+0x26>
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d102      	bne.n	8010dd8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd4:	3304      	adds	r3, #4
 8010dd6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010dd8:	78fa      	ldrb	r2, [r7, #3]
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	9302      	str	r3, [sp, #8]
 8010dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4613      	mov	r3, r2
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	6979      	ldr	r1, [r7, #20]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f000 f805 	bl	8010e00 <ip4_output_if_src>
 8010df6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3718      	adds	r7, #24
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	7b9b      	ldrb	r3, [r3, #14]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d006      	beq.n	8010e24 <ip4_output_if_src+0x24>
 8010e16:	4b4b      	ldr	r3, [pc, #300]	; (8010f44 <ip4_output_if_src+0x144>)
 8010e18:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010e1c:	494a      	ldr	r1, [pc, #296]	; (8010f48 <ip4_output_if_src+0x148>)
 8010e1e:	484b      	ldr	r0, [pc, #300]	; (8010f4c <ip4_output_if_src+0x14c>)
 8010e20:	f001 f8cc 	bl	8011fbc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d060      	beq.n	8010eec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010e2a:	2314      	movs	r3, #20
 8010e2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010e2e:	2114      	movs	r1, #20
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f7f5 fd1b 	bl	800686c <pbuf_add_header>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010e3c:	f06f 0301 	mvn.w	r3, #1
 8010e40:	e07c      	b.n	8010f3c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	895b      	ldrh	r3, [r3, #10]
 8010e4c:	2b13      	cmp	r3, #19
 8010e4e:	d806      	bhi.n	8010e5e <ip4_output_if_src+0x5e>
 8010e50:	4b3c      	ldr	r3, [pc, #240]	; (8010f44 <ip4_output_if_src+0x144>)
 8010e52:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010e56:	493e      	ldr	r1, [pc, #248]	; (8010f50 <ip4_output_if_src+0x150>)
 8010e58:	483c      	ldr	r0, [pc, #240]	; (8010f4c <ip4_output_if_src+0x14c>)
 8010e5a:	f001 f8af 	bl	8011fbc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	78fa      	ldrb	r2, [r7, #3]
 8010e62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010e6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010e74:	8b7b      	ldrh	r3, [r7, #26]
 8010e76:	089b      	lsrs	r3, r3, #2
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010e8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	891b      	ldrh	r3, [r3, #8]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7f4 fac4 	bl	8005420 <lwip_htons>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	719a      	strb	r2, [r3, #6]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010eaa:	4b2a      	ldr	r3, [pc, #168]	; (8010f54 <ip4_output_if_src+0x154>)
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7f4 fab6 	bl	8005420 <lwip_htons>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010ebc:	4b25      	ldr	r3, [pc, #148]	; (8010f54 <ip4_output_if_src+0x154>)
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	4b23      	ldr	r3, [pc, #140]	; (8010f54 <ip4_output_if_src+0x154>)
 8010ec6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d104      	bne.n	8010ed8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010ece:	4b22      	ldr	r3, [pc, #136]	; (8010f58 <ip4_output_if_src+0x158>)
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	60da      	str	r2, [r3, #12]
 8010ed6:	e003      	b.n	8010ee0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	729a      	strb	r2, [r3, #10]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	72da      	strb	r2, [r3, #11]
 8010eea:	e00f      	b.n	8010f0c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	895b      	ldrh	r3, [r3, #10]
 8010ef0:	2b13      	cmp	r3, #19
 8010ef2:	d802      	bhi.n	8010efa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010ef4:	f06f 0301 	mvn.w	r3, #1
 8010ef8:	e020      	b.n	8010f3c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010f06:	f107 0314 	add.w	r3, r7, #20
 8010f0a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00c      	beq.n	8010f2e <ip4_output_if_src+0x12e>
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	891a      	ldrh	r2, [r3, #8]
 8010f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d906      	bls.n	8010f2e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f24:	68f8      	ldr	r0, [r7, #12]
 8010f26:	f000 fde3 	bl	8011af0 <ip4_frag>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	e006      	b.n	8010f3c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	68f9      	ldr	r1, [r7, #12]
 8010f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f38:	4798      	blx	r3
 8010f3a:	4603      	mov	r3, r0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3720      	adds	r7, #32
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	08015b34 	.word	0x08015b34
 8010f48:	08015b68 	.word	0x08015b68
 8010f4c:	08015b74 	.word	0x08015b74
 8010f50:	08015b9c 	.word	0x08015b9c
 8010f54:	200069b2 	.word	0x200069b2
 8010f58:	08015f80 	.word	0x08015f80

08010f5c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d002      	beq.n	8010f78 <ip4_addr_isbroadcast_u32+0x1c>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e02a      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f82:	f003 0302 	and.w	r3, r3, #2
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e021      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	3304      	adds	r3, #4
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d101      	bne.n	8010f9e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	e019      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	3304      	adds	r3, #4
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	405a      	eors	r2, r3
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	3308      	adds	r3, #8
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4013      	ands	r3, r2
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10d      	bne.n	8010fd0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	3308      	adds	r3, #8
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	43da      	mvns	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	3308      	adds	r3, #8
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d101      	bne.n	8010fd0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e000      	b.n	8010fd2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010fd0:	2300      	movs	r3, #0
  }
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
	...

08010fe0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8010fe8:	2210      	movs	r2, #16
 8010fea:	4904      	ldr	r1, [pc, #16]	; (8010ffc <ip4addr_ntoa+0x1c>)
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f807 	bl	8011000 <ip4addr_ntoa_r>
 8010ff2:	4603      	mov	r3, r0
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	200069b4 	.word	0x200069b4

08011000 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8011000:	b480      	push	{r7}
 8011002:	b08d      	sub	sp, #52	; 0x34
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801101a:	f107 0318 	add.w	r3, r7, #24
 801101e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011020:	2300      	movs	r3, #0
 8011022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011026:	e058      	b.n	80110da <ip4addr_ntoa_r+0xda>
    i = 0;
 8011028:	2300      	movs	r3, #0
 801102a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011030:	781a      	ldrb	r2, [r3, #0]
 8011032:	4b32      	ldr	r3, [pc, #200]	; (80110fc <ip4addr_ntoa_r+0xfc>)
 8011034:	fba3 1302 	umull	r1, r3, r3, r2
 8011038:	08d9      	lsrs	r1, r3, #3
 801103a:	460b      	mov	r3, r1
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	440b      	add	r3, r1
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8011046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	4a2c      	ldr	r2, [pc, #176]	; (80110fc <ip4addr_ntoa_r+0xfc>)
 801104c:	fba2 2303 	umull	r2, r3, r2, r3
 8011050:	08db      	lsrs	r3, r3, #3
 8011052:	b2da      	uxtb	r2, r3
 8011054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011056:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8011058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801105c:	1c5a      	adds	r2, r3, #1
 801105e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011062:	4619      	mov	r1, r3
 8011064:	7ffb      	ldrb	r3, [r7, #31]
 8011066:	3330      	adds	r3, #48	; 0x30
 8011068:	b2da      	uxtb	r2, r3
 801106a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801106e:	443b      	add	r3, r7
 8011070:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d1d8      	bne.n	801102e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801107c:	e011      	b.n	80110a2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	623a      	str	r2, [r7, #32]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	429a      	cmp	r2, r3
 8011088:	dc01      	bgt.n	801108e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801108a:	2300      	movs	r3, #0
 801108c:	e030      	b.n	80110f0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801108e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	1c59      	adds	r1, r3, #1
 8011096:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011098:	3230      	adds	r2, #48	; 0x30
 801109a:	443a      	add	r2, r7
 801109c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80110a0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80110a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110a6:	1e5a      	subs	r2, r3, #1
 80110a8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1e6      	bne.n	801107e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80110b0:	6a3b      	ldr	r3, [r7, #32]
 80110b2:	1c5a      	adds	r2, r3, #1
 80110b4:	623a      	str	r2, [r7, #32]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	dc01      	bgt.n	80110c0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80110bc:	2300      	movs	r3, #0
 80110be:	e017      	b.n	80110f0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80110c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c2:	1c5a      	adds	r2, r3, #1
 80110c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80110c6:	222e      	movs	r2, #46	; 0x2e
 80110c8:	701a      	strb	r2, [r3, #0]
    ap++;
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	3301      	adds	r3, #1
 80110ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80110d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110d4:	3301      	adds	r3, #1
 80110d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80110da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110de:	2b03      	cmp	r3, #3
 80110e0:	d9a2      	bls.n	8011028 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	3b01      	subs	r3, #1
 80110e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	2200      	movs	r2, #0
 80110ec:	701a      	strb	r2, [r3, #0]
  return buf;
 80110ee:	68bb      	ldr	r3, [r7, #8]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3734      	adds	r7, #52	; 0x34
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	cccccccd 	.word	0xcccccccd

08011100 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801110a:	4b12      	ldr	r3, [pc, #72]	; (8011154 <ip_reass_tmr+0x54>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011110:	e018      	b.n	8011144 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	7fdb      	ldrb	r3, [r3, #31]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00b      	beq.n	8011132 <ip_reass_tmr+0x32>
      r->timer--;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	7fdb      	ldrb	r3, [r3, #31]
 801111e:	3b01      	subs	r3, #1
 8011120:	b2da      	uxtb	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	60fb      	str	r3, [r7, #12]
 8011130:	e008      	b.n	8011144 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801113c:	68b9      	ldr	r1, [r7, #8]
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f80a 	bl	8011158 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1e3      	bne.n	8011112 <ip_reass_tmr+0x12>
    }
  }
}
 801114a:	bf00      	nop
 801114c:	bf00      	nop
 801114e:	3710      	adds	r7, #16
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	200069c4 	.word	0x200069c4

08011158 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b088      	sub	sp, #32
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011166:	683a      	ldr	r2, [r7, #0]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	429a      	cmp	r2, r3
 801116c:	d105      	bne.n	801117a <ip_reass_free_complete_datagram+0x22>
 801116e:	4b45      	ldr	r3, [pc, #276]	; (8011284 <ip_reass_free_complete_datagram+0x12c>)
 8011170:	22ab      	movs	r2, #171	; 0xab
 8011172:	4945      	ldr	r1, [pc, #276]	; (8011288 <ip_reass_free_complete_datagram+0x130>)
 8011174:	4845      	ldr	r0, [pc, #276]	; (801128c <ip_reass_free_complete_datagram+0x134>)
 8011176:	f000 ff21 	bl	8011fbc <iprintf>
  if (prev != NULL) {
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d00a      	beq.n	8011196 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d005      	beq.n	8011196 <ip_reass_free_complete_datagram+0x3e>
 801118a:	4b3e      	ldr	r3, [pc, #248]	; (8011284 <ip_reass_free_complete_datagram+0x12c>)
 801118c:	22ad      	movs	r2, #173	; 0xad
 801118e:	4940      	ldr	r1, [pc, #256]	; (8011290 <ip_reass_free_complete_datagram+0x138>)
 8011190:	483e      	ldr	r0, [pc, #248]	; (801128c <ip_reass_free_complete_datagram+0x134>)
 8011192:	f000 ff13 	bl	8011fbc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	889b      	ldrh	r3, [r3, #4]
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d12a      	bne.n	80111fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	6858      	ldr	r0, [r3, #4]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	3308      	adds	r3, #8
 80111be:	2214      	movs	r2, #20
 80111c0:	4619      	mov	r1, r3
 80111c2:	f000 fee5 	bl	8011f90 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80111c6:	2101      	movs	r1, #1
 80111c8:	69b8      	ldr	r0, [r7, #24]
 80111ca:	f7ff fb99 	bl	8010900 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80111ce:	69b8      	ldr	r0, [r7, #24]
 80111d0:	f7f5 fc6a 	bl	8006aa8 <pbuf_clen>
 80111d4:	4603      	mov	r3, r0
 80111d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80111d8:	8bfa      	ldrh	r2, [r7, #30]
 80111da:	8a7b      	ldrh	r3, [r7, #18]
 80111dc:	4413      	add	r3, r2
 80111de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111e2:	db05      	blt.n	80111f0 <ip_reass_free_complete_datagram+0x98>
 80111e4:	4b27      	ldr	r3, [pc, #156]	; (8011284 <ip_reass_free_complete_datagram+0x12c>)
 80111e6:	22bc      	movs	r2, #188	; 0xbc
 80111e8:	492a      	ldr	r1, [pc, #168]	; (8011294 <ip_reass_free_complete_datagram+0x13c>)
 80111ea:	4828      	ldr	r0, [pc, #160]	; (801128c <ip_reass_free_complete_datagram+0x134>)
 80111ec:	f000 fee6 	bl	8011fbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80111f0:	8bfa      	ldrh	r2, [r7, #30]
 80111f2:	8a7b      	ldrh	r3, [r7, #18]
 80111f4:	4413      	add	r3, r2
 80111f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80111f8:	69b8      	ldr	r0, [r7, #24]
 80111fa:	f7f5 fbcd 	bl	8006998 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011204:	e01f      	b.n	8011246 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7f5 fc46 	bl	8006aa8 <pbuf_clen>
 801121c:	4603      	mov	r3, r0
 801121e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011220:	8bfa      	ldrh	r2, [r7, #30]
 8011222:	8a7b      	ldrh	r3, [r7, #18]
 8011224:	4413      	add	r3, r2
 8011226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801122a:	db05      	blt.n	8011238 <ip_reass_free_complete_datagram+0xe0>
 801122c:	4b15      	ldr	r3, [pc, #84]	; (8011284 <ip_reass_free_complete_datagram+0x12c>)
 801122e:	22cc      	movs	r2, #204	; 0xcc
 8011230:	4918      	ldr	r1, [pc, #96]	; (8011294 <ip_reass_free_complete_datagram+0x13c>)
 8011232:	4816      	ldr	r0, [pc, #88]	; (801128c <ip_reass_free_complete_datagram+0x134>)
 8011234:	f000 fec2 	bl	8011fbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011238:	8bfa      	ldrh	r2, [r7, #30]
 801123a:	8a7b      	ldrh	r3, [r7, #18]
 801123c:	4413      	add	r3, r2
 801123e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7f5 fba9 	bl	8006998 <pbuf_free>
  while (p != NULL) {
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1dc      	bne.n	8011206 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 f8c2 	bl	80113d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011254:	4b10      	ldr	r3, [pc, #64]	; (8011298 <ip_reass_free_complete_datagram+0x140>)
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	8bfa      	ldrh	r2, [r7, #30]
 801125a:	429a      	cmp	r2, r3
 801125c:	d905      	bls.n	801126a <ip_reass_free_complete_datagram+0x112>
 801125e:	4b09      	ldr	r3, [pc, #36]	; (8011284 <ip_reass_free_complete_datagram+0x12c>)
 8011260:	22d2      	movs	r2, #210	; 0xd2
 8011262:	490e      	ldr	r1, [pc, #56]	; (801129c <ip_reass_free_complete_datagram+0x144>)
 8011264:	4809      	ldr	r0, [pc, #36]	; (801128c <ip_reass_free_complete_datagram+0x134>)
 8011266:	f000 fea9 	bl	8011fbc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801126a:	4b0b      	ldr	r3, [pc, #44]	; (8011298 <ip_reass_free_complete_datagram+0x140>)
 801126c:	881a      	ldrh	r2, [r3, #0]
 801126e:	8bfb      	ldrh	r3, [r7, #30]
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	b29a      	uxth	r2, r3
 8011274:	4b08      	ldr	r3, [pc, #32]	; (8011298 <ip_reass_free_complete_datagram+0x140>)
 8011276:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011278:	8bfb      	ldrh	r3, [r7, #30]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3720      	adds	r7, #32
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	08015bcc 	.word	0x08015bcc
 8011288:	08015c08 	.word	0x08015c08
 801128c:	08015c14 	.word	0x08015c14
 8011290:	08015c3c 	.word	0x08015c3c
 8011294:	08015c50 	.word	0x08015c50
 8011298:	200069c8 	.word	0x200069c8
 801129c:	08015c70 	.word	0x08015c70

080112a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08a      	sub	sp, #40	; 0x28
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80112aa:	2300      	movs	r3, #0
 80112ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80112ae:	2300      	movs	r3, #0
 80112b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80112b2:	2300      	movs	r3, #0
 80112b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80112be:	4b28      	ldr	r3, [pc, #160]	; (8011360 <ip_reass_remove_oldest_datagram+0xc0>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80112c4:	e030      	b.n	8011328 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	695a      	ldr	r2, [r3, #20]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d10c      	bne.n	80112ec <ip_reass_remove_oldest_datagram+0x4c>
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	699a      	ldr	r2, [r3, #24]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	691b      	ldr	r3, [r3, #16]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d106      	bne.n	80112ec <ip_reass_remove_oldest_datagram+0x4c>
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	899a      	ldrh	r2, [r3, #12]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	889b      	ldrh	r3, [r3, #4]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d014      	beq.n	8011316 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	3301      	adds	r3, #1
 80112f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d104      	bne.n	8011302 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	61bb      	str	r3, [r7, #24]
 8011300:	e009      	b.n	8011316 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	7fda      	ldrb	r2, [r3, #31]
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	7fdb      	ldrb	r3, [r3, #31]
 801130a:	429a      	cmp	r2, r3
 801130c:	d803      	bhi.n	8011316 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011310:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	2b00      	cmp	r3, #0
 801132c:	d1cb      	bne.n	80112c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d008      	beq.n	8011346 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011334:	69b9      	ldr	r1, [r7, #24]
 8011336:	6a38      	ldr	r0, [r7, #32]
 8011338:	f7ff ff0e 	bl	8011158 <ip_reass_free_complete_datagram>
 801133c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	4413      	add	r3, r2
 8011344:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	429a      	cmp	r2, r3
 801134c:	da02      	bge.n	8011354 <ip_reass_remove_oldest_datagram+0xb4>
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	2b01      	cmp	r3, #1
 8011352:	dcac      	bgt.n	80112ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011354:	697b      	ldr	r3, [r7, #20]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3728      	adds	r7, #40	; 0x28
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	200069c4 	.word	0x200069c4

08011364 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801136e:	2004      	movs	r0, #4
 8011370:	f7f4 fcac 	bl	8005ccc <memp_malloc>
 8011374:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d110      	bne.n	801139e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801137c:	6839      	ldr	r1, [r7, #0]
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7ff ff8e 	bl	80112a0 <ip_reass_remove_oldest_datagram>
 8011384:	4602      	mov	r2, r0
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	4293      	cmp	r3, r2
 801138a:	dc03      	bgt.n	8011394 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801138c:	2004      	movs	r0, #4
 801138e:	f7f4 fc9d 	bl	8005ccc <memp_malloc>
 8011392:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d101      	bne.n	801139e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801139a:	2300      	movs	r3, #0
 801139c:	e016      	b.n	80113cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801139e:	2220      	movs	r2, #32
 80113a0:	2100      	movs	r1, #0
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f000 fe02 	bl	8011fac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	220f      	movs	r2, #15
 80113ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80113ae:	4b09      	ldr	r3, [pc, #36]	; (80113d4 <ip_reass_enqueue_new_datagram+0x70>)
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80113b6:	4a07      	ldr	r2, [pc, #28]	; (80113d4 <ip_reass_enqueue_new_datagram+0x70>)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	3308      	adds	r3, #8
 80113c0:	2214      	movs	r2, #20
 80113c2:	6879      	ldr	r1, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 fde3 	bl	8011f90 <memcpy>
  return ipr;
 80113ca:	68fb      	ldr	r3, [r7, #12]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	200069c4 	.word	0x200069c4

080113d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80113e2:	4b10      	ldr	r3, [pc, #64]	; (8011424 <ip_reass_dequeue_datagram+0x4c>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d104      	bne.n	80113f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a0c      	ldr	r2, [pc, #48]	; (8011424 <ip_reass_dequeue_datagram+0x4c>)
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	e00d      	b.n	8011412 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d106      	bne.n	801140a <ip_reass_dequeue_datagram+0x32>
 80113fc:	4b0a      	ldr	r3, [pc, #40]	; (8011428 <ip_reass_dequeue_datagram+0x50>)
 80113fe:	f240 1245 	movw	r2, #325	; 0x145
 8011402:	490a      	ldr	r1, [pc, #40]	; (801142c <ip_reass_dequeue_datagram+0x54>)
 8011404:	480a      	ldr	r0, [pc, #40]	; (8011430 <ip_reass_dequeue_datagram+0x58>)
 8011406:	f000 fdd9 	bl	8011fbc <iprintf>
    prev->next = ipr->next;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011412:	6879      	ldr	r1, [r7, #4]
 8011414:	2004      	movs	r0, #4
 8011416:	f7f4 fca5 	bl	8005d64 <memp_free>
}
 801141a:	bf00      	nop
 801141c:	3708      	adds	r7, #8
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	200069c4 	.word	0x200069c4
 8011428:	08015bcc 	.word	0x08015bcc
 801142c:	08015c94 	.word	0x08015c94
 8011430:	08015c14 	.word	0x08015c14

08011434 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b08c      	sub	sp, #48	; 0x30
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011440:	2300      	movs	r3, #0
 8011442:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011444:	2301      	movs	r3, #1
 8011446:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	885b      	ldrh	r3, [r3, #2]
 8011452:	b29b      	uxth	r3, r3
 8011454:	4618      	mov	r0, r3
 8011456:	f7f3 ffe3 	bl	8005420 <lwip_htons>
 801145a:	4603      	mov	r3, r0
 801145c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	f003 030f 	and.w	r3, r3, #15
 8011466:	b2db      	uxtb	r3, r3
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801146c:	7e7b      	ldrb	r3, [r7, #25]
 801146e:	b29b      	uxth	r3, r3
 8011470:	8b7a      	ldrh	r2, [r7, #26]
 8011472:	429a      	cmp	r2, r3
 8011474:	d202      	bcs.n	801147c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011476:	f04f 33ff 	mov.w	r3, #4294967295
 801147a:	e135      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801147c:	7e7b      	ldrb	r3, [r7, #25]
 801147e:	b29b      	uxth	r3, r3
 8011480:	8b7a      	ldrh	r2, [r7, #26]
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	88db      	ldrh	r3, [r3, #6]
 801148a:	b29b      	uxth	r3, r3
 801148c:	4618      	mov	r0, r3
 801148e:	f7f3 ffc7 	bl	8005420 <lwip_htons>
 8011492:	4603      	mov	r3, r0
 8011494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011498:	b29b      	uxth	r3, r3
 801149a:	00db      	lsls	r3, r3, #3
 801149c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	2200      	movs	r2, #0
 80114a8:	701a      	strb	r2, [r3, #0]
 80114aa:	2200      	movs	r2, #0
 80114ac:	705a      	strb	r2, [r3, #1]
 80114ae:	2200      	movs	r2, #0
 80114b0:	709a      	strb	r2, [r3, #2]
 80114b2:	2200      	movs	r2, #0
 80114b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80114b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b8:	8afa      	ldrh	r2, [r7, #22]
 80114ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80114bc:	8afa      	ldrh	r2, [r7, #22]
 80114be:	8b7b      	ldrh	r3, [r7, #26]
 80114c0:	4413      	add	r3, r2
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80114c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ca:	88db      	ldrh	r3, [r3, #6]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	8afa      	ldrh	r2, [r7, #22]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d902      	bls.n	80114da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114d4:	f04f 33ff 	mov.w	r3, #4294967295
 80114d8:	e106      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	627b      	str	r3, [r7, #36]	; 0x24
 80114e0:	e068      	b.n	80115b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80114e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ea:	889b      	ldrh	r3, [r3, #4]
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	889b      	ldrh	r3, [r3, #4]
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d235      	bcs.n	8011564 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80114f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80114fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011500:	2b00      	cmp	r3, #0
 8011502:	d020      	beq.n	8011546 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	889b      	ldrh	r3, [r3, #4]
 8011508:	b29a      	uxth	r2, r3
 801150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150c:	88db      	ldrh	r3, [r3, #6]
 801150e:	b29b      	uxth	r3, r3
 8011510:	429a      	cmp	r2, r3
 8011512:	d307      	bcc.n	8011524 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	88db      	ldrh	r3, [r3, #6]
 8011518:	b29a      	uxth	r2, r3
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	889b      	ldrh	r3, [r3, #4]
 801151e:	b29b      	uxth	r3, r3
 8011520:	429a      	cmp	r2, r3
 8011522:	d902      	bls.n	801152a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
 8011528:	e0de      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	68ba      	ldr	r2, [r7, #8]
 801152e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	88db      	ldrh	r3, [r3, #6]
 8011534:	b29a      	uxth	r2, r3
 8011536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011538:	889b      	ldrh	r3, [r3, #4]
 801153a:	b29b      	uxth	r3, r3
 801153c:	429a      	cmp	r2, r3
 801153e:	d03d      	beq.n	80115bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011540:	2300      	movs	r3, #0
 8011542:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011544:	e03a      	b.n	80115bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	88db      	ldrh	r3, [r3, #6]
 801154a:	b29a      	uxth	r2, r3
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	889b      	ldrh	r3, [r3, #4]
 8011550:	b29b      	uxth	r3, r3
 8011552:	429a      	cmp	r2, r3
 8011554:	d902      	bls.n	801155c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011556:	f04f 33ff 	mov.w	r3, #4294967295
 801155a:	e0c5      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	605a      	str	r2, [r3, #4]
      break;
 8011562:	e02b      	b.n	80115bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011566:	889b      	ldrh	r3, [r3, #4]
 8011568:	b29a      	uxth	r2, r3
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	889b      	ldrh	r3, [r3, #4]
 801156e:	b29b      	uxth	r3, r3
 8011570:	429a      	cmp	r2, r3
 8011572:	d102      	bne.n	801157a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011574:	f04f 33ff 	mov.w	r3, #4294967295
 8011578:	e0b6      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157c:	889b      	ldrh	r3, [r3, #4]
 801157e:	b29a      	uxth	r2, r3
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	88db      	ldrh	r3, [r3, #6]
 8011584:	b29b      	uxth	r3, r3
 8011586:	429a      	cmp	r2, r3
 8011588:	d202      	bcs.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801158a:	f04f 33ff 	mov.w	r3, #4294967295
 801158e:	e0ab      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011592:	2b00      	cmp	r3, #0
 8011594:	d009      	beq.n	80115aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	88db      	ldrh	r3, [r3, #6]
 801159a:	b29a      	uxth	r2, r3
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	889b      	ldrh	r3, [r3, #4]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d001      	beq.n	80115aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d193      	bne.n	80114e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80115ba:	e000      	b.n	80115be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80115bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d12d      	bne.n	8011620 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d01c      	beq.n	8011604 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	88db      	ldrh	r3, [r3, #6]
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d2:	889b      	ldrh	r3, [r3, #4]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d906      	bls.n	80115e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80115da:	4b45      	ldr	r3, [pc, #276]	; (80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80115dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80115e0:	4944      	ldr	r1, [pc, #272]	; (80116f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80115e2:	4845      	ldr	r0, [pc, #276]	; (80116f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80115e4:	f000 fcea 	bl	8011fbc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	88db      	ldrh	r3, [r3, #6]
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f6:	889b      	ldrh	r3, [r3, #4]
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d010      	beq.n	8011620 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	623b      	str	r3, [r7, #32]
 8011602:	e00d      	b.n	8011620 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d006      	beq.n	801161a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801160c:	4b38      	ldr	r3, [pc, #224]	; (80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801160e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011612:	493a      	ldr	r1, [pc, #232]	; (80116fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011614:	4838      	ldr	r0, [pc, #224]	; (80116f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011616:	f000 fcd1 	bl	8011fbc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d105      	bne.n	8011632 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	7f9b      	ldrb	r3, [r3, #30]
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	d059      	beq.n	80116e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011632:	6a3b      	ldr	r3, [r7, #32]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d04f      	beq.n	80116d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d006      	beq.n	801164e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	889b      	ldrh	r3, [r3, #4]
 8011648:	b29b      	uxth	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801164e:	2300      	movs	r3, #0
 8011650:	623b      	str	r3, [r7, #32]
 8011652:	e041      	b.n	80116d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011656:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801165e:	e012      	b.n	8011686 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011668:	88db      	ldrh	r3, [r3, #6]
 801166a:	b29a      	uxth	r2, r3
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	889b      	ldrh	r3, [r3, #4]
 8011670:	b29b      	uxth	r3, r3
 8011672:	429a      	cmp	r2, r3
 8011674:	d002      	beq.n	801167c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011676:	2300      	movs	r3, #0
 8011678:	623b      	str	r3, [r7, #32]
            break;
 801167a:	e007      	b.n	801168c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1e9      	bne.n	8011660 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801168c:	6a3b      	ldr	r3, [r7, #32]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d022      	beq.n	80116d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801169a:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801169c:	f240 12df 	movw	r2, #479	; 0x1df
 80116a0:	4917      	ldr	r1, [pc, #92]	; (8011700 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80116a2:	4815      	ldr	r0, [pc, #84]	; (80116f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80116a4:	f000 fc8a 	bl	8011fbc <iprintf>
          LWIP_ASSERT("sanity check",
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d106      	bne.n	80116c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80116b4:	4b0e      	ldr	r3, [pc, #56]	; (80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80116b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80116ba:	4911      	ldr	r1, [pc, #68]	; (8011700 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80116bc:	480e      	ldr	r0, [pc, #56]	; (80116f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80116be:	f000 fc7d 	bl	8011fbc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80116c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d006      	beq.n	80116d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80116ca:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80116cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80116d0:	490c      	ldr	r1, [pc, #48]	; (8011704 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80116d2:	4809      	ldr	r0, [pc, #36]	; (80116f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80116d4:	f000 fc72 	bl	8011fbc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bf14      	ite	ne
 80116de:	2301      	movne	r3, #1
 80116e0:	2300      	moveq	r3, #0
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	e000      	b.n	80116e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80116e6:	2300      	movs	r3, #0
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3730      	adds	r7, #48	; 0x30
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	08015bcc 	.word	0x08015bcc
 80116f4:	08015cb0 	.word	0x08015cb0
 80116f8:	08015c14 	.word	0x08015c14
 80116fc:	08015cd0 	.word	0x08015cd0
 8011700:	08015d08 	.word	0x08015d08
 8011704:	08015d18 	.word	0x08015d18

08011708 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b08e      	sub	sp, #56	; 0x38
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	f003 030f 	and.w	r3, r3, #15
 801171e:	b2db      	uxtb	r3, r3
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b14      	cmp	r3, #20
 8011726:	f040 8171 	bne.w	8011a0c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172c:	88db      	ldrh	r3, [r3, #6]
 801172e:	b29b      	uxth	r3, r3
 8011730:	4618      	mov	r0, r3
 8011732:	f7f3 fe75 	bl	8005420 <lwip_htons>
 8011736:	4603      	mov	r3, r0
 8011738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801173c:	b29b      	uxth	r3, r3
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011744:	885b      	ldrh	r3, [r3, #2]
 8011746:	b29b      	uxth	r3, r3
 8011748:	4618      	mov	r0, r3
 801174a:	f7f3 fe69 	bl	8005420 <lwip_htons>
 801174e:	4603      	mov	r3, r0
 8011750:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	f003 030f 	and.w	r3, r3, #15
 801175a:	b2db      	uxtb	r3, r3
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011766:	b29b      	uxth	r3, r3
 8011768:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801176a:	429a      	cmp	r2, r3
 801176c:	f0c0 8150 	bcc.w	8011a10 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011774:	b29b      	uxth	r3, r3
 8011776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7f5 f993 	bl	8006aa8 <pbuf_clen>
 8011782:	4603      	mov	r3, r0
 8011784:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011786:	4b8c      	ldr	r3, [pc, #560]	; (80119b8 <ip4_reass+0x2b0>)
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	461a      	mov	r2, r3
 801178c:	8c3b      	ldrh	r3, [r7, #32]
 801178e:	4413      	add	r3, r2
 8011790:	2b0a      	cmp	r3, #10
 8011792:	dd10      	ble.n	80117b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011794:	8c3b      	ldrh	r3, [r7, #32]
 8011796:	4619      	mov	r1, r3
 8011798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801179a:	f7ff fd81 	bl	80112a0 <ip_reass_remove_oldest_datagram>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f000 8137 	beq.w	8011a14 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80117a6:	4b84      	ldr	r3, [pc, #528]	; (80119b8 <ip4_reass+0x2b0>)
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	8c3b      	ldrh	r3, [r7, #32]
 80117ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80117b0:	2b0a      	cmp	r3, #10
 80117b2:	f300 812f 	bgt.w	8011a14 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80117b6:	4b81      	ldr	r3, [pc, #516]	; (80119bc <ip4_reass+0x2b4>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	633b      	str	r3, [r7, #48]	; 0x30
 80117bc:	e015      	b.n	80117ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	695a      	ldr	r2, [r3, #20]
 80117c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d10c      	bne.n	80117e4 <ip4_reass+0xdc>
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	699a      	ldr	r2, [r3, #24]
 80117ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d106      	bne.n	80117e4 <ip4_reass+0xdc>
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	899a      	ldrh	r2, [r3, #12]
 80117da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117dc:	889b      	ldrh	r3, [r3, #4]
 80117de:	b29b      	uxth	r3, r3
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d006      	beq.n	80117f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	633b      	str	r3, [r7, #48]	; 0x30
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d1e6      	bne.n	80117be <ip4_reass+0xb6>
 80117f0:	e000      	b.n	80117f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80117f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80117f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d109      	bne.n	801180e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80117fa:	8c3b      	ldrh	r3, [r7, #32]
 80117fc:	4619      	mov	r1, r3
 80117fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011800:	f7ff fdb0 	bl	8011364 <ip_reass_enqueue_new_datagram>
 8011804:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	2b00      	cmp	r3, #0
 801180a:	d11c      	bne.n	8011846 <ip4_reass+0x13e>
      goto nullreturn;
 801180c:	e105      	b.n	8011a1a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011810:	88db      	ldrh	r3, [r3, #6]
 8011812:	b29b      	uxth	r3, r3
 8011814:	4618      	mov	r0, r3
 8011816:	f7f3 fe03 	bl	8005420 <lwip_htons>
 801181a:	4603      	mov	r3, r0
 801181c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011820:	2b00      	cmp	r3, #0
 8011822:	d110      	bne.n	8011846 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	89db      	ldrh	r3, [r3, #14]
 8011828:	4618      	mov	r0, r3
 801182a:	f7f3 fdf9 	bl	8005420 <lwip_htons>
 801182e:	4603      	mov	r3, r0
 8011830:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011834:	2b00      	cmp	r3, #0
 8011836:	d006      	beq.n	8011846 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183a:	3308      	adds	r3, #8
 801183c:	2214      	movs	r2, #20
 801183e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011840:	4618      	mov	r0, r3
 8011842:	f000 fba5 	bl	8011f90 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011848:	88db      	ldrh	r3, [r3, #6]
 801184a:	b29b      	uxth	r3, r3
 801184c:	f003 0320 	and.w	r3, r3, #32
 8011850:	2b00      	cmp	r3, #0
 8011852:	bf0c      	ite	eq
 8011854:	2301      	moveq	r3, #1
 8011856:	2300      	movne	r3, #0
 8011858:	b2db      	uxtb	r3, r3
 801185a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d00e      	beq.n	8011880 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011862:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011866:	4413      	add	r3, r2
 8011868:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801186a:	8b7a      	ldrh	r2, [r7, #26]
 801186c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801186e:	429a      	cmp	r2, r3
 8011870:	f0c0 80a0 	bcc.w	80119b4 <ip4_reass+0x2ac>
 8011874:	8b7b      	ldrh	r3, [r7, #26]
 8011876:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801187a:	4293      	cmp	r3, r2
 801187c:	f200 809a 	bhi.w	80119b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011880:	69fa      	ldr	r2, [r7, #28]
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011886:	f7ff fdd5 	bl	8011434 <ip_reass_chain_frag_into_datagram_and_validate>
 801188a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011892:	f000 809b 	beq.w	80119cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011896:	4b48      	ldr	r3, [pc, #288]	; (80119b8 <ip4_reass+0x2b0>)
 8011898:	881a      	ldrh	r2, [r3, #0]
 801189a:	8c3b      	ldrh	r3, [r7, #32]
 801189c:	4413      	add	r3, r2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	4b45      	ldr	r3, [pc, #276]	; (80119b8 <ip4_reass+0x2b0>)
 80118a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00d      	beq.n	80118c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80118aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118ae:	4413      	add	r3, r2
 80118b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80118b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b4:	8a7a      	ldrh	r2, [r7, #18]
 80118b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80118b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ba:	7f9b      	ldrb	r3, [r3, #30]
 80118bc:	f043 0301 	orr.w	r3, r3, #1
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d171      	bne.n	80119b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80118cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ce:	8b9b      	ldrh	r3, [r3, #28]
 80118d0:	3314      	adds	r3, #20
 80118d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80118d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80118e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e8:	3308      	adds	r3, #8
 80118ea:	2214      	movs	r2, #20
 80118ec:	4619      	mov	r1, r3
 80118ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118f0:	f000 fb4e 	bl	8011f90 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80118f4:	8a3b      	ldrh	r3, [r7, #16]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7f3 fd92 	bl	8005420 <lwip_htons>
 80118fc:	4603      	mov	r3, r0
 80118fe:	461a      	mov	r2, r3
 8011900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011902:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011906:	2200      	movs	r2, #0
 8011908:	719a      	strb	r2, [r3, #6]
 801190a:	2200      	movs	r2, #0
 801190c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011910:	2200      	movs	r2, #0
 8011912:	729a      	strb	r2, [r3, #10]
 8011914:	2200      	movs	r2, #0
 8011916:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801191e:	e00d      	b.n	801193c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011926:	2114      	movs	r1, #20
 8011928:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801192a:	f7f4 ffaf 	bl	800688c <pbuf_remove_header>
      pbuf_cat(p, r);
 801192e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7f5 f8f3 	bl	8006b1c <pbuf_cat>
      r = iprh->next_pbuf;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1ee      	bne.n	8011920 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011942:	4b1e      	ldr	r3, [pc, #120]	; (80119bc <ip4_reass+0x2b4>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011948:	429a      	cmp	r2, r3
 801194a:	d102      	bne.n	8011952 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801194c:	2300      	movs	r3, #0
 801194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011950:	e010      	b.n	8011974 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011952:	4b1a      	ldr	r3, [pc, #104]	; (80119bc <ip4_reass+0x2b4>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011958:	e007      	b.n	801196a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011960:	429a      	cmp	r2, r3
 8011962:	d006      	beq.n	8011972 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	62fb      	str	r3, [r7, #44]	; 0x2c
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1f4      	bne.n	801195a <ip4_reass+0x252>
 8011970:	e000      	b.n	8011974 <ip4_reass+0x26c>
          break;
 8011972:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011978:	f7ff fd2e 	bl	80113d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7f5 f893 	bl	8006aa8 <pbuf_clen>
 8011982:	4603      	mov	r3, r0
 8011984:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011986:	4b0c      	ldr	r3, [pc, #48]	; (80119b8 <ip4_reass+0x2b0>)
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	8c3a      	ldrh	r2, [r7, #32]
 801198c:	429a      	cmp	r2, r3
 801198e:	d906      	bls.n	801199e <ip4_reass+0x296>
 8011990:	4b0b      	ldr	r3, [pc, #44]	; (80119c0 <ip4_reass+0x2b8>)
 8011992:	f240 229b 	movw	r2, #667	; 0x29b
 8011996:	490b      	ldr	r1, [pc, #44]	; (80119c4 <ip4_reass+0x2bc>)
 8011998:	480b      	ldr	r0, [pc, #44]	; (80119c8 <ip4_reass+0x2c0>)
 801199a:	f000 fb0f 	bl	8011fbc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801199e:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <ip4_reass+0x2b0>)
 80119a0:	881a      	ldrh	r2, [r3, #0]
 80119a2:	8c3b      	ldrh	r3, [r7, #32]
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	4b03      	ldr	r3, [pc, #12]	; (80119b8 <ip4_reass+0x2b0>)
 80119aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	e038      	b.n	8011a22 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80119b0:	2300      	movs	r3, #0
 80119b2:	e036      	b.n	8011a22 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80119b4:	bf00      	nop
 80119b6:	e00a      	b.n	80119ce <ip4_reass+0x2c6>
 80119b8:	200069c8 	.word	0x200069c8
 80119bc:	200069c4 	.word	0x200069c4
 80119c0:	08015bcc 	.word	0x08015bcc
 80119c4:	08015d3c 	.word	0x08015d3c
 80119c8:	08015c14 	.word	0x08015c14
    goto nullreturn_ipr;
 80119cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80119ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d106      	bne.n	80119e2 <ip4_reass+0x2da>
 80119d4:	4b15      	ldr	r3, [pc, #84]	; (8011a2c <ip4_reass+0x324>)
 80119d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80119da:	4915      	ldr	r1, [pc, #84]	; (8011a30 <ip4_reass+0x328>)
 80119dc:	4815      	ldr	r0, [pc, #84]	; (8011a34 <ip4_reass+0x32c>)
 80119de:	f000 faed 	bl	8011fbc <iprintf>
  if (ipr->p == NULL) {
 80119e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d116      	bne.n	8011a18 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80119ea:	4b13      	ldr	r3, [pc, #76]	; (8011a38 <ip4_reass+0x330>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d006      	beq.n	8011a02 <ip4_reass+0x2fa>
 80119f4:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <ip4_reass+0x324>)
 80119f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80119fa:	4910      	ldr	r1, [pc, #64]	; (8011a3c <ip4_reass+0x334>)
 80119fc:	480d      	ldr	r0, [pc, #52]	; (8011a34 <ip4_reass+0x32c>)
 80119fe:	f000 fadd 	bl	8011fbc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011a02:	2100      	movs	r1, #0
 8011a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a06:	f7ff fce7 	bl	80113d8 <ip_reass_dequeue_datagram>
 8011a0a:	e006      	b.n	8011a1a <ip4_reass+0x312>
    goto nullreturn;
 8011a0c:	bf00      	nop
 8011a0e:	e004      	b.n	8011a1a <ip4_reass+0x312>
    goto nullreturn;
 8011a10:	bf00      	nop
 8011a12:	e002      	b.n	8011a1a <ip4_reass+0x312>
      goto nullreturn;
 8011a14:	bf00      	nop
 8011a16:	e000      	b.n	8011a1a <ip4_reass+0x312>
  }

nullreturn:
 8011a18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7f4 ffbc 	bl	8006998 <pbuf_free>
  return NULL;
 8011a20:	2300      	movs	r3, #0
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	3738      	adds	r7, #56	; 0x38
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	08015bcc 	.word	0x08015bcc
 8011a30:	08015d58 	.word	0x08015d58
 8011a34:	08015c14 	.word	0x08015c14
 8011a38:	200069c4 	.word	0x200069c4
 8011a3c:	08015d64 	.word	0x08015d64

08011a40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011a44:	2005      	movs	r0, #5
 8011a46:	f7f4 f941 	bl	8005ccc <memp_malloc>
 8011a4a:	4603      	mov	r3, r0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d106      	bne.n	8011a6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8011a5e:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011a60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011a64:	4906      	ldr	r1, [pc, #24]	; (8011a80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011a66:	4807      	ldr	r0, [pc, #28]	; (8011a84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011a68:	f000 faa8 	bl	8011fbc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011a6c:	6879      	ldr	r1, [r7, #4]
 8011a6e:	2005      	movs	r0, #5
 8011a70:	f7f4 f978 	bl	8005d64 <memp_free>
}
 8011a74:	bf00      	nop
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	08015bcc 	.word	0x08015bcc
 8011a80:	08015d84 	.word	0x08015d84
 8011a84:	08015c14 	.word	0x08015c14

08011a88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <ipfrag_free_pbuf_custom+0x20>
 8011a9a:	4b11      	ldr	r3, [pc, #68]	; (8011ae0 <ipfrag_free_pbuf_custom+0x58>)
 8011a9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011aa0:	4910      	ldr	r1, [pc, #64]	; (8011ae4 <ipfrag_free_pbuf_custom+0x5c>)
 8011aa2:	4811      	ldr	r0, [pc, #68]	; (8011ae8 <ipfrag_free_pbuf_custom+0x60>)
 8011aa4:	f000 fa8a 	bl	8011fbc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d006      	beq.n	8011abe <ipfrag_free_pbuf_custom+0x36>
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <ipfrag_free_pbuf_custom+0x58>)
 8011ab2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011ab6:	490d      	ldr	r1, [pc, #52]	; (8011aec <ipfrag_free_pbuf_custom+0x64>)
 8011ab8:	480b      	ldr	r0, [pc, #44]	; (8011ae8 <ipfrag_free_pbuf_custom+0x60>)
 8011aba:	f000 fa7f 	bl	8011fbc <iprintf>
  if (pcr->original != NULL) {
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	695b      	ldr	r3, [r3, #20]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d004      	beq.n	8011ad0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	695b      	ldr	r3, [r3, #20]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7f4 ff64 	bl	8006998 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f7ff ffbd 	bl	8011a50 <ip_frag_free_pbuf_custom_ref>
}
 8011ad6:	bf00      	nop
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	08015bcc 	.word	0x08015bcc
 8011ae4:	08015d90 	.word	0x08015d90
 8011ae8:	08015c14 	.word	0x08015c14
 8011aec:	08015d9c 	.word	0x08015d9c

08011af0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b094      	sub	sp, #80	; 0x50
 8011af4:	af02      	add	r7, sp, #8
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011afc:	2300      	movs	r3, #0
 8011afe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b06:	3b14      	subs	r3, #20
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	da00      	bge.n	8011b0e <ip4_frag+0x1e>
 8011b0c:	3307      	adds	r3, #7
 8011b0e:	10db      	asrs	r3, r3, #3
 8011b10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011b12:	2314      	movs	r3, #20
 8011b14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	f003 030f 	and.w	r3, r3, #15
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b14      	cmp	r3, #20
 8011b30:	d002      	beq.n	8011b38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011b32:	f06f 0305 	mvn.w	r3, #5
 8011b36:	e110      	b.n	8011d5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	895b      	ldrh	r3, [r3, #10]
 8011b3c:	2b13      	cmp	r3, #19
 8011b3e:	d809      	bhi.n	8011b54 <ip4_frag+0x64>
 8011b40:	4b88      	ldr	r3, [pc, #544]	; (8011d64 <ip4_frag+0x274>)
 8011b42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011b46:	4988      	ldr	r1, [pc, #544]	; (8011d68 <ip4_frag+0x278>)
 8011b48:	4888      	ldr	r0, [pc, #544]	; (8011d6c <ip4_frag+0x27c>)
 8011b4a:	f000 fa37 	bl	8011fbc <iprintf>
 8011b4e:	f06f 0305 	mvn.w	r3, #5
 8011b52:	e102      	b.n	8011d5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b56:	88db      	ldrh	r3, [r3, #6]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7f3 fc60 	bl	8005420 <lwip_htons>
 8011b60:	4603      	mov	r3, r0
 8011b62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011b64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011b6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011b74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	891b      	ldrh	r3, [r3, #8]
 8011b7a:	3b14      	subs	r3, #20
 8011b7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011b80:	e0e1      	b.n	8011d46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	bf28      	it	cs
 8011b90:	4613      	movcs	r3, r2
 8011b92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011b94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b98:	2114      	movs	r1, #20
 8011b9a:	200e      	movs	r0, #14
 8011b9c:	f7f4 fc18 	bl	80063d0 <pbuf_alloc>
 8011ba0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f000 80d5 	beq.w	8011d54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	895b      	ldrh	r3, [r3, #10]
 8011bae:	2b13      	cmp	r3, #19
 8011bb0:	d806      	bhi.n	8011bc0 <ip4_frag+0xd0>
 8011bb2:	4b6c      	ldr	r3, [pc, #432]	; (8011d64 <ip4_frag+0x274>)
 8011bb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011bb8:	496d      	ldr	r1, [pc, #436]	; (8011d70 <ip4_frag+0x280>)
 8011bba:	486c      	ldr	r0, [pc, #432]	; (8011d6c <ip4_frag+0x27c>)
 8011bbc:	f000 f9fe 	bl	8011fbc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	2214      	movs	r2, #20
 8011bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f000 f9e1 	bl	8011f90 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011bda:	e064      	b.n	8011ca6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	895a      	ldrh	r2, [r3, #10]
 8011be0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	895b      	ldrh	r3, [r3, #10]
 8011bea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d906      	bls.n	8011bfe <ip4_frag+0x10e>
 8011bf0:	4b5c      	ldr	r3, [pc, #368]	; (8011d64 <ip4_frag+0x274>)
 8011bf2:	f240 322d 	movw	r2, #813	; 0x32d
 8011bf6:	495f      	ldr	r1, [pc, #380]	; (8011d74 <ip4_frag+0x284>)
 8011bf8:	485c      	ldr	r0, [pc, #368]	; (8011d6c <ip4_frag+0x27c>)
 8011bfa:	f000 f9df 	bl	8011fbc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011bfe:	8bfa      	ldrh	r2, [r7, #30]
 8011c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c04:	4293      	cmp	r3, r2
 8011c06:	bf28      	it	cs
 8011c08:	4613      	movcs	r3, r2
 8011c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011c0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d105      	bne.n	8011c22 <ip4_frag+0x132>
        poff = 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60fb      	str	r3, [r7, #12]
        continue;
 8011c20:	e041      	b.n	8011ca6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011c22:	f7ff ff0d 	bl	8011a40 <ip_frag_alloc_pbuf_custom_ref>
 8011c26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d103      	bne.n	8011c36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c30:	f7f4 feb2 	bl	8006998 <pbuf_free>
        goto memerr;
 8011c34:	e08f      	b.n	8011d56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011c36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011c3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c3e:	4413      	add	r3, r2
 8011c40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011c44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011c48:	9201      	str	r2, [sp, #4]
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2241      	movs	r2, #65	; 0x41
 8011c50:	2000      	movs	r0, #0
 8011c52:	f7f4 fce7 	bl	8006624 <pbuf_alloced_custom>
 8011c56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d106      	bne.n	8011c6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011c5e:	69b8      	ldr	r0, [r7, #24]
 8011c60:	f7ff fef6 	bl	8011a50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c66:	f7f4 fe97 	bl	8006998 <pbuf_free>
        goto memerr;
 8011c6a:	e074      	b.n	8011d56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7f4 ff33 	bl	8006ad8 <pbuf_ref>
      pcr->original = p;
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	4a3f      	ldr	r2, [pc, #252]	; (8011d78 <ip4_frag+0x288>)
 8011c7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011c7e:	6979      	ldr	r1, [r7, #20]
 8011c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c82:	f7f4 ff4b 	bl	8006b1c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011c86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011c8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011c94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d004      	beq.n	8011ca6 <ip4_frag+0x1b6>
        poff = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011ca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d196      	bne.n	8011bdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011cae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011cb4:	4413      	add	r3, r2
 8011cb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cbc:	f1a3 0213 	sub.w	r2, r3, #19
 8011cc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	bfcc      	ite	gt
 8011cc8:	2301      	movgt	r3, #1
 8011cca:	2300      	movle	r3, #0
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011cd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011cda:	6a3b      	ldr	r3, [r7, #32]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <ip4_frag+0x1f6>
 8011ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d003      	beq.n	8011cee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011cec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011cee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7f3 fb95 	bl	8005420 <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cfc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011cfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011d00:	3314      	adds	r3, #20
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7f3 fb8b 	bl	8005420 <lwip_htons>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	2200      	movs	r2, #0
 8011d16:	729a      	strb	r2, [r3, #10]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	695b      	ldr	r3, [r3, #20]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d24:	68b8      	ldr	r0, [r7, #8]
 8011d26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2a:	f7f4 fe35 	bl	8006998 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011d2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011d3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011d3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d40:	4413      	add	r3, r2
 8011d42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f47f af19 	bne.w	8011b82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011d50:	2300      	movs	r3, #0
 8011d52:	e002      	b.n	8011d5a <ip4_frag+0x26a>
      goto memerr;
 8011d54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3748      	adds	r7, #72	; 0x48
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	08015bcc 	.word	0x08015bcc
 8011d68:	08015da8 	.word	0x08015da8
 8011d6c:	08015c14 	.word	0x08015c14
 8011d70:	08015dc4 	.word	0x08015dc4
 8011d74:	08015de4 	.word	0x08015de4
 8011d78:	08011a89 	.word	0x08011a89

08011d7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011d86:	230e      	movs	r3, #14
 8011d88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	895b      	ldrh	r3, [r3, #10]
 8011d8e:	2b0e      	cmp	r3, #14
 8011d90:	d96e      	bls.n	8011e70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	7bdb      	ldrb	r3, [r3, #15]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d106      	bne.n	8011da8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011da0:	3301      	adds	r3, #1
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	7b1a      	ldrb	r2, [r3, #12]
 8011db2:	7b5b      	ldrb	r3, [r3, #13]
 8011db4:	021b      	lsls	r3, r3, #8
 8011db6:	4313      	orrs	r3, r2
 8011db8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	f003 0301 	and.w	r3, r3, #1
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d023      	beq.n	8011e0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d10f      	bne.n	8011dee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	785b      	ldrb	r3, [r3, #1]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d11b      	bne.n	8011e0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011dda:	2b5e      	cmp	r3, #94	; 0x5e
 8011ddc:	d117      	bne.n	8011e0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	7b5b      	ldrb	r3, [r3, #13]
 8011de2:	f043 0310 	orr.w	r3, r3, #16
 8011de6:	b2da      	uxtb	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	735a      	strb	r2, [r3, #13]
 8011dec:	e00f      	b.n	8011e0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	2206      	movs	r2, #6
 8011df2:	4928      	ldr	r1, [pc, #160]	; (8011e94 <ethernet_input+0x118>)
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 f8bb 	bl	8011f70 <memcmp>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d106      	bne.n	8011e0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	7b5b      	ldrb	r3, [r3, #13]
 8011e04:	f043 0308 	orr.w	r3, r3, #8
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011e0e:	89fb      	ldrh	r3, [r7, #14]
 8011e10:	2b08      	cmp	r3, #8
 8011e12:	d003      	beq.n	8011e1c <ethernet_input+0xa0>
 8011e14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011e18:	d014      	beq.n	8011e44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011e1a:	e032      	b.n	8011e82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e22:	f003 0308 	and.w	r3, r3, #8
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d024      	beq.n	8011e74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e2a:	8afb      	ldrh	r3, [r7, #22]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f7f4 fd2c 	bl	800688c <pbuf_remove_header>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d11e      	bne.n	8011e78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011e3a:	6839      	ldr	r1, [r7, #0]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7fe fe73 	bl	8010b28 <ip4_input>
      break;
 8011e42:	e013      	b.n	8011e6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e4a:	f003 0308 	and.w	r3, r3, #8
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d014      	beq.n	8011e7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e52:	8afb      	ldrh	r3, [r7, #22]
 8011e54:	4619      	mov	r1, r3
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7f4 fd18 	bl	800688c <pbuf_remove_header>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10e      	bne.n	8011e80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011e62:	6839      	ldr	r1, [r7, #0]
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7fe f80f 	bl	800fe88 <etharp_input>
      break;
 8011e6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e00c      	b.n	8011e8a <ethernet_input+0x10e>
    goto free_and_return;
 8011e70:	bf00      	nop
 8011e72:	e006      	b.n	8011e82 <ethernet_input+0x106>
        goto free_and_return;
 8011e74:	bf00      	nop
 8011e76:	e004      	b.n	8011e82 <ethernet_input+0x106>
        goto free_and_return;
 8011e78:	bf00      	nop
 8011e7a:	e002      	b.n	8011e82 <ethernet_input+0x106>
        goto free_and_return;
 8011e7c:	bf00      	nop
 8011e7e:	e000      	b.n	8011e82 <ethernet_input+0x106>
        goto free_and_return;
 8011e80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7f4 fd88 	bl	8006998 <pbuf_free>
  return ERR_OK;
 8011e88:	2300      	movs	r3, #0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	08015f88 	.word	0x08015f88

08011e98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b086      	sub	sp, #24
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
 8011ea4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011ea6:	8c3b      	ldrh	r3, [r7, #32]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f3 fab9 	bl	8005420 <lwip_htons>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011eb2:	210e      	movs	r1, #14
 8011eb4:	68b8      	ldr	r0, [r7, #8]
 8011eb6:	f7f4 fcd9 	bl	800686c <pbuf_add_header>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d125      	bne.n	8011f0c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	8afa      	ldrh	r2, [r7, #22]
 8011eca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	2206      	movs	r2, #6
 8011ed0:	6839      	ldr	r1, [r7, #0]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f000 f85c 	bl	8011f90 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	3306      	adds	r3, #6
 8011edc:	2206      	movs	r2, #6
 8011ede:	6879      	ldr	r1, [r7, #4]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 f855 	bl	8011f90 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011eec:	2b06      	cmp	r3, #6
 8011eee:	d006      	beq.n	8011efe <ethernet_output+0x66>
 8011ef0:	4b0a      	ldr	r3, [pc, #40]	; (8011f1c <ethernet_output+0x84>)
 8011ef2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011ef6:	490a      	ldr	r1, [pc, #40]	; (8011f20 <ethernet_output+0x88>)
 8011ef8:	480a      	ldr	r0, [pc, #40]	; (8011f24 <ethernet_output+0x8c>)
 8011efa:	f000 f85f 	bl	8011fbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	699b      	ldr	r3, [r3, #24]
 8011f02:	68b9      	ldr	r1, [r7, #8]
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	4798      	blx	r3
 8011f08:	4603      	mov	r3, r0
 8011f0a:	e002      	b.n	8011f12 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011f0c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011f0e:	f06f 0301 	mvn.w	r3, #1
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3718      	adds	r7, #24
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	08015df4 	.word	0x08015df4
 8011f20:	08015e2c 	.word	0x08015e2c
 8011f24:	08015e60 	.word	0x08015e60

08011f28 <__libc_init_array>:
 8011f28:	b570      	push	{r4, r5, r6, lr}
 8011f2a:	4d0d      	ldr	r5, [pc, #52]	; (8011f60 <__libc_init_array+0x38>)
 8011f2c:	4c0d      	ldr	r4, [pc, #52]	; (8011f64 <__libc_init_array+0x3c>)
 8011f2e:	1b64      	subs	r4, r4, r5
 8011f30:	10a4      	asrs	r4, r4, #2
 8011f32:	2600      	movs	r6, #0
 8011f34:	42a6      	cmp	r6, r4
 8011f36:	d109      	bne.n	8011f4c <__libc_init_array+0x24>
 8011f38:	4d0b      	ldr	r5, [pc, #44]	; (8011f68 <__libc_init_array+0x40>)
 8011f3a:	4c0c      	ldr	r4, [pc, #48]	; (8011f6c <__libc_init_array+0x44>)
 8011f3c:	f001 f8a2 	bl	8013084 <_init>
 8011f40:	1b64      	subs	r4, r4, r5
 8011f42:	10a4      	asrs	r4, r4, #2
 8011f44:	2600      	movs	r6, #0
 8011f46:	42a6      	cmp	r6, r4
 8011f48:	d105      	bne.n	8011f56 <__libc_init_array+0x2e>
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f50:	4798      	blx	r3
 8011f52:	3601      	adds	r6, #1
 8011f54:	e7ee      	b.n	8011f34 <__libc_init_array+0xc>
 8011f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f5a:	4798      	blx	r3
 8011f5c:	3601      	adds	r6, #1
 8011f5e:	e7f2      	b.n	8011f46 <__libc_init_array+0x1e>
 8011f60:	080160e8 	.word	0x080160e8
 8011f64:	080160e8 	.word	0x080160e8
 8011f68:	080160e8 	.word	0x080160e8
 8011f6c:	080160ec 	.word	0x080160ec

08011f70 <memcmp>:
 8011f70:	b510      	push	{r4, lr}
 8011f72:	3901      	subs	r1, #1
 8011f74:	4402      	add	r2, r0
 8011f76:	4290      	cmp	r0, r2
 8011f78:	d101      	bne.n	8011f7e <memcmp+0xe>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e005      	b.n	8011f8a <memcmp+0x1a>
 8011f7e:	7803      	ldrb	r3, [r0, #0]
 8011f80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f84:	42a3      	cmp	r3, r4
 8011f86:	d001      	beq.n	8011f8c <memcmp+0x1c>
 8011f88:	1b18      	subs	r0, r3, r4
 8011f8a:	bd10      	pop	{r4, pc}
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	e7f2      	b.n	8011f76 <memcmp+0x6>

08011f90 <memcpy>:
 8011f90:	440a      	add	r2, r1
 8011f92:	4291      	cmp	r1, r2
 8011f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f98:	d100      	bne.n	8011f9c <memcpy+0xc>
 8011f9a:	4770      	bx	lr
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fa6:	4291      	cmp	r1, r2
 8011fa8:	d1f9      	bne.n	8011f9e <memcpy+0xe>
 8011faa:	bd10      	pop	{r4, pc}

08011fac <memset>:
 8011fac:	4402      	add	r2, r0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d100      	bne.n	8011fb6 <memset+0xa>
 8011fb4:	4770      	bx	lr
 8011fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8011fba:	e7f9      	b.n	8011fb0 <memset+0x4>

08011fbc <iprintf>:
 8011fbc:	b40f      	push	{r0, r1, r2, r3}
 8011fbe:	4b0a      	ldr	r3, [pc, #40]	; (8011fe8 <iprintf+0x2c>)
 8011fc0:	b513      	push	{r0, r1, r4, lr}
 8011fc2:	681c      	ldr	r4, [r3, #0]
 8011fc4:	b124      	cbz	r4, 8011fd0 <iprintf+0x14>
 8011fc6:	69a3      	ldr	r3, [r4, #24]
 8011fc8:	b913      	cbnz	r3, 8011fd0 <iprintf+0x14>
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f000 f8d6 	bl	801217c <__sinit>
 8011fd0:	ab05      	add	r3, sp, #20
 8011fd2:	9a04      	ldr	r2, [sp, #16]
 8011fd4:	68a1      	ldr	r1, [r4, #8]
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fa93 	bl	8012504 <_vfiprintf_r>
 8011fde:	b002      	add	sp, #8
 8011fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fe4:	b004      	add	sp, #16
 8011fe6:	4770      	bx	lr
 8011fe8:	20000018 	.word	0x20000018

08011fec <rand>:
 8011fec:	4b16      	ldr	r3, [pc, #88]	; (8012048 <rand+0x5c>)
 8011fee:	b510      	push	{r4, lr}
 8011ff0:	681c      	ldr	r4, [r3, #0]
 8011ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ff4:	b9b3      	cbnz	r3, 8012024 <rand+0x38>
 8011ff6:	2018      	movs	r0, #24
 8011ff8:	f000 f972 	bl	80122e0 <malloc>
 8011ffc:	63a0      	str	r0, [r4, #56]	; 0x38
 8011ffe:	b928      	cbnz	r0, 801200c <rand+0x20>
 8012000:	4602      	mov	r2, r0
 8012002:	4b12      	ldr	r3, [pc, #72]	; (801204c <rand+0x60>)
 8012004:	4812      	ldr	r0, [pc, #72]	; (8012050 <rand+0x64>)
 8012006:	214e      	movs	r1, #78	; 0x4e
 8012008:	f000 f842 	bl	8012090 <__assert_func>
 801200c:	4a11      	ldr	r2, [pc, #68]	; (8012054 <rand+0x68>)
 801200e:	4b12      	ldr	r3, [pc, #72]	; (8012058 <rand+0x6c>)
 8012010:	e9c0 2300 	strd	r2, r3, [r0]
 8012014:	4b11      	ldr	r3, [pc, #68]	; (801205c <rand+0x70>)
 8012016:	6083      	str	r3, [r0, #8]
 8012018:	230b      	movs	r3, #11
 801201a:	8183      	strh	r3, [r0, #12]
 801201c:	2201      	movs	r2, #1
 801201e:	2300      	movs	r3, #0
 8012020:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012024:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012026:	4a0e      	ldr	r2, [pc, #56]	; (8012060 <rand+0x74>)
 8012028:	6920      	ldr	r0, [r4, #16]
 801202a:	6963      	ldr	r3, [r4, #20]
 801202c:	490d      	ldr	r1, [pc, #52]	; (8012064 <rand+0x78>)
 801202e:	4342      	muls	r2, r0
 8012030:	fb01 2203 	mla	r2, r1, r3, r2
 8012034:	fba0 0101 	umull	r0, r1, r0, r1
 8012038:	1c43      	adds	r3, r0, #1
 801203a:	eb42 0001 	adc.w	r0, r2, r1
 801203e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012042:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012046:	bd10      	pop	{r4, pc}
 8012048:	20000018 	.word	0x20000018
 801204c:	08015f9c 	.word	0x08015f9c
 8012050:	08015fb3 	.word	0x08015fb3
 8012054:	abcd330e 	.word	0xabcd330e
 8012058:	e66d1234 	.word	0xe66d1234
 801205c:	0005deec 	.word	0x0005deec
 8012060:	5851f42d 	.word	0x5851f42d
 8012064:	4c957f2d 	.word	0x4c957f2d

08012068 <strncpy>:
 8012068:	b510      	push	{r4, lr}
 801206a:	3901      	subs	r1, #1
 801206c:	4603      	mov	r3, r0
 801206e:	b132      	cbz	r2, 801207e <strncpy+0x16>
 8012070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012074:	f803 4b01 	strb.w	r4, [r3], #1
 8012078:	3a01      	subs	r2, #1
 801207a:	2c00      	cmp	r4, #0
 801207c:	d1f7      	bne.n	801206e <strncpy+0x6>
 801207e:	441a      	add	r2, r3
 8012080:	2100      	movs	r1, #0
 8012082:	4293      	cmp	r3, r2
 8012084:	d100      	bne.n	8012088 <strncpy+0x20>
 8012086:	bd10      	pop	{r4, pc}
 8012088:	f803 1b01 	strb.w	r1, [r3], #1
 801208c:	e7f9      	b.n	8012082 <strncpy+0x1a>
	...

08012090 <__assert_func>:
 8012090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012092:	4614      	mov	r4, r2
 8012094:	461a      	mov	r2, r3
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <__assert_func+0x2c>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4605      	mov	r5, r0
 801209c:	68d8      	ldr	r0, [r3, #12]
 801209e:	b14c      	cbz	r4, 80120b4 <__assert_func+0x24>
 80120a0:	4b07      	ldr	r3, [pc, #28]	; (80120c0 <__assert_func+0x30>)
 80120a2:	9100      	str	r1, [sp, #0]
 80120a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120a8:	4906      	ldr	r1, [pc, #24]	; (80120c4 <__assert_func+0x34>)
 80120aa:	462b      	mov	r3, r5
 80120ac:	f000 f8e4 	bl	8012278 <fiprintf>
 80120b0:	f000 fe12 	bl	8012cd8 <abort>
 80120b4:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <__assert_func+0x38>)
 80120b6:	461c      	mov	r4, r3
 80120b8:	e7f3      	b.n	80120a2 <__assert_func+0x12>
 80120ba:	bf00      	nop
 80120bc:	20000018 	.word	0x20000018
 80120c0:	0801600e 	.word	0x0801600e
 80120c4:	0801601b 	.word	0x0801601b
 80120c8:	08016049 	.word	0x08016049

080120cc <std>:
 80120cc:	2300      	movs	r3, #0
 80120ce:	b510      	push	{r4, lr}
 80120d0:	4604      	mov	r4, r0
 80120d2:	e9c0 3300 	strd	r3, r3, [r0]
 80120d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120da:	6083      	str	r3, [r0, #8]
 80120dc:	8181      	strh	r1, [r0, #12]
 80120de:	6643      	str	r3, [r0, #100]	; 0x64
 80120e0:	81c2      	strh	r2, [r0, #14]
 80120e2:	6183      	str	r3, [r0, #24]
 80120e4:	4619      	mov	r1, r3
 80120e6:	2208      	movs	r2, #8
 80120e8:	305c      	adds	r0, #92	; 0x5c
 80120ea:	f7ff ff5f 	bl	8011fac <memset>
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <std+0x38>)
 80120f0:	6263      	str	r3, [r4, #36]	; 0x24
 80120f2:	4b05      	ldr	r3, [pc, #20]	; (8012108 <std+0x3c>)
 80120f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80120f6:	4b05      	ldr	r3, [pc, #20]	; (801210c <std+0x40>)
 80120f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120fa:	4b05      	ldr	r3, [pc, #20]	; (8012110 <std+0x44>)
 80120fc:	6224      	str	r4, [r4, #32]
 80120fe:	6323      	str	r3, [r4, #48]	; 0x30
 8012100:	bd10      	pop	{r4, pc}
 8012102:	bf00      	nop
 8012104:	08012aad 	.word	0x08012aad
 8012108:	08012acf 	.word	0x08012acf
 801210c:	08012b07 	.word	0x08012b07
 8012110:	08012b2b 	.word	0x08012b2b

08012114 <_cleanup_r>:
 8012114:	4901      	ldr	r1, [pc, #4]	; (801211c <_cleanup_r+0x8>)
 8012116:	f000 b8c1 	b.w	801229c <_fwalk_reent>
 801211a:	bf00      	nop
 801211c:	08012e15 	.word	0x08012e15

08012120 <__sfmoreglue>:
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	2268      	movs	r2, #104	; 0x68
 8012124:	1e4d      	subs	r5, r1, #1
 8012126:	4355      	muls	r5, r2
 8012128:	460e      	mov	r6, r1
 801212a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801212e:	f000 f94b 	bl	80123c8 <_malloc_r>
 8012132:	4604      	mov	r4, r0
 8012134:	b140      	cbz	r0, 8012148 <__sfmoreglue+0x28>
 8012136:	2100      	movs	r1, #0
 8012138:	e9c0 1600 	strd	r1, r6, [r0]
 801213c:	300c      	adds	r0, #12
 801213e:	60a0      	str	r0, [r4, #8]
 8012140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012144:	f7ff ff32 	bl	8011fac <memset>
 8012148:	4620      	mov	r0, r4
 801214a:	bd70      	pop	{r4, r5, r6, pc}

0801214c <__sfp_lock_acquire>:
 801214c:	4801      	ldr	r0, [pc, #4]	; (8012154 <__sfp_lock_acquire+0x8>)
 801214e:	f000 b8c5 	b.w	80122dc <__retarget_lock_acquire_recursive>
 8012152:	bf00      	nop
 8012154:	200069d1 	.word	0x200069d1

08012158 <__sfp_lock_release>:
 8012158:	4801      	ldr	r0, [pc, #4]	; (8012160 <__sfp_lock_release+0x8>)
 801215a:	f000 b8c0 	b.w	80122de <__retarget_lock_release_recursive>
 801215e:	bf00      	nop
 8012160:	200069d1 	.word	0x200069d1

08012164 <__sinit_lock_acquire>:
 8012164:	4801      	ldr	r0, [pc, #4]	; (801216c <__sinit_lock_acquire+0x8>)
 8012166:	f000 b8b9 	b.w	80122dc <__retarget_lock_acquire_recursive>
 801216a:	bf00      	nop
 801216c:	200069d2 	.word	0x200069d2

08012170 <__sinit_lock_release>:
 8012170:	4801      	ldr	r0, [pc, #4]	; (8012178 <__sinit_lock_release+0x8>)
 8012172:	f000 b8b4 	b.w	80122de <__retarget_lock_release_recursive>
 8012176:	bf00      	nop
 8012178:	200069d2 	.word	0x200069d2

0801217c <__sinit>:
 801217c:	b510      	push	{r4, lr}
 801217e:	4604      	mov	r4, r0
 8012180:	f7ff fff0 	bl	8012164 <__sinit_lock_acquire>
 8012184:	69a3      	ldr	r3, [r4, #24]
 8012186:	b11b      	cbz	r3, 8012190 <__sinit+0x14>
 8012188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801218c:	f7ff bff0 	b.w	8012170 <__sinit_lock_release>
 8012190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012194:	6523      	str	r3, [r4, #80]	; 0x50
 8012196:	4b13      	ldr	r3, [pc, #76]	; (80121e4 <__sinit+0x68>)
 8012198:	4a13      	ldr	r2, [pc, #76]	; (80121e8 <__sinit+0x6c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	62a2      	str	r2, [r4, #40]	; 0x28
 801219e:	42a3      	cmp	r3, r4
 80121a0:	bf04      	itt	eq
 80121a2:	2301      	moveq	r3, #1
 80121a4:	61a3      	streq	r3, [r4, #24]
 80121a6:	4620      	mov	r0, r4
 80121a8:	f000 f820 	bl	80121ec <__sfp>
 80121ac:	6060      	str	r0, [r4, #4]
 80121ae:	4620      	mov	r0, r4
 80121b0:	f000 f81c 	bl	80121ec <__sfp>
 80121b4:	60a0      	str	r0, [r4, #8]
 80121b6:	4620      	mov	r0, r4
 80121b8:	f000 f818 	bl	80121ec <__sfp>
 80121bc:	2200      	movs	r2, #0
 80121be:	60e0      	str	r0, [r4, #12]
 80121c0:	2104      	movs	r1, #4
 80121c2:	6860      	ldr	r0, [r4, #4]
 80121c4:	f7ff ff82 	bl	80120cc <std>
 80121c8:	68a0      	ldr	r0, [r4, #8]
 80121ca:	2201      	movs	r2, #1
 80121cc:	2109      	movs	r1, #9
 80121ce:	f7ff ff7d 	bl	80120cc <std>
 80121d2:	68e0      	ldr	r0, [r4, #12]
 80121d4:	2202      	movs	r2, #2
 80121d6:	2112      	movs	r1, #18
 80121d8:	f7ff ff78 	bl	80120cc <std>
 80121dc:	2301      	movs	r3, #1
 80121de:	61a3      	str	r3, [r4, #24]
 80121e0:	e7d2      	b.n	8012188 <__sinit+0xc>
 80121e2:	bf00      	nop
 80121e4:	08015f98 	.word	0x08015f98
 80121e8:	08012115 	.word	0x08012115

080121ec <__sfp>:
 80121ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ee:	4607      	mov	r7, r0
 80121f0:	f7ff ffac 	bl	801214c <__sfp_lock_acquire>
 80121f4:	4b1e      	ldr	r3, [pc, #120]	; (8012270 <__sfp+0x84>)
 80121f6:	681e      	ldr	r6, [r3, #0]
 80121f8:	69b3      	ldr	r3, [r6, #24]
 80121fa:	b913      	cbnz	r3, 8012202 <__sfp+0x16>
 80121fc:	4630      	mov	r0, r6
 80121fe:	f7ff ffbd 	bl	801217c <__sinit>
 8012202:	3648      	adds	r6, #72	; 0x48
 8012204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012208:	3b01      	subs	r3, #1
 801220a:	d503      	bpl.n	8012214 <__sfp+0x28>
 801220c:	6833      	ldr	r3, [r6, #0]
 801220e:	b30b      	cbz	r3, 8012254 <__sfp+0x68>
 8012210:	6836      	ldr	r6, [r6, #0]
 8012212:	e7f7      	b.n	8012204 <__sfp+0x18>
 8012214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012218:	b9d5      	cbnz	r5, 8012250 <__sfp+0x64>
 801221a:	4b16      	ldr	r3, [pc, #88]	; (8012274 <__sfp+0x88>)
 801221c:	60e3      	str	r3, [r4, #12]
 801221e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012222:	6665      	str	r5, [r4, #100]	; 0x64
 8012224:	f000 f859 	bl	80122da <__retarget_lock_init_recursive>
 8012228:	f7ff ff96 	bl	8012158 <__sfp_lock_release>
 801222c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012234:	6025      	str	r5, [r4, #0]
 8012236:	61a5      	str	r5, [r4, #24]
 8012238:	2208      	movs	r2, #8
 801223a:	4629      	mov	r1, r5
 801223c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012240:	f7ff feb4 	bl	8011fac <memset>
 8012244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801224c:	4620      	mov	r0, r4
 801224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012250:	3468      	adds	r4, #104	; 0x68
 8012252:	e7d9      	b.n	8012208 <__sfp+0x1c>
 8012254:	2104      	movs	r1, #4
 8012256:	4638      	mov	r0, r7
 8012258:	f7ff ff62 	bl	8012120 <__sfmoreglue>
 801225c:	4604      	mov	r4, r0
 801225e:	6030      	str	r0, [r6, #0]
 8012260:	2800      	cmp	r0, #0
 8012262:	d1d5      	bne.n	8012210 <__sfp+0x24>
 8012264:	f7ff ff78 	bl	8012158 <__sfp_lock_release>
 8012268:	230c      	movs	r3, #12
 801226a:	603b      	str	r3, [r7, #0]
 801226c:	e7ee      	b.n	801224c <__sfp+0x60>
 801226e:	bf00      	nop
 8012270:	08015f98 	.word	0x08015f98
 8012274:	ffff0001 	.word	0xffff0001

08012278 <fiprintf>:
 8012278:	b40e      	push	{r1, r2, r3}
 801227a:	b503      	push	{r0, r1, lr}
 801227c:	4601      	mov	r1, r0
 801227e:	ab03      	add	r3, sp, #12
 8012280:	4805      	ldr	r0, [pc, #20]	; (8012298 <fiprintf+0x20>)
 8012282:	f853 2b04 	ldr.w	r2, [r3], #4
 8012286:	6800      	ldr	r0, [r0, #0]
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	f000 f93b 	bl	8012504 <_vfiprintf_r>
 801228e:	b002      	add	sp, #8
 8012290:	f85d eb04 	ldr.w	lr, [sp], #4
 8012294:	b003      	add	sp, #12
 8012296:	4770      	bx	lr
 8012298:	20000018 	.word	0x20000018

0801229c <_fwalk_reent>:
 801229c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122a0:	4606      	mov	r6, r0
 80122a2:	4688      	mov	r8, r1
 80122a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80122a8:	2700      	movs	r7, #0
 80122aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80122ae:	f1b9 0901 	subs.w	r9, r9, #1
 80122b2:	d505      	bpl.n	80122c0 <_fwalk_reent+0x24>
 80122b4:	6824      	ldr	r4, [r4, #0]
 80122b6:	2c00      	cmp	r4, #0
 80122b8:	d1f7      	bne.n	80122aa <_fwalk_reent+0xe>
 80122ba:	4638      	mov	r0, r7
 80122bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c0:	89ab      	ldrh	r3, [r5, #12]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d907      	bls.n	80122d6 <_fwalk_reent+0x3a>
 80122c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122ca:	3301      	adds	r3, #1
 80122cc:	d003      	beq.n	80122d6 <_fwalk_reent+0x3a>
 80122ce:	4629      	mov	r1, r5
 80122d0:	4630      	mov	r0, r6
 80122d2:	47c0      	blx	r8
 80122d4:	4307      	orrs	r7, r0
 80122d6:	3568      	adds	r5, #104	; 0x68
 80122d8:	e7e9      	b.n	80122ae <_fwalk_reent+0x12>

080122da <__retarget_lock_init_recursive>:
 80122da:	4770      	bx	lr

080122dc <__retarget_lock_acquire_recursive>:
 80122dc:	4770      	bx	lr

080122de <__retarget_lock_release_recursive>:
 80122de:	4770      	bx	lr

080122e0 <malloc>:
 80122e0:	4b02      	ldr	r3, [pc, #8]	; (80122ec <malloc+0xc>)
 80122e2:	4601      	mov	r1, r0
 80122e4:	6818      	ldr	r0, [r3, #0]
 80122e6:	f000 b86f 	b.w	80123c8 <_malloc_r>
 80122ea:	bf00      	nop
 80122ec:	20000018 	.word	0x20000018

080122f0 <_free_r>:
 80122f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122f2:	2900      	cmp	r1, #0
 80122f4:	d044      	beq.n	8012380 <_free_r+0x90>
 80122f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122fa:	9001      	str	r0, [sp, #4]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f1a1 0404 	sub.w	r4, r1, #4
 8012302:	bfb8      	it	lt
 8012304:	18e4      	addlt	r4, r4, r3
 8012306:	f000 fe39 	bl	8012f7c <__malloc_lock>
 801230a:	4a1e      	ldr	r2, [pc, #120]	; (8012384 <_free_r+0x94>)
 801230c:	9801      	ldr	r0, [sp, #4]
 801230e:	6813      	ldr	r3, [r2, #0]
 8012310:	b933      	cbnz	r3, 8012320 <_free_r+0x30>
 8012312:	6063      	str	r3, [r4, #4]
 8012314:	6014      	str	r4, [r2, #0]
 8012316:	b003      	add	sp, #12
 8012318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801231c:	f000 be34 	b.w	8012f88 <__malloc_unlock>
 8012320:	42a3      	cmp	r3, r4
 8012322:	d908      	bls.n	8012336 <_free_r+0x46>
 8012324:	6825      	ldr	r5, [r4, #0]
 8012326:	1961      	adds	r1, r4, r5
 8012328:	428b      	cmp	r3, r1
 801232a:	bf01      	itttt	eq
 801232c:	6819      	ldreq	r1, [r3, #0]
 801232e:	685b      	ldreq	r3, [r3, #4]
 8012330:	1949      	addeq	r1, r1, r5
 8012332:	6021      	streq	r1, [r4, #0]
 8012334:	e7ed      	b.n	8012312 <_free_r+0x22>
 8012336:	461a      	mov	r2, r3
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	b10b      	cbz	r3, 8012340 <_free_r+0x50>
 801233c:	42a3      	cmp	r3, r4
 801233e:	d9fa      	bls.n	8012336 <_free_r+0x46>
 8012340:	6811      	ldr	r1, [r2, #0]
 8012342:	1855      	adds	r5, r2, r1
 8012344:	42a5      	cmp	r5, r4
 8012346:	d10b      	bne.n	8012360 <_free_r+0x70>
 8012348:	6824      	ldr	r4, [r4, #0]
 801234a:	4421      	add	r1, r4
 801234c:	1854      	adds	r4, r2, r1
 801234e:	42a3      	cmp	r3, r4
 8012350:	6011      	str	r1, [r2, #0]
 8012352:	d1e0      	bne.n	8012316 <_free_r+0x26>
 8012354:	681c      	ldr	r4, [r3, #0]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	6053      	str	r3, [r2, #4]
 801235a:	4421      	add	r1, r4
 801235c:	6011      	str	r1, [r2, #0]
 801235e:	e7da      	b.n	8012316 <_free_r+0x26>
 8012360:	d902      	bls.n	8012368 <_free_r+0x78>
 8012362:	230c      	movs	r3, #12
 8012364:	6003      	str	r3, [r0, #0]
 8012366:	e7d6      	b.n	8012316 <_free_r+0x26>
 8012368:	6825      	ldr	r5, [r4, #0]
 801236a:	1961      	adds	r1, r4, r5
 801236c:	428b      	cmp	r3, r1
 801236e:	bf04      	itt	eq
 8012370:	6819      	ldreq	r1, [r3, #0]
 8012372:	685b      	ldreq	r3, [r3, #4]
 8012374:	6063      	str	r3, [r4, #4]
 8012376:	bf04      	itt	eq
 8012378:	1949      	addeq	r1, r1, r5
 801237a:	6021      	streq	r1, [r4, #0]
 801237c:	6054      	str	r4, [r2, #4]
 801237e:	e7ca      	b.n	8012316 <_free_r+0x26>
 8012380:	b003      	add	sp, #12
 8012382:	bd30      	pop	{r4, r5, pc}
 8012384:	200069d4 	.word	0x200069d4

08012388 <sbrk_aligned>:
 8012388:	b570      	push	{r4, r5, r6, lr}
 801238a:	4e0e      	ldr	r6, [pc, #56]	; (80123c4 <sbrk_aligned+0x3c>)
 801238c:	460c      	mov	r4, r1
 801238e:	6831      	ldr	r1, [r6, #0]
 8012390:	4605      	mov	r5, r0
 8012392:	b911      	cbnz	r1, 801239a <sbrk_aligned+0x12>
 8012394:	f000 fb7a 	bl	8012a8c <_sbrk_r>
 8012398:	6030      	str	r0, [r6, #0]
 801239a:	4621      	mov	r1, r4
 801239c:	4628      	mov	r0, r5
 801239e:	f000 fb75 	bl	8012a8c <_sbrk_r>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	d00a      	beq.n	80123bc <sbrk_aligned+0x34>
 80123a6:	1cc4      	adds	r4, r0, #3
 80123a8:	f024 0403 	bic.w	r4, r4, #3
 80123ac:	42a0      	cmp	r0, r4
 80123ae:	d007      	beq.n	80123c0 <sbrk_aligned+0x38>
 80123b0:	1a21      	subs	r1, r4, r0
 80123b2:	4628      	mov	r0, r5
 80123b4:	f000 fb6a 	bl	8012a8c <_sbrk_r>
 80123b8:	3001      	adds	r0, #1
 80123ba:	d101      	bne.n	80123c0 <sbrk_aligned+0x38>
 80123bc:	f04f 34ff 	mov.w	r4, #4294967295
 80123c0:	4620      	mov	r0, r4
 80123c2:	bd70      	pop	{r4, r5, r6, pc}
 80123c4:	200069d8 	.word	0x200069d8

080123c8 <_malloc_r>:
 80123c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123cc:	1ccd      	adds	r5, r1, #3
 80123ce:	f025 0503 	bic.w	r5, r5, #3
 80123d2:	3508      	adds	r5, #8
 80123d4:	2d0c      	cmp	r5, #12
 80123d6:	bf38      	it	cc
 80123d8:	250c      	movcc	r5, #12
 80123da:	2d00      	cmp	r5, #0
 80123dc:	4607      	mov	r7, r0
 80123de:	db01      	blt.n	80123e4 <_malloc_r+0x1c>
 80123e0:	42a9      	cmp	r1, r5
 80123e2:	d905      	bls.n	80123f0 <_malloc_r+0x28>
 80123e4:	230c      	movs	r3, #12
 80123e6:	603b      	str	r3, [r7, #0]
 80123e8:	2600      	movs	r6, #0
 80123ea:	4630      	mov	r0, r6
 80123ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f0:	4e2e      	ldr	r6, [pc, #184]	; (80124ac <_malloc_r+0xe4>)
 80123f2:	f000 fdc3 	bl	8012f7c <__malloc_lock>
 80123f6:	6833      	ldr	r3, [r6, #0]
 80123f8:	461c      	mov	r4, r3
 80123fa:	bb34      	cbnz	r4, 801244a <_malloc_r+0x82>
 80123fc:	4629      	mov	r1, r5
 80123fe:	4638      	mov	r0, r7
 8012400:	f7ff ffc2 	bl	8012388 <sbrk_aligned>
 8012404:	1c43      	adds	r3, r0, #1
 8012406:	4604      	mov	r4, r0
 8012408:	d14d      	bne.n	80124a6 <_malloc_r+0xde>
 801240a:	6834      	ldr	r4, [r6, #0]
 801240c:	4626      	mov	r6, r4
 801240e:	2e00      	cmp	r6, #0
 8012410:	d140      	bne.n	8012494 <_malloc_r+0xcc>
 8012412:	6823      	ldr	r3, [r4, #0]
 8012414:	4631      	mov	r1, r6
 8012416:	4638      	mov	r0, r7
 8012418:	eb04 0803 	add.w	r8, r4, r3
 801241c:	f000 fb36 	bl	8012a8c <_sbrk_r>
 8012420:	4580      	cmp	r8, r0
 8012422:	d13a      	bne.n	801249a <_malloc_r+0xd2>
 8012424:	6821      	ldr	r1, [r4, #0]
 8012426:	3503      	adds	r5, #3
 8012428:	1a6d      	subs	r5, r5, r1
 801242a:	f025 0503 	bic.w	r5, r5, #3
 801242e:	3508      	adds	r5, #8
 8012430:	2d0c      	cmp	r5, #12
 8012432:	bf38      	it	cc
 8012434:	250c      	movcc	r5, #12
 8012436:	4629      	mov	r1, r5
 8012438:	4638      	mov	r0, r7
 801243a:	f7ff ffa5 	bl	8012388 <sbrk_aligned>
 801243e:	3001      	adds	r0, #1
 8012440:	d02b      	beq.n	801249a <_malloc_r+0xd2>
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	442b      	add	r3, r5
 8012446:	6023      	str	r3, [r4, #0]
 8012448:	e00e      	b.n	8012468 <_malloc_r+0xa0>
 801244a:	6822      	ldr	r2, [r4, #0]
 801244c:	1b52      	subs	r2, r2, r5
 801244e:	d41e      	bmi.n	801248e <_malloc_r+0xc6>
 8012450:	2a0b      	cmp	r2, #11
 8012452:	d916      	bls.n	8012482 <_malloc_r+0xba>
 8012454:	1961      	adds	r1, r4, r5
 8012456:	42a3      	cmp	r3, r4
 8012458:	6025      	str	r5, [r4, #0]
 801245a:	bf18      	it	ne
 801245c:	6059      	strne	r1, [r3, #4]
 801245e:	6863      	ldr	r3, [r4, #4]
 8012460:	bf08      	it	eq
 8012462:	6031      	streq	r1, [r6, #0]
 8012464:	5162      	str	r2, [r4, r5]
 8012466:	604b      	str	r3, [r1, #4]
 8012468:	4638      	mov	r0, r7
 801246a:	f104 060b 	add.w	r6, r4, #11
 801246e:	f000 fd8b 	bl	8012f88 <__malloc_unlock>
 8012472:	f026 0607 	bic.w	r6, r6, #7
 8012476:	1d23      	adds	r3, r4, #4
 8012478:	1af2      	subs	r2, r6, r3
 801247a:	d0b6      	beq.n	80123ea <_malloc_r+0x22>
 801247c:	1b9b      	subs	r3, r3, r6
 801247e:	50a3      	str	r3, [r4, r2]
 8012480:	e7b3      	b.n	80123ea <_malloc_r+0x22>
 8012482:	6862      	ldr	r2, [r4, #4]
 8012484:	42a3      	cmp	r3, r4
 8012486:	bf0c      	ite	eq
 8012488:	6032      	streq	r2, [r6, #0]
 801248a:	605a      	strne	r2, [r3, #4]
 801248c:	e7ec      	b.n	8012468 <_malloc_r+0xa0>
 801248e:	4623      	mov	r3, r4
 8012490:	6864      	ldr	r4, [r4, #4]
 8012492:	e7b2      	b.n	80123fa <_malloc_r+0x32>
 8012494:	4634      	mov	r4, r6
 8012496:	6876      	ldr	r6, [r6, #4]
 8012498:	e7b9      	b.n	801240e <_malloc_r+0x46>
 801249a:	230c      	movs	r3, #12
 801249c:	603b      	str	r3, [r7, #0]
 801249e:	4638      	mov	r0, r7
 80124a0:	f000 fd72 	bl	8012f88 <__malloc_unlock>
 80124a4:	e7a1      	b.n	80123ea <_malloc_r+0x22>
 80124a6:	6025      	str	r5, [r4, #0]
 80124a8:	e7de      	b.n	8012468 <_malloc_r+0xa0>
 80124aa:	bf00      	nop
 80124ac:	200069d4 	.word	0x200069d4

080124b0 <__sfputc_r>:
 80124b0:	6893      	ldr	r3, [r2, #8]
 80124b2:	3b01      	subs	r3, #1
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	b410      	push	{r4}
 80124b8:	6093      	str	r3, [r2, #8]
 80124ba:	da08      	bge.n	80124ce <__sfputc_r+0x1e>
 80124bc:	6994      	ldr	r4, [r2, #24]
 80124be:	42a3      	cmp	r3, r4
 80124c0:	db01      	blt.n	80124c6 <__sfputc_r+0x16>
 80124c2:	290a      	cmp	r1, #10
 80124c4:	d103      	bne.n	80124ce <__sfputc_r+0x1e>
 80124c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ca:	f000 bb33 	b.w	8012b34 <__swbuf_r>
 80124ce:	6813      	ldr	r3, [r2, #0]
 80124d0:	1c58      	adds	r0, r3, #1
 80124d2:	6010      	str	r0, [r2, #0]
 80124d4:	7019      	strb	r1, [r3, #0]
 80124d6:	4608      	mov	r0, r1
 80124d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124dc:	4770      	bx	lr

080124de <__sfputs_r>:
 80124de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e0:	4606      	mov	r6, r0
 80124e2:	460f      	mov	r7, r1
 80124e4:	4614      	mov	r4, r2
 80124e6:	18d5      	adds	r5, r2, r3
 80124e8:	42ac      	cmp	r4, r5
 80124ea:	d101      	bne.n	80124f0 <__sfputs_r+0x12>
 80124ec:	2000      	movs	r0, #0
 80124ee:	e007      	b.n	8012500 <__sfputs_r+0x22>
 80124f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124f4:	463a      	mov	r2, r7
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ffda 	bl	80124b0 <__sfputc_r>
 80124fc:	1c43      	adds	r3, r0, #1
 80124fe:	d1f3      	bne.n	80124e8 <__sfputs_r+0xa>
 8012500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012504 <_vfiprintf_r>:
 8012504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012508:	460d      	mov	r5, r1
 801250a:	b09d      	sub	sp, #116	; 0x74
 801250c:	4614      	mov	r4, r2
 801250e:	4698      	mov	r8, r3
 8012510:	4606      	mov	r6, r0
 8012512:	b118      	cbz	r0, 801251c <_vfiprintf_r+0x18>
 8012514:	6983      	ldr	r3, [r0, #24]
 8012516:	b90b      	cbnz	r3, 801251c <_vfiprintf_r+0x18>
 8012518:	f7ff fe30 	bl	801217c <__sinit>
 801251c:	4b89      	ldr	r3, [pc, #548]	; (8012744 <_vfiprintf_r+0x240>)
 801251e:	429d      	cmp	r5, r3
 8012520:	d11b      	bne.n	801255a <_vfiprintf_r+0x56>
 8012522:	6875      	ldr	r5, [r6, #4]
 8012524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012526:	07d9      	lsls	r1, r3, #31
 8012528:	d405      	bmi.n	8012536 <_vfiprintf_r+0x32>
 801252a:	89ab      	ldrh	r3, [r5, #12]
 801252c:	059a      	lsls	r2, r3, #22
 801252e:	d402      	bmi.n	8012536 <_vfiprintf_r+0x32>
 8012530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012532:	f7ff fed3 	bl	80122dc <__retarget_lock_acquire_recursive>
 8012536:	89ab      	ldrh	r3, [r5, #12]
 8012538:	071b      	lsls	r3, r3, #28
 801253a:	d501      	bpl.n	8012540 <_vfiprintf_r+0x3c>
 801253c:	692b      	ldr	r3, [r5, #16]
 801253e:	b9eb      	cbnz	r3, 801257c <_vfiprintf_r+0x78>
 8012540:	4629      	mov	r1, r5
 8012542:	4630      	mov	r0, r6
 8012544:	f000 fb5a 	bl	8012bfc <__swsetup_r>
 8012548:	b1c0      	cbz	r0, 801257c <_vfiprintf_r+0x78>
 801254a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801254c:	07dc      	lsls	r4, r3, #31
 801254e:	d50e      	bpl.n	801256e <_vfiprintf_r+0x6a>
 8012550:	f04f 30ff 	mov.w	r0, #4294967295
 8012554:	b01d      	add	sp, #116	; 0x74
 8012556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255a:	4b7b      	ldr	r3, [pc, #492]	; (8012748 <_vfiprintf_r+0x244>)
 801255c:	429d      	cmp	r5, r3
 801255e:	d101      	bne.n	8012564 <_vfiprintf_r+0x60>
 8012560:	68b5      	ldr	r5, [r6, #8]
 8012562:	e7df      	b.n	8012524 <_vfiprintf_r+0x20>
 8012564:	4b79      	ldr	r3, [pc, #484]	; (801274c <_vfiprintf_r+0x248>)
 8012566:	429d      	cmp	r5, r3
 8012568:	bf08      	it	eq
 801256a:	68f5      	ldreq	r5, [r6, #12]
 801256c:	e7da      	b.n	8012524 <_vfiprintf_r+0x20>
 801256e:	89ab      	ldrh	r3, [r5, #12]
 8012570:	0598      	lsls	r0, r3, #22
 8012572:	d4ed      	bmi.n	8012550 <_vfiprintf_r+0x4c>
 8012574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012576:	f7ff feb2 	bl	80122de <__retarget_lock_release_recursive>
 801257a:	e7e9      	b.n	8012550 <_vfiprintf_r+0x4c>
 801257c:	2300      	movs	r3, #0
 801257e:	9309      	str	r3, [sp, #36]	; 0x24
 8012580:	2320      	movs	r3, #32
 8012582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012586:	f8cd 800c 	str.w	r8, [sp, #12]
 801258a:	2330      	movs	r3, #48	; 0x30
 801258c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012750 <_vfiprintf_r+0x24c>
 8012590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012594:	f04f 0901 	mov.w	r9, #1
 8012598:	4623      	mov	r3, r4
 801259a:	469a      	mov	sl, r3
 801259c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125a0:	b10a      	cbz	r2, 80125a6 <_vfiprintf_r+0xa2>
 80125a2:	2a25      	cmp	r2, #37	; 0x25
 80125a4:	d1f9      	bne.n	801259a <_vfiprintf_r+0x96>
 80125a6:	ebba 0b04 	subs.w	fp, sl, r4
 80125aa:	d00b      	beq.n	80125c4 <_vfiprintf_r+0xc0>
 80125ac:	465b      	mov	r3, fp
 80125ae:	4622      	mov	r2, r4
 80125b0:	4629      	mov	r1, r5
 80125b2:	4630      	mov	r0, r6
 80125b4:	f7ff ff93 	bl	80124de <__sfputs_r>
 80125b8:	3001      	adds	r0, #1
 80125ba:	f000 80aa 	beq.w	8012712 <_vfiprintf_r+0x20e>
 80125be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125c0:	445a      	add	r2, fp
 80125c2:	9209      	str	r2, [sp, #36]	; 0x24
 80125c4:	f89a 3000 	ldrb.w	r3, [sl]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 80a2 	beq.w	8012712 <_vfiprintf_r+0x20e>
 80125ce:	2300      	movs	r3, #0
 80125d0:	f04f 32ff 	mov.w	r2, #4294967295
 80125d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125d8:	f10a 0a01 	add.w	sl, sl, #1
 80125dc:	9304      	str	r3, [sp, #16]
 80125de:	9307      	str	r3, [sp, #28]
 80125e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125e4:	931a      	str	r3, [sp, #104]	; 0x68
 80125e6:	4654      	mov	r4, sl
 80125e8:	2205      	movs	r2, #5
 80125ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ee:	4858      	ldr	r0, [pc, #352]	; (8012750 <_vfiprintf_r+0x24c>)
 80125f0:	f7ed fe2e 	bl	8000250 <memchr>
 80125f4:	9a04      	ldr	r2, [sp, #16]
 80125f6:	b9d8      	cbnz	r0, 8012630 <_vfiprintf_r+0x12c>
 80125f8:	06d1      	lsls	r1, r2, #27
 80125fa:	bf44      	itt	mi
 80125fc:	2320      	movmi	r3, #32
 80125fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012602:	0713      	lsls	r3, r2, #28
 8012604:	bf44      	itt	mi
 8012606:	232b      	movmi	r3, #43	; 0x2b
 8012608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801260c:	f89a 3000 	ldrb.w	r3, [sl]
 8012610:	2b2a      	cmp	r3, #42	; 0x2a
 8012612:	d015      	beq.n	8012640 <_vfiprintf_r+0x13c>
 8012614:	9a07      	ldr	r2, [sp, #28]
 8012616:	4654      	mov	r4, sl
 8012618:	2000      	movs	r0, #0
 801261a:	f04f 0c0a 	mov.w	ip, #10
 801261e:	4621      	mov	r1, r4
 8012620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012624:	3b30      	subs	r3, #48	; 0x30
 8012626:	2b09      	cmp	r3, #9
 8012628:	d94e      	bls.n	80126c8 <_vfiprintf_r+0x1c4>
 801262a:	b1b0      	cbz	r0, 801265a <_vfiprintf_r+0x156>
 801262c:	9207      	str	r2, [sp, #28]
 801262e:	e014      	b.n	801265a <_vfiprintf_r+0x156>
 8012630:	eba0 0308 	sub.w	r3, r0, r8
 8012634:	fa09 f303 	lsl.w	r3, r9, r3
 8012638:	4313      	orrs	r3, r2
 801263a:	9304      	str	r3, [sp, #16]
 801263c:	46a2      	mov	sl, r4
 801263e:	e7d2      	b.n	80125e6 <_vfiprintf_r+0xe2>
 8012640:	9b03      	ldr	r3, [sp, #12]
 8012642:	1d19      	adds	r1, r3, #4
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	9103      	str	r1, [sp, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	bfbb      	ittet	lt
 801264c:	425b      	neglt	r3, r3
 801264e:	f042 0202 	orrlt.w	r2, r2, #2
 8012652:	9307      	strge	r3, [sp, #28]
 8012654:	9307      	strlt	r3, [sp, #28]
 8012656:	bfb8      	it	lt
 8012658:	9204      	strlt	r2, [sp, #16]
 801265a:	7823      	ldrb	r3, [r4, #0]
 801265c:	2b2e      	cmp	r3, #46	; 0x2e
 801265e:	d10c      	bne.n	801267a <_vfiprintf_r+0x176>
 8012660:	7863      	ldrb	r3, [r4, #1]
 8012662:	2b2a      	cmp	r3, #42	; 0x2a
 8012664:	d135      	bne.n	80126d2 <_vfiprintf_r+0x1ce>
 8012666:	9b03      	ldr	r3, [sp, #12]
 8012668:	1d1a      	adds	r2, r3, #4
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	9203      	str	r2, [sp, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	bfb8      	it	lt
 8012672:	f04f 33ff 	movlt.w	r3, #4294967295
 8012676:	3402      	adds	r4, #2
 8012678:	9305      	str	r3, [sp, #20]
 801267a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012760 <_vfiprintf_r+0x25c>
 801267e:	7821      	ldrb	r1, [r4, #0]
 8012680:	2203      	movs	r2, #3
 8012682:	4650      	mov	r0, sl
 8012684:	f7ed fde4 	bl	8000250 <memchr>
 8012688:	b140      	cbz	r0, 801269c <_vfiprintf_r+0x198>
 801268a:	2340      	movs	r3, #64	; 0x40
 801268c:	eba0 000a 	sub.w	r0, r0, sl
 8012690:	fa03 f000 	lsl.w	r0, r3, r0
 8012694:	9b04      	ldr	r3, [sp, #16]
 8012696:	4303      	orrs	r3, r0
 8012698:	3401      	adds	r4, #1
 801269a:	9304      	str	r3, [sp, #16]
 801269c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126a0:	482c      	ldr	r0, [pc, #176]	; (8012754 <_vfiprintf_r+0x250>)
 80126a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126a6:	2206      	movs	r2, #6
 80126a8:	f7ed fdd2 	bl	8000250 <memchr>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d03f      	beq.n	8012730 <_vfiprintf_r+0x22c>
 80126b0:	4b29      	ldr	r3, [pc, #164]	; (8012758 <_vfiprintf_r+0x254>)
 80126b2:	bb1b      	cbnz	r3, 80126fc <_vfiprintf_r+0x1f8>
 80126b4:	9b03      	ldr	r3, [sp, #12]
 80126b6:	3307      	adds	r3, #7
 80126b8:	f023 0307 	bic.w	r3, r3, #7
 80126bc:	3308      	adds	r3, #8
 80126be:	9303      	str	r3, [sp, #12]
 80126c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126c2:	443b      	add	r3, r7
 80126c4:	9309      	str	r3, [sp, #36]	; 0x24
 80126c6:	e767      	b.n	8012598 <_vfiprintf_r+0x94>
 80126c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80126cc:	460c      	mov	r4, r1
 80126ce:	2001      	movs	r0, #1
 80126d0:	e7a5      	b.n	801261e <_vfiprintf_r+0x11a>
 80126d2:	2300      	movs	r3, #0
 80126d4:	3401      	adds	r4, #1
 80126d6:	9305      	str	r3, [sp, #20]
 80126d8:	4619      	mov	r1, r3
 80126da:	f04f 0c0a 	mov.w	ip, #10
 80126de:	4620      	mov	r0, r4
 80126e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126e4:	3a30      	subs	r2, #48	; 0x30
 80126e6:	2a09      	cmp	r2, #9
 80126e8:	d903      	bls.n	80126f2 <_vfiprintf_r+0x1ee>
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d0c5      	beq.n	801267a <_vfiprintf_r+0x176>
 80126ee:	9105      	str	r1, [sp, #20]
 80126f0:	e7c3      	b.n	801267a <_vfiprintf_r+0x176>
 80126f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80126f6:	4604      	mov	r4, r0
 80126f8:	2301      	movs	r3, #1
 80126fa:	e7f0      	b.n	80126de <_vfiprintf_r+0x1da>
 80126fc:	ab03      	add	r3, sp, #12
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	462a      	mov	r2, r5
 8012702:	4b16      	ldr	r3, [pc, #88]	; (801275c <_vfiprintf_r+0x258>)
 8012704:	a904      	add	r1, sp, #16
 8012706:	4630      	mov	r0, r6
 8012708:	f3af 8000 	nop.w
 801270c:	4607      	mov	r7, r0
 801270e:	1c78      	adds	r0, r7, #1
 8012710:	d1d6      	bne.n	80126c0 <_vfiprintf_r+0x1bc>
 8012712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012714:	07d9      	lsls	r1, r3, #31
 8012716:	d405      	bmi.n	8012724 <_vfiprintf_r+0x220>
 8012718:	89ab      	ldrh	r3, [r5, #12]
 801271a:	059a      	lsls	r2, r3, #22
 801271c:	d402      	bmi.n	8012724 <_vfiprintf_r+0x220>
 801271e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012720:	f7ff fddd 	bl	80122de <__retarget_lock_release_recursive>
 8012724:	89ab      	ldrh	r3, [r5, #12]
 8012726:	065b      	lsls	r3, r3, #25
 8012728:	f53f af12 	bmi.w	8012550 <_vfiprintf_r+0x4c>
 801272c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801272e:	e711      	b.n	8012554 <_vfiprintf_r+0x50>
 8012730:	ab03      	add	r3, sp, #12
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	462a      	mov	r2, r5
 8012736:	4b09      	ldr	r3, [pc, #36]	; (801275c <_vfiprintf_r+0x258>)
 8012738:	a904      	add	r1, sp, #16
 801273a:	4630      	mov	r0, r6
 801273c:	f000 f880 	bl	8012840 <_printf_i>
 8012740:	e7e4      	b.n	801270c <_vfiprintf_r+0x208>
 8012742:	bf00      	nop
 8012744:	0801606c 	.word	0x0801606c
 8012748:	0801608c 	.word	0x0801608c
 801274c:	0801604c 	.word	0x0801604c
 8012750:	080160ac 	.word	0x080160ac
 8012754:	080160b6 	.word	0x080160b6
 8012758:	00000000 	.word	0x00000000
 801275c:	080124df 	.word	0x080124df
 8012760:	080160b2 	.word	0x080160b2

08012764 <_printf_common>:
 8012764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012768:	4616      	mov	r6, r2
 801276a:	4699      	mov	r9, r3
 801276c:	688a      	ldr	r2, [r1, #8]
 801276e:	690b      	ldr	r3, [r1, #16]
 8012770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012774:	4293      	cmp	r3, r2
 8012776:	bfb8      	it	lt
 8012778:	4613      	movlt	r3, r2
 801277a:	6033      	str	r3, [r6, #0]
 801277c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012780:	4607      	mov	r7, r0
 8012782:	460c      	mov	r4, r1
 8012784:	b10a      	cbz	r2, 801278a <_printf_common+0x26>
 8012786:	3301      	adds	r3, #1
 8012788:	6033      	str	r3, [r6, #0]
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	0699      	lsls	r1, r3, #26
 801278e:	bf42      	ittt	mi
 8012790:	6833      	ldrmi	r3, [r6, #0]
 8012792:	3302      	addmi	r3, #2
 8012794:	6033      	strmi	r3, [r6, #0]
 8012796:	6825      	ldr	r5, [r4, #0]
 8012798:	f015 0506 	ands.w	r5, r5, #6
 801279c:	d106      	bne.n	80127ac <_printf_common+0x48>
 801279e:	f104 0a19 	add.w	sl, r4, #25
 80127a2:	68e3      	ldr	r3, [r4, #12]
 80127a4:	6832      	ldr	r2, [r6, #0]
 80127a6:	1a9b      	subs	r3, r3, r2
 80127a8:	42ab      	cmp	r3, r5
 80127aa:	dc26      	bgt.n	80127fa <_printf_common+0x96>
 80127ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80127b0:	1e13      	subs	r3, r2, #0
 80127b2:	6822      	ldr	r2, [r4, #0]
 80127b4:	bf18      	it	ne
 80127b6:	2301      	movne	r3, #1
 80127b8:	0692      	lsls	r2, r2, #26
 80127ba:	d42b      	bmi.n	8012814 <_printf_common+0xb0>
 80127bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127c0:	4649      	mov	r1, r9
 80127c2:	4638      	mov	r0, r7
 80127c4:	47c0      	blx	r8
 80127c6:	3001      	adds	r0, #1
 80127c8:	d01e      	beq.n	8012808 <_printf_common+0xa4>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	68e5      	ldr	r5, [r4, #12]
 80127ce:	6832      	ldr	r2, [r6, #0]
 80127d0:	f003 0306 	and.w	r3, r3, #6
 80127d4:	2b04      	cmp	r3, #4
 80127d6:	bf08      	it	eq
 80127d8:	1aad      	subeq	r5, r5, r2
 80127da:	68a3      	ldr	r3, [r4, #8]
 80127dc:	6922      	ldr	r2, [r4, #16]
 80127de:	bf0c      	ite	eq
 80127e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127e4:	2500      	movne	r5, #0
 80127e6:	4293      	cmp	r3, r2
 80127e8:	bfc4      	itt	gt
 80127ea:	1a9b      	subgt	r3, r3, r2
 80127ec:	18ed      	addgt	r5, r5, r3
 80127ee:	2600      	movs	r6, #0
 80127f0:	341a      	adds	r4, #26
 80127f2:	42b5      	cmp	r5, r6
 80127f4:	d11a      	bne.n	801282c <_printf_common+0xc8>
 80127f6:	2000      	movs	r0, #0
 80127f8:	e008      	b.n	801280c <_printf_common+0xa8>
 80127fa:	2301      	movs	r3, #1
 80127fc:	4652      	mov	r2, sl
 80127fe:	4649      	mov	r1, r9
 8012800:	4638      	mov	r0, r7
 8012802:	47c0      	blx	r8
 8012804:	3001      	adds	r0, #1
 8012806:	d103      	bne.n	8012810 <_printf_common+0xac>
 8012808:	f04f 30ff 	mov.w	r0, #4294967295
 801280c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012810:	3501      	adds	r5, #1
 8012812:	e7c6      	b.n	80127a2 <_printf_common+0x3e>
 8012814:	18e1      	adds	r1, r4, r3
 8012816:	1c5a      	adds	r2, r3, #1
 8012818:	2030      	movs	r0, #48	; 0x30
 801281a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801281e:	4422      	add	r2, r4
 8012820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012828:	3302      	adds	r3, #2
 801282a:	e7c7      	b.n	80127bc <_printf_common+0x58>
 801282c:	2301      	movs	r3, #1
 801282e:	4622      	mov	r2, r4
 8012830:	4649      	mov	r1, r9
 8012832:	4638      	mov	r0, r7
 8012834:	47c0      	blx	r8
 8012836:	3001      	adds	r0, #1
 8012838:	d0e6      	beq.n	8012808 <_printf_common+0xa4>
 801283a:	3601      	adds	r6, #1
 801283c:	e7d9      	b.n	80127f2 <_printf_common+0x8e>
	...

08012840 <_printf_i>:
 8012840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012844:	7e0f      	ldrb	r7, [r1, #24]
 8012846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012848:	2f78      	cmp	r7, #120	; 0x78
 801284a:	4691      	mov	r9, r2
 801284c:	4680      	mov	r8, r0
 801284e:	460c      	mov	r4, r1
 8012850:	469a      	mov	sl, r3
 8012852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012856:	d807      	bhi.n	8012868 <_printf_i+0x28>
 8012858:	2f62      	cmp	r7, #98	; 0x62
 801285a:	d80a      	bhi.n	8012872 <_printf_i+0x32>
 801285c:	2f00      	cmp	r7, #0
 801285e:	f000 80d8 	beq.w	8012a12 <_printf_i+0x1d2>
 8012862:	2f58      	cmp	r7, #88	; 0x58
 8012864:	f000 80a3 	beq.w	80129ae <_printf_i+0x16e>
 8012868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801286c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012870:	e03a      	b.n	80128e8 <_printf_i+0xa8>
 8012872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012876:	2b15      	cmp	r3, #21
 8012878:	d8f6      	bhi.n	8012868 <_printf_i+0x28>
 801287a:	a101      	add	r1, pc, #4	; (adr r1, 8012880 <_printf_i+0x40>)
 801287c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012880:	080128d9 	.word	0x080128d9
 8012884:	080128ed 	.word	0x080128ed
 8012888:	08012869 	.word	0x08012869
 801288c:	08012869 	.word	0x08012869
 8012890:	08012869 	.word	0x08012869
 8012894:	08012869 	.word	0x08012869
 8012898:	080128ed 	.word	0x080128ed
 801289c:	08012869 	.word	0x08012869
 80128a0:	08012869 	.word	0x08012869
 80128a4:	08012869 	.word	0x08012869
 80128a8:	08012869 	.word	0x08012869
 80128ac:	080129f9 	.word	0x080129f9
 80128b0:	0801291d 	.word	0x0801291d
 80128b4:	080129db 	.word	0x080129db
 80128b8:	08012869 	.word	0x08012869
 80128bc:	08012869 	.word	0x08012869
 80128c0:	08012a1b 	.word	0x08012a1b
 80128c4:	08012869 	.word	0x08012869
 80128c8:	0801291d 	.word	0x0801291d
 80128cc:	08012869 	.word	0x08012869
 80128d0:	08012869 	.word	0x08012869
 80128d4:	080129e3 	.word	0x080129e3
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	1d1a      	adds	r2, r3, #4
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	602a      	str	r2, [r5, #0]
 80128e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128e8:	2301      	movs	r3, #1
 80128ea:	e0a3      	b.n	8012a34 <_printf_i+0x1f4>
 80128ec:	6820      	ldr	r0, [r4, #0]
 80128ee:	6829      	ldr	r1, [r5, #0]
 80128f0:	0606      	lsls	r6, r0, #24
 80128f2:	f101 0304 	add.w	r3, r1, #4
 80128f6:	d50a      	bpl.n	801290e <_printf_i+0xce>
 80128f8:	680e      	ldr	r6, [r1, #0]
 80128fa:	602b      	str	r3, [r5, #0]
 80128fc:	2e00      	cmp	r6, #0
 80128fe:	da03      	bge.n	8012908 <_printf_i+0xc8>
 8012900:	232d      	movs	r3, #45	; 0x2d
 8012902:	4276      	negs	r6, r6
 8012904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012908:	485e      	ldr	r0, [pc, #376]	; (8012a84 <_printf_i+0x244>)
 801290a:	230a      	movs	r3, #10
 801290c:	e019      	b.n	8012942 <_printf_i+0x102>
 801290e:	680e      	ldr	r6, [r1, #0]
 8012910:	602b      	str	r3, [r5, #0]
 8012912:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012916:	bf18      	it	ne
 8012918:	b236      	sxthne	r6, r6
 801291a:	e7ef      	b.n	80128fc <_printf_i+0xbc>
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	6820      	ldr	r0, [r4, #0]
 8012920:	1d19      	adds	r1, r3, #4
 8012922:	6029      	str	r1, [r5, #0]
 8012924:	0601      	lsls	r1, r0, #24
 8012926:	d501      	bpl.n	801292c <_printf_i+0xec>
 8012928:	681e      	ldr	r6, [r3, #0]
 801292a:	e002      	b.n	8012932 <_printf_i+0xf2>
 801292c:	0646      	lsls	r6, r0, #25
 801292e:	d5fb      	bpl.n	8012928 <_printf_i+0xe8>
 8012930:	881e      	ldrh	r6, [r3, #0]
 8012932:	4854      	ldr	r0, [pc, #336]	; (8012a84 <_printf_i+0x244>)
 8012934:	2f6f      	cmp	r7, #111	; 0x6f
 8012936:	bf0c      	ite	eq
 8012938:	2308      	moveq	r3, #8
 801293a:	230a      	movne	r3, #10
 801293c:	2100      	movs	r1, #0
 801293e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012942:	6865      	ldr	r5, [r4, #4]
 8012944:	60a5      	str	r5, [r4, #8]
 8012946:	2d00      	cmp	r5, #0
 8012948:	bfa2      	ittt	ge
 801294a:	6821      	ldrge	r1, [r4, #0]
 801294c:	f021 0104 	bicge.w	r1, r1, #4
 8012950:	6021      	strge	r1, [r4, #0]
 8012952:	b90e      	cbnz	r6, 8012958 <_printf_i+0x118>
 8012954:	2d00      	cmp	r5, #0
 8012956:	d04d      	beq.n	80129f4 <_printf_i+0x1b4>
 8012958:	4615      	mov	r5, r2
 801295a:	fbb6 f1f3 	udiv	r1, r6, r3
 801295e:	fb03 6711 	mls	r7, r3, r1, r6
 8012962:	5dc7      	ldrb	r7, [r0, r7]
 8012964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012968:	4637      	mov	r7, r6
 801296a:	42bb      	cmp	r3, r7
 801296c:	460e      	mov	r6, r1
 801296e:	d9f4      	bls.n	801295a <_printf_i+0x11a>
 8012970:	2b08      	cmp	r3, #8
 8012972:	d10b      	bne.n	801298c <_printf_i+0x14c>
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	07de      	lsls	r6, r3, #31
 8012978:	d508      	bpl.n	801298c <_printf_i+0x14c>
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	6861      	ldr	r1, [r4, #4]
 801297e:	4299      	cmp	r1, r3
 8012980:	bfde      	ittt	le
 8012982:	2330      	movle	r3, #48	; 0x30
 8012984:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012988:	f105 35ff 	addle.w	r5, r5, #4294967295
 801298c:	1b52      	subs	r2, r2, r5
 801298e:	6122      	str	r2, [r4, #16]
 8012990:	f8cd a000 	str.w	sl, [sp]
 8012994:	464b      	mov	r3, r9
 8012996:	aa03      	add	r2, sp, #12
 8012998:	4621      	mov	r1, r4
 801299a:	4640      	mov	r0, r8
 801299c:	f7ff fee2 	bl	8012764 <_printf_common>
 80129a0:	3001      	adds	r0, #1
 80129a2:	d14c      	bne.n	8012a3e <_printf_i+0x1fe>
 80129a4:	f04f 30ff 	mov.w	r0, #4294967295
 80129a8:	b004      	add	sp, #16
 80129aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ae:	4835      	ldr	r0, [pc, #212]	; (8012a84 <_printf_i+0x244>)
 80129b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80129b4:	6829      	ldr	r1, [r5, #0]
 80129b6:	6823      	ldr	r3, [r4, #0]
 80129b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80129bc:	6029      	str	r1, [r5, #0]
 80129be:	061d      	lsls	r5, r3, #24
 80129c0:	d514      	bpl.n	80129ec <_printf_i+0x1ac>
 80129c2:	07df      	lsls	r7, r3, #31
 80129c4:	bf44      	itt	mi
 80129c6:	f043 0320 	orrmi.w	r3, r3, #32
 80129ca:	6023      	strmi	r3, [r4, #0]
 80129cc:	b91e      	cbnz	r6, 80129d6 <_printf_i+0x196>
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	f023 0320 	bic.w	r3, r3, #32
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	2310      	movs	r3, #16
 80129d8:	e7b0      	b.n	801293c <_printf_i+0xfc>
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	f043 0320 	orr.w	r3, r3, #32
 80129e0:	6023      	str	r3, [r4, #0]
 80129e2:	2378      	movs	r3, #120	; 0x78
 80129e4:	4828      	ldr	r0, [pc, #160]	; (8012a88 <_printf_i+0x248>)
 80129e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129ea:	e7e3      	b.n	80129b4 <_printf_i+0x174>
 80129ec:	0659      	lsls	r1, r3, #25
 80129ee:	bf48      	it	mi
 80129f0:	b2b6      	uxthmi	r6, r6
 80129f2:	e7e6      	b.n	80129c2 <_printf_i+0x182>
 80129f4:	4615      	mov	r5, r2
 80129f6:	e7bb      	b.n	8012970 <_printf_i+0x130>
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	6826      	ldr	r6, [r4, #0]
 80129fc:	6961      	ldr	r1, [r4, #20]
 80129fe:	1d18      	adds	r0, r3, #4
 8012a00:	6028      	str	r0, [r5, #0]
 8012a02:	0635      	lsls	r5, r6, #24
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	d501      	bpl.n	8012a0c <_printf_i+0x1cc>
 8012a08:	6019      	str	r1, [r3, #0]
 8012a0a:	e002      	b.n	8012a12 <_printf_i+0x1d2>
 8012a0c:	0670      	lsls	r0, r6, #25
 8012a0e:	d5fb      	bpl.n	8012a08 <_printf_i+0x1c8>
 8012a10:	8019      	strh	r1, [r3, #0]
 8012a12:	2300      	movs	r3, #0
 8012a14:	6123      	str	r3, [r4, #16]
 8012a16:	4615      	mov	r5, r2
 8012a18:	e7ba      	b.n	8012990 <_printf_i+0x150>
 8012a1a:	682b      	ldr	r3, [r5, #0]
 8012a1c:	1d1a      	adds	r2, r3, #4
 8012a1e:	602a      	str	r2, [r5, #0]
 8012a20:	681d      	ldr	r5, [r3, #0]
 8012a22:	6862      	ldr	r2, [r4, #4]
 8012a24:	2100      	movs	r1, #0
 8012a26:	4628      	mov	r0, r5
 8012a28:	f7ed fc12 	bl	8000250 <memchr>
 8012a2c:	b108      	cbz	r0, 8012a32 <_printf_i+0x1f2>
 8012a2e:	1b40      	subs	r0, r0, r5
 8012a30:	6060      	str	r0, [r4, #4]
 8012a32:	6863      	ldr	r3, [r4, #4]
 8012a34:	6123      	str	r3, [r4, #16]
 8012a36:	2300      	movs	r3, #0
 8012a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a3c:	e7a8      	b.n	8012990 <_printf_i+0x150>
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	462a      	mov	r2, r5
 8012a42:	4649      	mov	r1, r9
 8012a44:	4640      	mov	r0, r8
 8012a46:	47d0      	blx	sl
 8012a48:	3001      	adds	r0, #1
 8012a4a:	d0ab      	beq.n	80129a4 <_printf_i+0x164>
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	079b      	lsls	r3, r3, #30
 8012a50:	d413      	bmi.n	8012a7a <_printf_i+0x23a>
 8012a52:	68e0      	ldr	r0, [r4, #12]
 8012a54:	9b03      	ldr	r3, [sp, #12]
 8012a56:	4298      	cmp	r0, r3
 8012a58:	bfb8      	it	lt
 8012a5a:	4618      	movlt	r0, r3
 8012a5c:	e7a4      	b.n	80129a8 <_printf_i+0x168>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	4632      	mov	r2, r6
 8012a62:	4649      	mov	r1, r9
 8012a64:	4640      	mov	r0, r8
 8012a66:	47d0      	blx	sl
 8012a68:	3001      	adds	r0, #1
 8012a6a:	d09b      	beq.n	80129a4 <_printf_i+0x164>
 8012a6c:	3501      	adds	r5, #1
 8012a6e:	68e3      	ldr	r3, [r4, #12]
 8012a70:	9903      	ldr	r1, [sp, #12]
 8012a72:	1a5b      	subs	r3, r3, r1
 8012a74:	42ab      	cmp	r3, r5
 8012a76:	dcf2      	bgt.n	8012a5e <_printf_i+0x21e>
 8012a78:	e7eb      	b.n	8012a52 <_printf_i+0x212>
 8012a7a:	2500      	movs	r5, #0
 8012a7c:	f104 0619 	add.w	r6, r4, #25
 8012a80:	e7f5      	b.n	8012a6e <_printf_i+0x22e>
 8012a82:	bf00      	nop
 8012a84:	080160bd 	.word	0x080160bd
 8012a88:	080160ce 	.word	0x080160ce

08012a8c <_sbrk_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d06      	ldr	r5, [pc, #24]	; (8012aa8 <_sbrk_r+0x1c>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	602b      	str	r3, [r5, #0]
 8012a98:	f7ee f94a 	bl	8000d30 <_sbrk>
 8012a9c:	1c43      	adds	r3, r0, #1
 8012a9e:	d102      	bne.n	8012aa6 <_sbrk_r+0x1a>
 8012aa0:	682b      	ldr	r3, [r5, #0]
 8012aa2:	b103      	cbz	r3, 8012aa6 <_sbrk_r+0x1a>
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	bd38      	pop	{r3, r4, r5, pc}
 8012aa8:	200069cc 	.word	0x200069cc

08012aac <__sread>:
 8012aac:	b510      	push	{r4, lr}
 8012aae:	460c      	mov	r4, r1
 8012ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab4:	f000 fa6e 	bl	8012f94 <_read_r>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	bfab      	itete	ge
 8012abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012abe:	89a3      	ldrhlt	r3, [r4, #12]
 8012ac0:	181b      	addge	r3, r3, r0
 8012ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012ac6:	bfac      	ite	ge
 8012ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012aca:	81a3      	strhlt	r3, [r4, #12]
 8012acc:	bd10      	pop	{r4, pc}

08012ace <__swrite>:
 8012ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad2:	461f      	mov	r7, r3
 8012ad4:	898b      	ldrh	r3, [r1, #12]
 8012ad6:	05db      	lsls	r3, r3, #23
 8012ad8:	4605      	mov	r5, r0
 8012ada:	460c      	mov	r4, r1
 8012adc:	4616      	mov	r6, r2
 8012ade:	d505      	bpl.n	8012aec <__swrite+0x1e>
 8012ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ae4:	2302      	movs	r3, #2
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f000 f9d0 	bl	8012e8c <_lseek_r>
 8012aec:	89a3      	ldrh	r3, [r4, #12]
 8012aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012af6:	81a3      	strh	r3, [r4, #12]
 8012af8:	4632      	mov	r2, r6
 8012afa:	463b      	mov	r3, r7
 8012afc:	4628      	mov	r0, r5
 8012afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b02:	f000 b869 	b.w	8012bd8 <_write_r>

08012b06 <__sseek>:
 8012b06:	b510      	push	{r4, lr}
 8012b08:	460c      	mov	r4, r1
 8012b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b0e:	f000 f9bd 	bl	8012e8c <_lseek_r>
 8012b12:	1c43      	adds	r3, r0, #1
 8012b14:	89a3      	ldrh	r3, [r4, #12]
 8012b16:	bf15      	itete	ne
 8012b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b22:	81a3      	strheq	r3, [r4, #12]
 8012b24:	bf18      	it	ne
 8012b26:	81a3      	strhne	r3, [r4, #12]
 8012b28:	bd10      	pop	{r4, pc}

08012b2a <__sclose>:
 8012b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b2e:	f000 b8db 	b.w	8012ce8 <_close_r>
	...

08012b34 <__swbuf_r>:
 8012b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b36:	460e      	mov	r6, r1
 8012b38:	4614      	mov	r4, r2
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	b118      	cbz	r0, 8012b46 <__swbuf_r+0x12>
 8012b3e:	6983      	ldr	r3, [r0, #24]
 8012b40:	b90b      	cbnz	r3, 8012b46 <__swbuf_r+0x12>
 8012b42:	f7ff fb1b 	bl	801217c <__sinit>
 8012b46:	4b21      	ldr	r3, [pc, #132]	; (8012bcc <__swbuf_r+0x98>)
 8012b48:	429c      	cmp	r4, r3
 8012b4a:	d12b      	bne.n	8012ba4 <__swbuf_r+0x70>
 8012b4c:	686c      	ldr	r4, [r5, #4]
 8012b4e:	69a3      	ldr	r3, [r4, #24]
 8012b50:	60a3      	str	r3, [r4, #8]
 8012b52:	89a3      	ldrh	r3, [r4, #12]
 8012b54:	071a      	lsls	r2, r3, #28
 8012b56:	d52f      	bpl.n	8012bb8 <__swbuf_r+0x84>
 8012b58:	6923      	ldr	r3, [r4, #16]
 8012b5a:	b36b      	cbz	r3, 8012bb8 <__swbuf_r+0x84>
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	6820      	ldr	r0, [r4, #0]
 8012b60:	1ac0      	subs	r0, r0, r3
 8012b62:	6963      	ldr	r3, [r4, #20]
 8012b64:	b2f6      	uxtb	r6, r6
 8012b66:	4283      	cmp	r3, r0
 8012b68:	4637      	mov	r7, r6
 8012b6a:	dc04      	bgt.n	8012b76 <__swbuf_r+0x42>
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f000 f950 	bl	8012e14 <_fflush_r>
 8012b74:	bb30      	cbnz	r0, 8012bc4 <__swbuf_r+0x90>
 8012b76:	68a3      	ldr	r3, [r4, #8]
 8012b78:	3b01      	subs	r3, #1
 8012b7a:	60a3      	str	r3, [r4, #8]
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	6022      	str	r2, [r4, #0]
 8012b82:	701e      	strb	r6, [r3, #0]
 8012b84:	6963      	ldr	r3, [r4, #20]
 8012b86:	3001      	adds	r0, #1
 8012b88:	4283      	cmp	r3, r0
 8012b8a:	d004      	beq.n	8012b96 <__swbuf_r+0x62>
 8012b8c:	89a3      	ldrh	r3, [r4, #12]
 8012b8e:	07db      	lsls	r3, r3, #31
 8012b90:	d506      	bpl.n	8012ba0 <__swbuf_r+0x6c>
 8012b92:	2e0a      	cmp	r6, #10
 8012b94:	d104      	bne.n	8012ba0 <__swbuf_r+0x6c>
 8012b96:	4621      	mov	r1, r4
 8012b98:	4628      	mov	r0, r5
 8012b9a:	f000 f93b 	bl	8012e14 <_fflush_r>
 8012b9e:	b988      	cbnz	r0, 8012bc4 <__swbuf_r+0x90>
 8012ba0:	4638      	mov	r0, r7
 8012ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba4:	4b0a      	ldr	r3, [pc, #40]	; (8012bd0 <__swbuf_r+0x9c>)
 8012ba6:	429c      	cmp	r4, r3
 8012ba8:	d101      	bne.n	8012bae <__swbuf_r+0x7a>
 8012baa:	68ac      	ldr	r4, [r5, #8]
 8012bac:	e7cf      	b.n	8012b4e <__swbuf_r+0x1a>
 8012bae:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <__swbuf_r+0xa0>)
 8012bb0:	429c      	cmp	r4, r3
 8012bb2:	bf08      	it	eq
 8012bb4:	68ec      	ldreq	r4, [r5, #12]
 8012bb6:	e7ca      	b.n	8012b4e <__swbuf_r+0x1a>
 8012bb8:	4621      	mov	r1, r4
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f000 f81e 	bl	8012bfc <__swsetup_r>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	d0cb      	beq.n	8012b5c <__swbuf_r+0x28>
 8012bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8012bc8:	e7ea      	b.n	8012ba0 <__swbuf_r+0x6c>
 8012bca:	bf00      	nop
 8012bcc:	0801606c 	.word	0x0801606c
 8012bd0:	0801608c 	.word	0x0801608c
 8012bd4:	0801604c 	.word	0x0801604c

08012bd8 <_write_r>:
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	4d07      	ldr	r5, [pc, #28]	; (8012bf8 <_write_r+0x20>)
 8012bdc:	4604      	mov	r4, r0
 8012bde:	4608      	mov	r0, r1
 8012be0:	4611      	mov	r1, r2
 8012be2:	2200      	movs	r2, #0
 8012be4:	602a      	str	r2, [r5, #0]
 8012be6:	461a      	mov	r2, r3
 8012be8:	f7ee f851 	bl	8000c8e <_write>
 8012bec:	1c43      	adds	r3, r0, #1
 8012bee:	d102      	bne.n	8012bf6 <_write_r+0x1e>
 8012bf0:	682b      	ldr	r3, [r5, #0]
 8012bf2:	b103      	cbz	r3, 8012bf6 <_write_r+0x1e>
 8012bf4:	6023      	str	r3, [r4, #0]
 8012bf6:	bd38      	pop	{r3, r4, r5, pc}
 8012bf8:	200069cc 	.word	0x200069cc

08012bfc <__swsetup_r>:
 8012bfc:	4b32      	ldr	r3, [pc, #200]	; (8012cc8 <__swsetup_r+0xcc>)
 8012bfe:	b570      	push	{r4, r5, r6, lr}
 8012c00:	681d      	ldr	r5, [r3, #0]
 8012c02:	4606      	mov	r6, r0
 8012c04:	460c      	mov	r4, r1
 8012c06:	b125      	cbz	r5, 8012c12 <__swsetup_r+0x16>
 8012c08:	69ab      	ldr	r3, [r5, #24]
 8012c0a:	b913      	cbnz	r3, 8012c12 <__swsetup_r+0x16>
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	f7ff fab5 	bl	801217c <__sinit>
 8012c12:	4b2e      	ldr	r3, [pc, #184]	; (8012ccc <__swsetup_r+0xd0>)
 8012c14:	429c      	cmp	r4, r3
 8012c16:	d10f      	bne.n	8012c38 <__swsetup_r+0x3c>
 8012c18:	686c      	ldr	r4, [r5, #4]
 8012c1a:	89a3      	ldrh	r3, [r4, #12]
 8012c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c20:	0719      	lsls	r1, r3, #28
 8012c22:	d42c      	bmi.n	8012c7e <__swsetup_r+0x82>
 8012c24:	06dd      	lsls	r5, r3, #27
 8012c26:	d411      	bmi.n	8012c4c <__swsetup_r+0x50>
 8012c28:	2309      	movs	r3, #9
 8012c2a:	6033      	str	r3, [r6, #0]
 8012c2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c30:	81a3      	strh	r3, [r4, #12]
 8012c32:	f04f 30ff 	mov.w	r0, #4294967295
 8012c36:	e03e      	b.n	8012cb6 <__swsetup_r+0xba>
 8012c38:	4b25      	ldr	r3, [pc, #148]	; (8012cd0 <__swsetup_r+0xd4>)
 8012c3a:	429c      	cmp	r4, r3
 8012c3c:	d101      	bne.n	8012c42 <__swsetup_r+0x46>
 8012c3e:	68ac      	ldr	r4, [r5, #8]
 8012c40:	e7eb      	b.n	8012c1a <__swsetup_r+0x1e>
 8012c42:	4b24      	ldr	r3, [pc, #144]	; (8012cd4 <__swsetup_r+0xd8>)
 8012c44:	429c      	cmp	r4, r3
 8012c46:	bf08      	it	eq
 8012c48:	68ec      	ldreq	r4, [r5, #12]
 8012c4a:	e7e6      	b.n	8012c1a <__swsetup_r+0x1e>
 8012c4c:	0758      	lsls	r0, r3, #29
 8012c4e:	d512      	bpl.n	8012c76 <__swsetup_r+0x7a>
 8012c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c52:	b141      	cbz	r1, 8012c66 <__swsetup_r+0x6a>
 8012c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c58:	4299      	cmp	r1, r3
 8012c5a:	d002      	beq.n	8012c62 <__swsetup_r+0x66>
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	f7ff fb47 	bl	80122f0 <_free_r>
 8012c62:	2300      	movs	r3, #0
 8012c64:	6363      	str	r3, [r4, #52]	; 0x34
 8012c66:	89a3      	ldrh	r3, [r4, #12]
 8012c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	6063      	str	r3, [r4, #4]
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	6023      	str	r3, [r4, #0]
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f043 0308 	orr.w	r3, r3, #8
 8012c7c:	81a3      	strh	r3, [r4, #12]
 8012c7e:	6923      	ldr	r3, [r4, #16]
 8012c80:	b94b      	cbnz	r3, 8012c96 <__swsetup_r+0x9a>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c8c:	d003      	beq.n	8012c96 <__swsetup_r+0x9a>
 8012c8e:	4621      	mov	r1, r4
 8012c90:	4630      	mov	r0, r6
 8012c92:	f000 f933 	bl	8012efc <__smakebuf_r>
 8012c96:	89a0      	ldrh	r0, [r4, #12]
 8012c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c9c:	f010 0301 	ands.w	r3, r0, #1
 8012ca0:	d00a      	beq.n	8012cb8 <__swsetup_r+0xbc>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	60a3      	str	r3, [r4, #8]
 8012ca6:	6963      	ldr	r3, [r4, #20]
 8012ca8:	425b      	negs	r3, r3
 8012caa:	61a3      	str	r3, [r4, #24]
 8012cac:	6923      	ldr	r3, [r4, #16]
 8012cae:	b943      	cbnz	r3, 8012cc2 <__swsetup_r+0xc6>
 8012cb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012cb4:	d1ba      	bne.n	8012c2c <__swsetup_r+0x30>
 8012cb6:	bd70      	pop	{r4, r5, r6, pc}
 8012cb8:	0781      	lsls	r1, r0, #30
 8012cba:	bf58      	it	pl
 8012cbc:	6963      	ldrpl	r3, [r4, #20]
 8012cbe:	60a3      	str	r3, [r4, #8]
 8012cc0:	e7f4      	b.n	8012cac <__swsetup_r+0xb0>
 8012cc2:	2000      	movs	r0, #0
 8012cc4:	e7f7      	b.n	8012cb6 <__swsetup_r+0xba>
 8012cc6:	bf00      	nop
 8012cc8:	20000018 	.word	0x20000018
 8012ccc:	0801606c 	.word	0x0801606c
 8012cd0:	0801608c 	.word	0x0801608c
 8012cd4:	0801604c 	.word	0x0801604c

08012cd8 <abort>:
 8012cd8:	b508      	push	{r3, lr}
 8012cda:	2006      	movs	r0, #6
 8012cdc:	f000 f994 	bl	8013008 <raise>
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	f7ed ffad 	bl	8000c40 <_exit>
	...

08012ce8 <_close_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d06      	ldr	r5, [pc, #24]	; (8012d04 <_close_r+0x1c>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	f7ed ffe7 	bl	8000cc6 <_close>
 8012cf8:	1c43      	adds	r3, r0, #1
 8012cfa:	d102      	bne.n	8012d02 <_close_r+0x1a>
 8012cfc:	682b      	ldr	r3, [r5, #0]
 8012cfe:	b103      	cbz	r3, 8012d02 <_close_r+0x1a>
 8012d00:	6023      	str	r3, [r4, #0]
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	200069cc 	.word	0x200069cc

08012d08 <__sflush_r>:
 8012d08:	898a      	ldrh	r2, [r1, #12]
 8012d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0e:	4605      	mov	r5, r0
 8012d10:	0710      	lsls	r0, r2, #28
 8012d12:	460c      	mov	r4, r1
 8012d14:	d458      	bmi.n	8012dc8 <__sflush_r+0xc0>
 8012d16:	684b      	ldr	r3, [r1, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dc05      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	dc02      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d22:	2000      	movs	r0, #0
 8012d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d0f9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d34:	682f      	ldr	r7, [r5, #0]
 8012d36:	602b      	str	r3, [r5, #0]
 8012d38:	d032      	beq.n	8012da0 <__sflush_r+0x98>
 8012d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d3c:	89a3      	ldrh	r3, [r4, #12]
 8012d3e:	075a      	lsls	r2, r3, #29
 8012d40:	d505      	bpl.n	8012d4e <__sflush_r+0x46>
 8012d42:	6863      	ldr	r3, [r4, #4]
 8012d44:	1ac0      	subs	r0, r0, r3
 8012d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d48:	b10b      	cbz	r3, 8012d4e <__sflush_r+0x46>
 8012d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d4c:	1ac0      	subs	r0, r0, r3
 8012d4e:	2300      	movs	r3, #0
 8012d50:	4602      	mov	r2, r0
 8012d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d54:	6a21      	ldr	r1, [r4, #32]
 8012d56:	4628      	mov	r0, r5
 8012d58:	47b0      	blx	r6
 8012d5a:	1c43      	adds	r3, r0, #1
 8012d5c:	89a3      	ldrh	r3, [r4, #12]
 8012d5e:	d106      	bne.n	8012d6e <__sflush_r+0x66>
 8012d60:	6829      	ldr	r1, [r5, #0]
 8012d62:	291d      	cmp	r1, #29
 8012d64:	d82c      	bhi.n	8012dc0 <__sflush_r+0xb8>
 8012d66:	4a2a      	ldr	r2, [pc, #168]	; (8012e10 <__sflush_r+0x108>)
 8012d68:	40ca      	lsrs	r2, r1
 8012d6a:	07d6      	lsls	r6, r2, #31
 8012d6c:	d528      	bpl.n	8012dc0 <__sflush_r+0xb8>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	6062      	str	r2, [r4, #4]
 8012d72:	04d9      	lsls	r1, r3, #19
 8012d74:	6922      	ldr	r2, [r4, #16]
 8012d76:	6022      	str	r2, [r4, #0]
 8012d78:	d504      	bpl.n	8012d84 <__sflush_r+0x7c>
 8012d7a:	1c42      	adds	r2, r0, #1
 8012d7c:	d101      	bne.n	8012d82 <__sflush_r+0x7a>
 8012d7e:	682b      	ldr	r3, [r5, #0]
 8012d80:	b903      	cbnz	r3, 8012d84 <__sflush_r+0x7c>
 8012d82:	6560      	str	r0, [r4, #84]	; 0x54
 8012d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d86:	602f      	str	r7, [r5, #0]
 8012d88:	2900      	cmp	r1, #0
 8012d8a:	d0ca      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d90:	4299      	cmp	r1, r3
 8012d92:	d002      	beq.n	8012d9a <__sflush_r+0x92>
 8012d94:	4628      	mov	r0, r5
 8012d96:	f7ff faab 	bl	80122f0 <_free_r>
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8012d9e:	e7c1      	b.n	8012d24 <__sflush_r+0x1c>
 8012da0:	6a21      	ldr	r1, [r4, #32]
 8012da2:	2301      	movs	r3, #1
 8012da4:	4628      	mov	r0, r5
 8012da6:	47b0      	blx	r6
 8012da8:	1c41      	adds	r1, r0, #1
 8012daa:	d1c7      	bne.n	8012d3c <__sflush_r+0x34>
 8012dac:	682b      	ldr	r3, [r5, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d0c4      	beq.n	8012d3c <__sflush_r+0x34>
 8012db2:	2b1d      	cmp	r3, #29
 8012db4:	d001      	beq.n	8012dba <__sflush_r+0xb2>
 8012db6:	2b16      	cmp	r3, #22
 8012db8:	d101      	bne.n	8012dbe <__sflush_r+0xb6>
 8012dba:	602f      	str	r7, [r5, #0]
 8012dbc:	e7b1      	b.n	8012d22 <__sflush_r+0x1a>
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	e7ad      	b.n	8012d24 <__sflush_r+0x1c>
 8012dc8:	690f      	ldr	r7, [r1, #16]
 8012dca:	2f00      	cmp	r7, #0
 8012dcc:	d0a9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012dce:	0793      	lsls	r3, r2, #30
 8012dd0:	680e      	ldr	r6, [r1, #0]
 8012dd2:	bf08      	it	eq
 8012dd4:	694b      	ldreq	r3, [r1, #20]
 8012dd6:	600f      	str	r7, [r1, #0]
 8012dd8:	bf18      	it	ne
 8012dda:	2300      	movne	r3, #0
 8012ddc:	eba6 0807 	sub.w	r8, r6, r7
 8012de0:	608b      	str	r3, [r1, #8]
 8012de2:	f1b8 0f00 	cmp.w	r8, #0
 8012de6:	dd9c      	ble.n	8012d22 <__sflush_r+0x1a>
 8012de8:	6a21      	ldr	r1, [r4, #32]
 8012dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012dec:	4643      	mov	r3, r8
 8012dee:	463a      	mov	r2, r7
 8012df0:	4628      	mov	r0, r5
 8012df2:	47b0      	blx	r6
 8012df4:	2800      	cmp	r0, #0
 8012df6:	dc06      	bgt.n	8012e06 <__sflush_r+0xfe>
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfe:	81a3      	strh	r3, [r4, #12]
 8012e00:	f04f 30ff 	mov.w	r0, #4294967295
 8012e04:	e78e      	b.n	8012d24 <__sflush_r+0x1c>
 8012e06:	4407      	add	r7, r0
 8012e08:	eba8 0800 	sub.w	r8, r8, r0
 8012e0c:	e7e9      	b.n	8012de2 <__sflush_r+0xda>
 8012e0e:	bf00      	nop
 8012e10:	20400001 	.word	0x20400001

08012e14 <_fflush_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	690b      	ldr	r3, [r1, #16]
 8012e18:	4605      	mov	r5, r0
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	b913      	cbnz	r3, 8012e24 <_fflush_r+0x10>
 8012e1e:	2500      	movs	r5, #0
 8012e20:	4628      	mov	r0, r5
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
 8012e24:	b118      	cbz	r0, 8012e2e <_fflush_r+0x1a>
 8012e26:	6983      	ldr	r3, [r0, #24]
 8012e28:	b90b      	cbnz	r3, 8012e2e <_fflush_r+0x1a>
 8012e2a:	f7ff f9a7 	bl	801217c <__sinit>
 8012e2e:	4b14      	ldr	r3, [pc, #80]	; (8012e80 <_fflush_r+0x6c>)
 8012e30:	429c      	cmp	r4, r3
 8012e32:	d11b      	bne.n	8012e6c <_fflush_r+0x58>
 8012e34:	686c      	ldr	r4, [r5, #4]
 8012e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d0ef      	beq.n	8012e1e <_fflush_r+0xa>
 8012e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e40:	07d0      	lsls	r0, r2, #31
 8012e42:	d404      	bmi.n	8012e4e <_fflush_r+0x3a>
 8012e44:	0599      	lsls	r1, r3, #22
 8012e46:	d402      	bmi.n	8012e4e <_fflush_r+0x3a>
 8012e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e4a:	f7ff fa47 	bl	80122dc <__retarget_lock_acquire_recursive>
 8012e4e:	4628      	mov	r0, r5
 8012e50:	4621      	mov	r1, r4
 8012e52:	f7ff ff59 	bl	8012d08 <__sflush_r>
 8012e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e58:	07da      	lsls	r2, r3, #31
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	d4e0      	bmi.n	8012e20 <_fflush_r+0xc>
 8012e5e:	89a3      	ldrh	r3, [r4, #12]
 8012e60:	059b      	lsls	r3, r3, #22
 8012e62:	d4dd      	bmi.n	8012e20 <_fflush_r+0xc>
 8012e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e66:	f7ff fa3a 	bl	80122de <__retarget_lock_release_recursive>
 8012e6a:	e7d9      	b.n	8012e20 <_fflush_r+0xc>
 8012e6c:	4b05      	ldr	r3, [pc, #20]	; (8012e84 <_fflush_r+0x70>)
 8012e6e:	429c      	cmp	r4, r3
 8012e70:	d101      	bne.n	8012e76 <_fflush_r+0x62>
 8012e72:	68ac      	ldr	r4, [r5, #8]
 8012e74:	e7df      	b.n	8012e36 <_fflush_r+0x22>
 8012e76:	4b04      	ldr	r3, [pc, #16]	; (8012e88 <_fflush_r+0x74>)
 8012e78:	429c      	cmp	r4, r3
 8012e7a:	bf08      	it	eq
 8012e7c:	68ec      	ldreq	r4, [r5, #12]
 8012e7e:	e7da      	b.n	8012e36 <_fflush_r+0x22>
 8012e80:	0801606c 	.word	0x0801606c
 8012e84:	0801608c 	.word	0x0801608c
 8012e88:	0801604c 	.word	0x0801604c

08012e8c <_lseek_r>:
 8012e8c:	b538      	push	{r3, r4, r5, lr}
 8012e8e:	4d07      	ldr	r5, [pc, #28]	; (8012eac <_lseek_r+0x20>)
 8012e90:	4604      	mov	r4, r0
 8012e92:	4608      	mov	r0, r1
 8012e94:	4611      	mov	r1, r2
 8012e96:	2200      	movs	r2, #0
 8012e98:	602a      	str	r2, [r5, #0]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	f7ed ff3a 	bl	8000d14 <_lseek>
 8012ea0:	1c43      	adds	r3, r0, #1
 8012ea2:	d102      	bne.n	8012eaa <_lseek_r+0x1e>
 8012ea4:	682b      	ldr	r3, [r5, #0]
 8012ea6:	b103      	cbz	r3, 8012eaa <_lseek_r+0x1e>
 8012ea8:	6023      	str	r3, [r4, #0]
 8012eaa:	bd38      	pop	{r3, r4, r5, pc}
 8012eac:	200069cc 	.word	0x200069cc

08012eb0 <__swhatbuf_r>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	460e      	mov	r6, r1
 8012eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb8:	2900      	cmp	r1, #0
 8012eba:	b096      	sub	sp, #88	; 0x58
 8012ebc:	4614      	mov	r4, r2
 8012ebe:	461d      	mov	r5, r3
 8012ec0:	da08      	bge.n	8012ed4 <__swhatbuf_r+0x24>
 8012ec2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	602a      	str	r2, [r5, #0]
 8012eca:	061a      	lsls	r2, r3, #24
 8012ecc:	d410      	bmi.n	8012ef0 <__swhatbuf_r+0x40>
 8012ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ed2:	e00e      	b.n	8012ef2 <__swhatbuf_r+0x42>
 8012ed4:	466a      	mov	r2, sp
 8012ed6:	f000 f8b3 	bl	8013040 <_fstat_r>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	dbf1      	blt.n	8012ec2 <__swhatbuf_r+0x12>
 8012ede:	9a01      	ldr	r2, [sp, #4]
 8012ee0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ee4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ee8:	425a      	negs	r2, r3
 8012eea:	415a      	adcs	r2, r3
 8012eec:	602a      	str	r2, [r5, #0]
 8012eee:	e7ee      	b.n	8012ece <__swhatbuf_r+0x1e>
 8012ef0:	2340      	movs	r3, #64	; 0x40
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	b016      	add	sp, #88	; 0x58
 8012ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08012efc <__smakebuf_r>:
 8012efc:	898b      	ldrh	r3, [r1, #12]
 8012efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f00:	079d      	lsls	r5, r3, #30
 8012f02:	4606      	mov	r6, r0
 8012f04:	460c      	mov	r4, r1
 8012f06:	d507      	bpl.n	8012f18 <__smakebuf_r+0x1c>
 8012f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	6123      	str	r3, [r4, #16]
 8012f10:	2301      	movs	r3, #1
 8012f12:	6163      	str	r3, [r4, #20]
 8012f14:	b002      	add	sp, #8
 8012f16:	bd70      	pop	{r4, r5, r6, pc}
 8012f18:	ab01      	add	r3, sp, #4
 8012f1a:	466a      	mov	r2, sp
 8012f1c:	f7ff ffc8 	bl	8012eb0 <__swhatbuf_r>
 8012f20:	9900      	ldr	r1, [sp, #0]
 8012f22:	4605      	mov	r5, r0
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7ff fa4f 	bl	80123c8 <_malloc_r>
 8012f2a:	b948      	cbnz	r0, 8012f40 <__smakebuf_r+0x44>
 8012f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f30:	059a      	lsls	r2, r3, #22
 8012f32:	d4ef      	bmi.n	8012f14 <__smakebuf_r+0x18>
 8012f34:	f023 0303 	bic.w	r3, r3, #3
 8012f38:	f043 0302 	orr.w	r3, r3, #2
 8012f3c:	81a3      	strh	r3, [r4, #12]
 8012f3e:	e7e3      	b.n	8012f08 <__smakebuf_r+0xc>
 8012f40:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <__smakebuf_r+0x7c>)
 8012f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f44:	89a3      	ldrh	r3, [r4, #12]
 8012f46:	6020      	str	r0, [r4, #0]
 8012f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f4c:	81a3      	strh	r3, [r4, #12]
 8012f4e:	9b00      	ldr	r3, [sp, #0]
 8012f50:	6163      	str	r3, [r4, #20]
 8012f52:	9b01      	ldr	r3, [sp, #4]
 8012f54:	6120      	str	r0, [r4, #16]
 8012f56:	b15b      	cbz	r3, 8012f70 <__smakebuf_r+0x74>
 8012f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	f000 f881 	bl	8013064 <_isatty_r>
 8012f62:	b128      	cbz	r0, 8012f70 <__smakebuf_r+0x74>
 8012f64:	89a3      	ldrh	r3, [r4, #12]
 8012f66:	f023 0303 	bic.w	r3, r3, #3
 8012f6a:	f043 0301 	orr.w	r3, r3, #1
 8012f6e:	81a3      	strh	r3, [r4, #12]
 8012f70:	89a0      	ldrh	r0, [r4, #12]
 8012f72:	4305      	orrs	r5, r0
 8012f74:	81a5      	strh	r5, [r4, #12]
 8012f76:	e7cd      	b.n	8012f14 <__smakebuf_r+0x18>
 8012f78:	08012115 	.word	0x08012115

08012f7c <__malloc_lock>:
 8012f7c:	4801      	ldr	r0, [pc, #4]	; (8012f84 <__malloc_lock+0x8>)
 8012f7e:	f7ff b9ad 	b.w	80122dc <__retarget_lock_acquire_recursive>
 8012f82:	bf00      	nop
 8012f84:	200069d0 	.word	0x200069d0

08012f88 <__malloc_unlock>:
 8012f88:	4801      	ldr	r0, [pc, #4]	; (8012f90 <__malloc_unlock+0x8>)
 8012f8a:	f7ff b9a8 	b.w	80122de <__retarget_lock_release_recursive>
 8012f8e:	bf00      	nop
 8012f90:	200069d0 	.word	0x200069d0

08012f94 <_read_r>:
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4d07      	ldr	r5, [pc, #28]	; (8012fb4 <_read_r+0x20>)
 8012f98:	4604      	mov	r4, r0
 8012f9a:	4608      	mov	r0, r1
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	602a      	str	r2, [r5, #0]
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	f7ed fe56 	bl	8000c54 <_read>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d102      	bne.n	8012fb2 <_read_r+0x1e>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	b103      	cbz	r3, 8012fb2 <_read_r+0x1e>
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	bd38      	pop	{r3, r4, r5, pc}
 8012fb4:	200069cc 	.word	0x200069cc

08012fb8 <_raise_r>:
 8012fb8:	291f      	cmp	r1, #31
 8012fba:	b538      	push	{r3, r4, r5, lr}
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	460d      	mov	r5, r1
 8012fc0:	d904      	bls.n	8012fcc <_raise_r+0x14>
 8012fc2:	2316      	movs	r3, #22
 8012fc4:	6003      	str	r3, [r0, #0]
 8012fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8012fca:	bd38      	pop	{r3, r4, r5, pc}
 8012fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012fce:	b112      	cbz	r2, 8012fd6 <_raise_r+0x1e>
 8012fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fd4:	b94b      	cbnz	r3, 8012fea <_raise_r+0x32>
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 f830 	bl	801303c <_getpid_r>
 8012fdc:	462a      	mov	r2, r5
 8012fde:	4601      	mov	r1, r0
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fe6:	f000 b817 	b.w	8013018 <_kill_r>
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d00a      	beq.n	8013004 <_raise_r+0x4c>
 8012fee:	1c59      	adds	r1, r3, #1
 8012ff0:	d103      	bne.n	8012ffa <_raise_r+0x42>
 8012ff2:	2316      	movs	r3, #22
 8012ff4:	6003      	str	r3, [r0, #0]
 8012ff6:	2001      	movs	r0, #1
 8012ff8:	e7e7      	b.n	8012fca <_raise_r+0x12>
 8012ffa:	2400      	movs	r4, #0
 8012ffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013000:	4628      	mov	r0, r5
 8013002:	4798      	blx	r3
 8013004:	2000      	movs	r0, #0
 8013006:	e7e0      	b.n	8012fca <_raise_r+0x12>

08013008 <raise>:
 8013008:	4b02      	ldr	r3, [pc, #8]	; (8013014 <raise+0xc>)
 801300a:	4601      	mov	r1, r0
 801300c:	6818      	ldr	r0, [r3, #0]
 801300e:	f7ff bfd3 	b.w	8012fb8 <_raise_r>
 8013012:	bf00      	nop
 8013014:	20000018 	.word	0x20000018

08013018 <_kill_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d07      	ldr	r5, [pc, #28]	; (8013038 <_kill_r+0x20>)
 801301c:	2300      	movs	r3, #0
 801301e:	4604      	mov	r4, r0
 8013020:	4608      	mov	r0, r1
 8013022:	4611      	mov	r1, r2
 8013024:	602b      	str	r3, [r5, #0]
 8013026:	f7ed fdf9 	bl	8000c1c <_kill>
 801302a:	1c43      	adds	r3, r0, #1
 801302c:	d102      	bne.n	8013034 <_kill_r+0x1c>
 801302e:	682b      	ldr	r3, [r5, #0]
 8013030:	b103      	cbz	r3, 8013034 <_kill_r+0x1c>
 8013032:	6023      	str	r3, [r4, #0]
 8013034:	bd38      	pop	{r3, r4, r5, pc}
 8013036:	bf00      	nop
 8013038:	200069cc 	.word	0x200069cc

0801303c <_getpid_r>:
 801303c:	f7ed bde6 	b.w	8000c0c <_getpid>

08013040 <_fstat_r>:
 8013040:	b538      	push	{r3, r4, r5, lr}
 8013042:	4d07      	ldr	r5, [pc, #28]	; (8013060 <_fstat_r+0x20>)
 8013044:	2300      	movs	r3, #0
 8013046:	4604      	mov	r4, r0
 8013048:	4608      	mov	r0, r1
 801304a:	4611      	mov	r1, r2
 801304c:	602b      	str	r3, [r5, #0]
 801304e:	f7ed fe46 	bl	8000cde <_fstat>
 8013052:	1c43      	adds	r3, r0, #1
 8013054:	d102      	bne.n	801305c <_fstat_r+0x1c>
 8013056:	682b      	ldr	r3, [r5, #0]
 8013058:	b103      	cbz	r3, 801305c <_fstat_r+0x1c>
 801305a:	6023      	str	r3, [r4, #0]
 801305c:	bd38      	pop	{r3, r4, r5, pc}
 801305e:	bf00      	nop
 8013060:	200069cc 	.word	0x200069cc

08013064 <_isatty_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4d06      	ldr	r5, [pc, #24]	; (8013080 <_isatty_r+0x1c>)
 8013068:	2300      	movs	r3, #0
 801306a:	4604      	mov	r4, r0
 801306c:	4608      	mov	r0, r1
 801306e:	602b      	str	r3, [r5, #0]
 8013070:	f7ed fe45 	bl	8000cfe <_isatty>
 8013074:	1c43      	adds	r3, r0, #1
 8013076:	d102      	bne.n	801307e <_isatty_r+0x1a>
 8013078:	682b      	ldr	r3, [r5, #0]
 801307a:	b103      	cbz	r3, 801307e <_isatty_r+0x1a>
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	bd38      	pop	{r3, r4, r5, pc}
 8013080:	200069cc 	.word	0x200069cc

08013084 <_init>:
 8013084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013086:	bf00      	nop
 8013088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801308a:	bc08      	pop	{r3}
 801308c:	469e      	mov	lr, r3
 801308e:	4770      	bx	lr

08013090 <_fini>:
 8013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013092:	bf00      	nop
 8013094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013096:	bc08      	pop	{r3}
 8013098:	469e      	mov	lr, r3
 801309a:	4770      	bx	lr
